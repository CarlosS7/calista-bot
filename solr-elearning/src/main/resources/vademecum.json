{
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/107.html": {
        "definition": "Son los errores que detecta el int\u00e9rprete (java)", 
        "concept": "run time", 
        "description": "Son los errores que detecta el int\u00e9rprete (java). Estos errores suelen detener la ejecuci\u00f3n. En el caso de java, el int\u00e9rprete lanza una excepci\u00f3n que pudiera ser capturada por el propio programa. Errores t\u00edpicos de ejecuci\u00f3n: \u00b7 objeto no creado (referencia a NULL) \u00b7 acceso a un array fuera de su tama\u00f1o Los errores de ejecuci\u00f3n son f\u00e1ciles de detectar cuando se producen; pero es dif\u00edcil garantizar que no se van a producir. La forma habitual de prevenir estos errores consiste en probar el programa exhaustivamente de forma que los errores aparezcan en el laboratorio y no en producci\u00f3n.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/105.html"
        ], 
        "title": "de ejecuci\u00f3n", 
        "id": "107"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/114.html": {
        "definition": "Constituyen un mecanismo para propagar r\u00e1pidamente situaciones excepcionales (t\u00edpicamente errores que se detectan) salt\u00e1ndose el flujo normal de ejecuci\u00f3n del programa", 
        "concept": "concepto", 
        "description": "Constituyen un mecanismo para propagar r\u00e1pidamente situaciones excepcionales (t\u00edpicamente errores que se detectan) salt\u00e1ndose el flujo normal de ejecuci\u00f3n del programa. Materialmente, una excepci\u00f3n es un objeto que ... \u00b7 debe ser de una subclase de java.lang.Throwable \u00b7 se crea con new (o sea, usando un constructor) \u00b7 entre sus campos suele llevar informaci\u00f3n de por qu\u00e9 se crea (o sea, de qu\u00e9 circunstancia excepcional es mensajero) \u00b7 lleva informaci\u00f3n acerca de en qu\u00e9 punto del c\u00f3digo se crea y cual es la serie de llamadas a m\u00e9todos que han llevado a ese punto del c\u00f3digo (a esta informaci\u00f3n se la llama \u201ctraza\u201d); la traza se puede imprimir en consola: \u00b7 se lanza con throw \u00b7 el lanzamiento interrumpe la ejecuci\u00f3n normal del c\u00f3digo, es decir que la siguiente instrucci\u00f3n no se ejecuta; por ello el lanzamiento de la excepci\u00f3n suele estar en un bloque condicional \u00b7 se pueden capturar con bloques catch si 1. se lanzan dentro de un bloque try y 2. existe un bloque catch que captura excepciones de la clase de la excepci\u00f3n o de alguna superclase \u00b7 si la excepci\u00f3n se lanza en un m\u00e9todo que no desea (o no puede, o no conviene) capturarla, el m\u00e9todo puede propagarla, para lo cual debe indicarlo en su cabecera Si en la traza (cadena de llamadas a m\u00e9todos) encontramos un bloque try, la excepci\u00f3n puede ser capturada por un bloque catch, siempre y cuando el bloque catch tenga previsto capturar excepciones de esta clase o de alguna superclase. Si en la traza no hubiera ning\u00fan bloque try con un catch adecuada, la excepci\u00f3n sale del programa, pasando al soporte de ejecuci\u00f3n que 1. informa en consola del problema (es decir, imprime la traza) 2. detiene la ejecuci\u00f3n", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/115.html"
        ], 
        "title": "Excepciones", 
        "alternative": "exceptions", 
        "id": "114"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/126.html": {
        "definition": "Con las expresiones elementales descritas se pueden escribir expresiones m\u00e1s complejas 2 * 3 + 4 * 5 \u2192 26 Cuando se combina expresiones hay unas reglas de precedencia", 
        "description": "Con las expresiones elementales descritas se pueden escribir expresiones m\u00e1s complejas 2 * 3 + 4 * 5 \u2192 26 Cuando se combina expresiones hay unas reglas de precedencia. Si no las recuerda o prefiere no arriesgarse a recordarlas mal, use par\u00e9ntesis para indicar exactamente en qu\u00e9 orden se van evaluando los resultados intermedios: (2 * 3) + (4 * 5) \u2192 26 2 * (3 + 4) * 5 \u2192 70 1 <= d\u00eda && d\u00eda <= 31 \u2192 true si \"d\u00eda\" est\u00e1 en el rango [1, 31] Las reglas de precedencia en java son las siguientes, ordenadas por orden de precedencia (los operadores se aplican en el orden en que aparecen en esta lista):", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/122.html"
        ], 
        "title": "precedencia de operadores", 
        "examples": [
            "\u00a01. ++ -- !  \u00a02. * / %  \u00a03. + -  \u00a04. < <=\r\n  > >=  \u00a05. == !=  \u00a06. &  \u00a07. ^  \u00a08. |  \u00a09. &&\r\n   10. || "
        ], 
        "id": "126"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/132.html": {
        "definition": "Es un calificativo que se puede aplicar a variables, m\u00e9todos o clases y quiere decir que es invariable", 
        "concept": "palabra reservada", 
        "description": "Es un calificativo que se puede aplicar a variables, m\u00e9todos o clases y quiere decir que es invariable. final class Cuando una clase se califica como final, no puede ser extendida. Tobos los miembros de una clase final pasan a ser finales. final m\u00e9todo Cuando un m\u00e9todo se califica como final, no puede ser redefinido si la clase a la que pertenece fuera extendida por otra clase. La ventaja que aporta el calificativo final es que impide el polimorfismo pues al no poder ser redefinidos los m\u00e9todos, nunca habr\u00e1 sorpresas en tiempo de ejecuci\u00f3n. final variable de clase La variable se convierte en constante. Debe ser inicializada o bien junto a la propia definici\u00f3n, o en la zona static de inicializaci\u00f3n de variables. final variable de objeto La variable se convierte en constante. Debe ser inicializada o bien junto a la propia definici\u00f3n, o bien en todos y cada uno de los constructores de la clase. final argumento formal de un m\u00e9todo El argumento se convierte en constante, dentro del m\u00e9todo; es decir, su valor no puede ser modificado. final variable local (o autom\u00e1tica) La variable se convierte en constante; es decir, su valor no puede modificarse. La identificaci\u00f3n de elementos finales puede proporcionar alguna mejora en tiempo de ejecuci\u00f3n pues se evitan los algoritmos de resoluci\u00f3n de polimorfismo y el compilador puede optimizar el c\u00f3digo. No obstante, hay que advertir que estas mejoras suelen ser muy modestas. NOTA. Un error frecuente consiste en declarar como final una variable que es referencia a un objeto y luego pensar que el objeto no puede ser modificado. Final s\u00f3lo garantiza que la variable siempre referenciar\u00e1 el mismo objeto, independientemente de que el objeto en s\u00ed evolucione.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/267.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "final", 
        "examples": [
            "\u00a0\u00a0\u00a0 Set<String> diccionario(String idioma) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 final Set<String> frases = new\r\n  HashSet<String>(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if\r\n  (idioma.equalsIgnoreCase(\"espa\u00f1ol\")) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 frases.add(\"hola\"); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 frases.add(\"adi\u00f3s\"); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if\r\n  (idioma.equalsIgnoreCase(\"english\")) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 frases.add(\"hi\"); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 frases.add(\"bye\"); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // frases = ...;\u00a0\u00a0\u00a0\r\n  provocar\u00eda un error de re-asignaci\u00f3n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return frases; \u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "132"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/119.html": {
        "id": "119", 
        "definition": "Las excepciones java", 
        "description": "Las excepciones java.lang.Error son competencia del entorno de ejecuci\u00f3n de programas java. Es muy raro que sean lanzadas por un programa de usuario.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/117.html"
        ], 
        "title": "\u00bfcu\u00e1ndo lanzar Error o subclases de ella?"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/46.html": {
        "definition": "Componente sint\u00e1ctico de sentencias condicionales de tipo \u201c switch \u201d", 
        "concept": "palabra reservada", 
        "description": "Componente sint\u00e1ctico de sentencias condicionales de tipo \u201c switch \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/275.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "case", 
        "id": "46"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/54.html": {
        "definition": "Son clases que indican qu\u00e9 se puede hacer con ellas; pero no indican c\u00f3mo se hace algo", 
        "description": "Son clases que indican qu\u00e9 se puede hacer con ellas; pero no indican c\u00f3mo se hace algo. Las clases abstractas tienen alg\u00fan m\u00e9todo abstracto: indica nombre, argumentos, resultado y excepciones, pero obvia el cuerpo del m\u00e9todo. Ver \"abstract\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/4.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/52.html"
        ], 
        "title": "clases abstractas", 
        "examples": [
            "public\r\n  abstract class Serie {  \u00a0\u00a0\u00a0 private final int t0;  \u00a0 \u00a0\u00a0\u00a0 protected Serie(int t0) { this.t0 = t0; }\r\n   \u00a0 \u00a0\u00a0\u00a0 public int t0() { return t0; }  \u00a0 \u00a0\u00a0\u00a0 public abstract int termino(int\r\n  n);  \u00a0 \u00a0\u00a0\u00a0 public int suma(int n) {  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int suma = 0;  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int i = 0; i < n; i++)  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 suma+=\r\n  termino(i);  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return suma;  \u00a0\u00a0\u00a0 }  } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "54"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/348.html": {
        "definition": "En lo que sigue, un elemento \u201cx\u201d es \u201cequals\u201d a otro elemento \u201cy\u201d s\u00ed y s\u00f3lo si \u201cx", 
        "description": "En lo que sigue, un elemento \u201cx\u201d es \u201cequals\u201d a otro elemento \u201cy\u201d s\u00ed y s\u00f3lo si \u201cx.equals(y) == true\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/347.html"
        ], 
        "title": "m\u00e9todos de la interface", 
        "examples": [
            "void clear() boolean containsKey(Object\r\n  clave)  boolean containsValue(Object\r\n  valor)  boolean equals(Object x)  V get(Object clave)  boolean isEmpty()  Set<K> keySet()  V put(K clave, V valor)  V remove(Object clave)  int size()  Collection<V> values() "
        ], 
        "id": "348"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/102.html": {
        "definition": "Java diferencia entre tipos primitivos y objetos", 
        "concept": "concepto", 
        "description": "Java diferencia entre tipos primitivos y objetos. Los envoltorios son objetos que rodean un tipo primitivo y proporcionan m\u00e9todos. El valor (primitivo) contenido en un envoltorio se establece en el constructor, y no se puede modificar nunca. int Integer byte Byte short Short long Long double Double float Float boolean Boolean Ver \u201cAutoboxing\u201d. Los envoltorios proporcionan funciones de conveniencia tales como \u00b7 cargar datos de una cadena (de representaci\u00f3n textual a formato interno) \u00b7 generar una cadena que representa el valor Algunos muy frecuentemente utilizados:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/411.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Envoltorios", 
        "alternative": "wrappers", 
        "id": "102"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/94.html": {
        "definition": "En ingl\u00e9s recibe varios nombres: En todo caso se refiere al hecho de que cuando una variable es polim\u00f3rfica y puede referirse a objetos de varias subclases, el m\u00e9todo que se ejecuta depende del tipo del objeto en tiempo de ejcuci\u00f3n", 
        "concept": "concepto", 
        "description": "En ingl\u00e9s recibe varios nombres: En todo caso se refiere al hecho de que cuando una variable es polim\u00f3rfica y puede referirse a objetos de varias subclases, el m\u00e9todo que se ejecuta depende del tipo del objeto en tiempo de ejcuci\u00f3n. Es decir, no depende del tipo de la variable, sino del tipo del objeto. Se ve m\u00e1s f\u00e1cilmente con un ejemplo.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Elecci\u00f3n din\u00e1mica de m\u00e9todo", 
        "examples": [
            "class A", 
            "public\r\n  class A { \u00a0\u00a0 public String getMe() { return \"Soy\r\n  A\"; } }", 
            "class\r\n  B extends A", 
            "public\r\n  class A { \u00a0\u00a0 @Override \u00a0\u00a0 public String getMe() { return \"Soy\r\n  A\"; } }", 
            "ejecuci\u00f3n:", 
            "A\r\n  a = new A(); B\r\n  b = new B(); A\r\n  ab= new B(); System.out.println(a.getMe()); System.out.println(b.getMe()); System.out.println(ab.getMe());", 
            "\u00a0 \u00a0 // upcasting Soy A Soy B Soy B\u00a0\u00a0\u00a0 // sabe que es B"
        ], 
        "id": "94"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/92.html": {
        "definition": "Los ficheros ", 
        "description": "Los ficheros .class pueden empaquetarse en ficheros .jar. Esto es especialmente \u00fatil cuando hay muchos ficheros .class que, empaquetados en un solo fichero .jar, son m\u00e1s f\u00e1ciles de manejar. Los ficheros .jar pueden contener un MANIFEST Dicho MANIFEST puede indicar el objeto que dispone del m\u00e9todo \u201cmain\u201d para arrancar la ejecuci\u00f3n De esta forma el int\u00e9rprete, java, sabe c\u00f3mo lanzar la aplicaci\u00f3n: Si su sistema operativo lo permite, pueden asociarse los ficheros con extensi\u00f3n .jar al int\u00e9rprete de java, de forma que baste hacer \"doble clic\" en el fichero para que se ejecute.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/88.html"
        ], 
        "title": "ficheros .jar con manifest", 
        "examples": [
            "Manifest-Version: 1.0 Class-Path: Main-Class: ejemplo.ejecucion.Hola2"
        ], 
        "id": "92"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/319.html": {
        "definition": "Adem\u00e1s de servir como objeto contenedor de valores reales ( double ), proporciona algunos m\u00e9todos \u00fatiles:", 
        "concept": "clase", 
        "description": "Adem\u00e1s de servir como objeto contenedor de valores reales ( double ), proporciona algunos m\u00e9todos \u00fatiles:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "Double", 
        "id": "319"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/331.html": {
        "definition": "Madre de un conjunto de clases para leer ficheros byte a byte", 
        "concept": "clase abstracta", 
        "description": "Madre de un conjunto de clases para leer ficheros byte a byte. La clase derivada m\u00e1s habitual es java.io.FileInputStream FileInputStream(File file) constructor FileInputStream(String nombre) constructor Todas las clases derivadas de InputStream proporcionan estos m\u00e9todos: java.io.InputStream int available() una estimaci\u00f3n del n\u00famero de bytes que quedan por leer void close() cierra el fichero int read() lee un byte devuelve el byte le\u00eddo pasado a entero devuelve \u20131 si el fichero se ha acabado int read(byte[] bytes) lee un n\u00famero 'n' de bytes igual o menor que la longitud del array 'bytes' devuelve el n\u00famero de bytes le\u00eddos; los bytes le\u00eddos est\u00e1n en las posiciones [0 .. n-1] del array 'bytes' devuelve \u20131 si el fichero se ha acabado lee un n\u00famero 'n' de bytes devuelve el n\u00famero de bytes le\u00eddos; los bytes le\u00eddos est\u00e1n en las posiciones [start .. start+n-1] del array 'bytes' devuelve \u20131 si el fichero se ha acabado Es habitual preparar un array de cierto tama\u00f1o, pecando por exceso, para ir leyendo montones de bytes. En cada caso particular habr\u00e1 que decidir c\u00f3mo se van leyendo bytes para hacer lo que haya que hacerles. El ejemplo siguiente lee el fichero entero, devolviendo todos los bytes en un array: Java proporciona una clase derivada, BufferedInputStream, que proporciona la misma funcionalidad, pero realiza una gesti\u00f3n m\u00e1s eficiente del fichero, leyendo muchos bytes de golpe para que las llamadas a los m\u00e9todos 'read()' sean m\u00e1s r\u00e1pidas. El ejemplo anterior probablemente funcione m\u00e1s deprisa escrito de la siguiente forma: InputStream lee bytes (8 bits). Si necesita leer caracteres (16 bits), debe utilizar la clase Reader . Ver \u201c File, \u201c Reader, \u201c OutputStream .", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "InputStream", 
        "examples": [
            "\u00a0\u00a0\u00a0 /** \u00a0\u00a0\u00a0\u00a0 * Lectura de todos\r\n  los bytes de un fichero. \u00a0\u00a0\u00a0\u00a0 * \u00a0\u00a0\u00a0\u00a0 * @param fichero\r\n  nombre del fichero del que queremos leer. \u00a0\u00a0\u00a0\u00a0 * @return todos los\r\n  bytes en el fichero. \u00a0\u00a0\u00a0\u00a0 * @throws IOException\r\n  si hay problemas al abrir o al escribir. \u00a0\u00a0\u00a0\u00a0 */ \u00a0\u00a0\u00a0\r\n  public byte[] leeTodosLosBytes(String fichero) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throws IOException { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 File file = new File(fichero); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int longitud = (int) file.length(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 InputStream is = new FileInputStream(fichero); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 byte[] total = new byte[longitud]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int leidos = 0; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 while (leidos < longitud) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int n = is.read(total,\r\n  leidos, 1000); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (n < 0) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 leidos += n; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 is.close(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return total; \u00a0\u00a0\u00a0\r\n  }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "\u00a0\u00a0\u00a0 public byte[] leeTodosLosBytes(String fichero) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throws IOException { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 File file = new File(fichero); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int longitud = (int) file.length(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 InputStream is = \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new BufferedInputStream( \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new\r\n  FileInputStream(fichero)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 byte[] total = new byte[longitud]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int leidos = 0; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 while (leidos < longitud) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int n = is.read(total, leidos,\r\n  1000); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (n < 0) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 leidos += n; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 is.close(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return total; \u00a0\u00a0\u00a0\r\n  }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "331"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/51.html": {
        "definition": "Tipo que representa caracteres simples", 
        "concept": "palabra reservada", 
        "description": "Tipo que representa caracteres simples. Un car\u00e1cter es lo que usted se imagina: En el c\u00f3digo fuente los caracteres se escriben entre comillas simples. Algunos caracteres requieren una notaci\u00f3n espec\u00edfica para que el c\u00f3digo quede muy claro: Habitualmente podr\u00e1 utilizar sin mayores complicaciones los caracteres del castellano e idiomas occidentales. Para ser m\u00e1s precisos, lo que se conoce como ISO-LATIN-1: decimal car\u00e1cter hexadecimal 32 - 47 ! \" # $ % & ' ( ) * +, - . / 20 \u2013 2F 48 \u2013 63 0 1 2 3 4 5 6 7 8 9 : ; < = > ? 30 \u2013 3F 64 \u2013 79 @ A B C D E F G H I J K L M N O 40 \u2013 4F 80 \u2013 95 P Q R S T U V W X Y Z [ ] ^ _ 50 \u2013 5F 96 \u2013 111 ` a b c d e f g h i j k l m n o 60 \u2013 6F 112 \u2013 126 p q r s t u v w x y z { | } ~ 70 \u2013 7E 160 \u2013 175 \u00a1 \u00a2 \u00a3 \u00a4 \u00a5 \u00a6 \u00a7 \u00a8 \u00a9 \u00aa \u00ab \u00ac \u00ad \u00ae \u00af A0 \u2013 AF 176 \u2013 191 \u00b0 \u00b1 \u00b2 \u00b3 \u00b4 \u00b5 \u00b6 \u00b7 \u00b8 \u00b9 \u00ba \u00bb \u00bc \u00bd \u00be \u00bf B0 \u2013 BF 192 \u2013 207 \u00c0 \u00c1 \u00c2 \u00c3 \u00c4 \u00c5 \u00c6 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00cc \u00cd \u00ce \u00cf C0 \u2013 CF 208 \u2013 223 \u00d0 \u00d1 \u00d2 \u00d3 \u00d4 \u00d5 \u00d6 \u00d7 \u00d8 \u00d9 \u00da \u00db \u00dc \u00dd \u00de \u00df D0 \u2013 DF 224 \u2013 239 \u00e0 \u00e1 \u00e2 \u00e3 \u00e4 \u00e5 \u00e6 \u00e7 \u00e8 \u00e9 \u00ea \u00eb \u00ec \u00ed \u00ee \u00ef E0 \u2013 EF 240 \u2013 255 \u00f0 \u00f1 \u00f2 \u00f3 \u00f4 \u00f5 \u00f6 \u00f7 \u00f8 \u00f9 \u00fa \u00fb \u00fc \u00fd \u00fe \u00ff F0 - FF Un car\u00e1cter en Java se representa internamente con 16 bits (2 bytes), capacitando a los programas para manejar 65.536 caracteres diferentes. Para codificar los caracteres se utiliza el convenio denominado Unicode, que es un acuerdo internacional para decidir qu\u00e9 combinaci\u00f3n de 16 bits representa cada car\u00e1cter. Con 65.536 posibilidades, realmente caben caracteres de muchos idiomas. Ver \u201c Unicode \u201d. Cuando necesite varios caracteres formando palabras y frases, utilice los \" String \".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/287.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/373.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "char", 
        "examples": [
            "'b'", 
            "'n'", 
            "'r'", 
            "'t'", 
            "'\\'", 
            "'''"
        ], 
        "id": "51"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/235.html": {
        "definition": "M\u00e9todo de las clases PrintStream y PrintWriter", 
        "concept": "m\u00e9todo", 
        "description": "M\u00e9todo de las clases PrintStream y PrintWriter. Imprime un valor. Est\u00e1 sobrecargado para tratar n\u00fameros, booleanos, caracteres y cualquier objeto. En este \u00faltimo caso imprime la cadena devuelta por el m\u00e9todo toString(). Ver \u201c System.out y \u201c System.err .", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "print", 
        "id": "235"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/117.html": {
        "definition": "Es una clase como fundamental dentro de la jerarqu\u00eda de clases que definen objetos que se pueden lanzar", 
        "concept": "clase", 
        "description": "Es una clase como fundamental dentro de la jerarqu\u00eda de clases que definen objetos que se pueden lanzar. La relaci\u00f3n completa de clases es interminable. Las anteriores son algunas de las m\u00e1s comunes, invit\u00e1ndose al programador a desarrollas sus propias clases, subclases de las anteriores, sabiendo que \u00b7 las clases que hereden de RuntimeException no necesitan declararse en la cabecera de los m\u00e9todos: se utilizan para errores imprevistos tales como errores del programador \u00b7 las clases que hereden de Exception s\u00ed deben declararse en la cabecera de los m\u00e9todos que deseen propagarlas (la \u00fanica alternativa es capturarlas dentro del m\u00e9todo). Se utilizan para errores previstos por la aplicaci\u00f3n: datos err\u00f3neos para los que se sabe qu\u00e9 hacer cuando se presentan La clase Exception proporciona algunos m\u00e9todos interesantes: imprime la traza: serie de m\u00e9todos llamados sucesivamente para llegar al punto donde se crea. Lo normal es crear el objeto cuando se produce la circunstancia que provoca su lanzamiento, de forma que la traza indica la serie de llamadas a m\u00e9todos que llevan a la ocurrencia de la incidencia reportada. crea un objeto sin mensaje asociado crea un objeto con un mensaje asociado devuelve el mensaje introducido en el constructor Es muy habitual que las excepciones propias sean subclases de las Exception:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/118.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/119.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/120.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/121.html"
        ], 
        "title": "Exception", 
        "examples": [
            "public\r\n  class MisErrores extends Exception { \u00a0\u00a0\u00a0 private Dato dato; \u00a0 \u00a0\u00a0\u00a0 public MisErrores() { super(); } \u00a0 \u00a0\u00a0\u00a0 public MisErrores(String msg) {\r\n  super(msg); } \u00a0 \u00a0\u00a0\u00a0 public MisErrores(String msg, Dato dato)\r\n  { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 super(msg); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.dato = dato; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public Dato getDato() { return dato; }"
        ], 
        "id": "117"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/75.html": {
        "id": "75", 
        "definition": "Son variables declaradas dentro de una clase, pero fuera de cualquier M\u00e9todo ", 
        "description": "Son variables declaradas dentro de una clase, pero fuera de cualquier M\u00e9todo . La declaraci\u00f3n responde al esquema general: <\u00e1mbito> [ static ] [ final ] <tipo> identificador [ = <valor_inicial> ] ; Su \u00e1mbito de visibilidad es al menos toda la clase en la que se declaran. Los modificadores de visibilidad pueden hacerlas visibles fuera de la clase. Las variables de clase, static, existen desde que arranca el programa hasta que termina. Las variables de objeto existen desde que se crea el objeto (con new), hasta que el objeto deja de usarse.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/73.html"
        ], 
        "title": "Declaraci\u00f3n de variables dentro de una clase: campos"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/182.html": {
        "definition": "Compilador", 
        "concept": "herramienta est\u00e1ndar", 
        "description": "Compilador. Lee c\u00f3digo fuente (Ficheros .java ) y genera c\u00f3digo interpre table (Ficheros .class ). Sea la clase Si el fichero \u201cHola.java\u201d est\u00e1 en el directorio X, nos situaremos en dicho directorio y llamaremos al compilador: Si hay que compilar varios ficheros .java, ind\u00edquelos uno tras otro separados los nombres por espacio en blanco.El resultado es un fichero \u201cHola.class\u201d en el mismo directorio. Si deseamos separar los ficheros .java de los ficheros .class El resultado es un fichero \u201cHola.class\u201d en el directorio Y.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/131.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/42.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/183.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/184.html"
        ], 
        "title": "javac", 
        "examples": [
            "public\r\n  class Hola { \u00a0 public static void main(String[]\r\n  argumentos) { \u00a0\u00a0\u00a0 System.out.println(\"Hola.\"); \u00a0 } }"
        ], 
        "id": "182"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/184.html": {
        "id": "184", 
        "definition": "Si en la compilaci\u00f3n necesitamos c\u00f3digo de otro proyecto java que se encuentra en el directorio Z (y los directorios que correspondan a su estructura de paquetes), se lo indicaremos al compilador Si el otro proyecto est\u00e1 compactado en un fichero Z", 
        "description": "Si en la compilaci\u00f3n necesitamos c\u00f3digo de otro proyecto java que se encuentra en el directorio Z (y los directorios que correspondan a su estructura de paquetes), se lo indicaremos al compilador Si el otro proyecto est\u00e1 compactado en un fichero Z.jar, se lo indicaremos al compilador Si hay que recurrir a varios otros proyectos Z1, Z2.jar, ..., los indicaremos todos ellos En lugar de escribir \u201c-classpath\u201d cada vez que se llama al compilador, se puede definir una variable de entorno CLASSPATH. El efecto es equivalente. Ver [http://java.sun.com/j2se/1.5.0/docs/tooldocs/index.html#basic].", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/182.html"
        ], 
        "title": "incorporando datos de otro proyecto"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/271.html": {
        "definition": "Se puede usar \"super(", 
        "description": "Se puede usar \"super(...)\" como primera sentencia de un constructor de una subclase para ejecutar el constructor de su superclase. Ver \u201cExtensi\u00f3n\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/128.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/270.html"
        ], 
        "title": "super en constructores", 
        "examples": [
            "class Poligono", 
            "public\r\n  class Poligono { \u00a0\u00a0 private Punto[] vertices; \u00a0 \u00a0\u00a0 public Poligono(Punto... vertices) { \u00a0\u00a0\u00a0\u00a0\u00a0 this.vertices = new\r\n  Punto[vertices.length]; \u00a0\u00a0\u00a0\u00a0\u00a0 for (int i = 0; i < vertices.length;\r\n  i++) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.vertices[i] = vertices[i]; \u00a0\u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "class Cuadrado extends Poligono", 
            "class Cuadrado extends\r\n  Poligono { \u00a0\u00a0 public Cuadrado(Punto centro, double lado)\r\n  { \u00a0\u00a0\u00a0\u00a0\u00a0 super( \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new Punto(centro.getX() - lado/2,\r\n  centro.getY() + lado/2), \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new Punto(centro.getX() + lado/2,\r\n  centro.getY() + lado/2), \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new Punto(centro.getX() + lado/2,\r\n  centro.getY() - lado/2), \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new Punto(centro.getX() - lado/2,\r\n  centro.getY() - lado/2)); \u00a0\u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "271"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/171.html": {
        "definition": "Ver \u201cHerencia\u201d", 
        "concept": "concepto", 
        "description": "Ver \u201cHerencia\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/155.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Inheritance", 
        "id": "171"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/143.html": {
        "definition": "Los componentes sint\u00e1cticos de un bucle son opcionales, pudiendo hacerse \u201ccosas raras\u201d Ver \" Bucles \"", 
        "description": "Los componentes sint\u00e1cticos de un bucle son opcionales, pudiendo hacerse \u201ccosas raras\u201d Ver \" Bucles \".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/34.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/138.html"
        ], 
        "title": "bucles \"for\" degenerados", 
        "examples": [
            "for\r\n  ( ; \u00a0\u00a0\u00a0\u00a0 condici\u00f3n ; \u00a0\u00a0\u00a0\u00a0 actualizaci\u00f3n)", 
            "for (inicializaci\u00f3n ;  \u00a0\u00a0\u00a0\u00a0 ; \u00a0\u00a0\u00a0\u00a0 actualizaci\u00f3n)", 
            "for (inicializaci\u00f3n ; \u00a0\u00a0\u00a0\u00a0 condici\u00f3n ; \u00a0\u00a0\u00a0\u00a0 )", 
            "for ( ; ; )"
        ], 
        "id": "143"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/380.html": {
        "definition": "Asociaci\u00f3n tipo Map<K, V> donde los elementos se recorren en orden", 
        "concept": "clase", 
        "description": "Asociaci\u00f3n tipo Map<K, V> donde los elementos se recorren en orden. Ver \u201c Map \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "TreeMap<K, V>", 
        "id": "380"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/21.html": {
        "definition": "Un array se trata a todos los efectos como un objeto, pas\u00e1ndose referencias entre variables: \u00b7 cuando se llama a un m\u00e9todo y se le pasa un array, el m\u00e9todo hace su copia de la referencia; pero comparte el array", 
        "description": "Un array se trata a todos los efectos como un objeto, pas\u00e1ndose referencias entre variables: \u00b7 cuando se llama a un m\u00e9todo y se le pasa un array, el m\u00e9todo hace su copia de la referencia; pero comparte el array", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/15.html"
        ], 
        "title": "paso de valores", 
        "examples": [
            "\u00a0 \u00a0\u00a0\u00a0 void caso1(int[] x) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 x[0] *= 10; \u00a0\u00a0\u00a0 }", 
            "\u00a0", 
            "\u00a0 \u00a0\u00a0\u00a0 void test1() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int[] a = new int[]{1, 2, 3}; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(a)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 caso1(a); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(a)); \u00a0\u00a0\u00a0 }", 
            "\u00a0 \u00a0 [1, 2, 3] \u00a0 [10, 2, 3]"
        ], 
        "id": "21"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/223.html": {
        "definition": "", 
        "concept": "concepto", 
        "description": "", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Operadores", 
        "id": "223"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/167.html": {
        "definition": "Una misma clase puede implementar varias interfaces", 
        "description": "Una misma clase puede implementar varias interfaces.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/166.html"
        ], 
        "title": "implementaci\u00f3n m\u00faltiple", 
        "examples": [
            "public\r\n  interface Trazo { \u00a0\u00a0\u00a0 double longitud(); }", 
            "public\r\n  interface Area { \u00a0\u00a0\u00a0 double superficie(); }", 
            "public\r\n  class Rectangulo \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 implements Trazo, Area { \u00a0\u00a0\u00a0 private double base, altura; \u00a0 \u00a0\u00a0\u00a0 public Rectangulo(double base, double\r\n  altura) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.base = base; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.altura\r\n  = altura; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double longitud() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return 2 * base + 2 * altura; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double superficie() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return base * altura; \u00a0 \u00a0\u00a0} }\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "167"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/140.html": {
        "definition": "Alternativamente, podemos ir iterando sobre los elementos de un conjunto de valores sin variable contador", 
        "concept": "for each", 
        "description": "Alternativamente, podemos ir iterando sobre los elementos de un conjunto de valores sin variable contador. Esto se puede hacer \u00b7 sobre arrays \u00b7 sobre clases que implementen la \u201cinterface Iterable<T>\u201d: por ejemplo, listas y conjuntos Si tenemos una clase que proporciona un iterador: class Alamacen implements Iterable<Dato> { public Iteratos<Dato> iterator() { \u2026 } } entonces podemos recorrer directamente Almacen almacen; for (Dato dato: almacen) { \u2026 } Ver \u201c Iterable \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/138.html"
        ], 
        "title": "bucles \"for\" con iterador", 
        "examples": [
            "Clase[]\r\n  array = ...; \u00a0 for\r\n  (Clase x: array)  \u00a0\u00a0\u00a0 procesa(x);", 
            "List<Clase>\r\n  lista = ...; \u00a0 for (Clase x:\r\n  lista) \u00a0\u00a0\u00a0 procesa(x);", 
            "Set<Clase>\r\n  conjunto = ...; \u00a0 for (Clase x:\r\n  conjunto) \u00a0\u00a0\u00a0 procesa(x);", 
            "Collection\r\n  <Clase> coleccion = ...; \u00a0 for (Clase x:\r\n  coleccion) \u00a0\u00a0\u00a0 procesa(x);", 
            "enum Color { ROJO, NARANJA,\r\n  AMARILLO, VERDE, AZUL, A\u00d1IL, VIOLETA }; \u00a0 for\r\n  (Color color: Color.values()) { \u00a0\u00a0\u00a0 procesa(color); } \u00a0 for (Color color:\r\n  EnumSet.range(Color.NARANJA, Color.AZUL)) { \u00a0\u00a0\u00a0 procesa(color); }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "140"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/274.html": {
        "definition": "Es la capacidad de utilizar un objeto de una subclase en una variable de una superclase ", 
        "concept": "concepto", 
        "description": "Es la capacidad de utilizar un objeto de una subclase en una variable de una superclase . Ver \u201c Upcasting \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Sustituci\u00f3n", 
        "examples": [
            "class Poligono", 
            "public class Poligono { \u00a0\u00a0\r\n  \u2026\u00a0\u00a0 \u2026\u00a0\u00a0 \u2026 }", 
            "class Cuadrado\r\n  extends Poligono", 
            "class Cuadrado extends Poligono { \u00a0\u00a0 \u2026\u00a0\u00a0 \u2026\u00a0\u00a0\r\n  \u2026 }", 
            "Poligono poligono = new Cuadrado(); \u00a0", 
            "ArrayList<Poligono> dibujo = new\r\n  ArrayList<Poligono>; \u00a0 dibujo.add(new Cuadrado());"
        ], 
        "id": "274"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/44.html": {
        "definition": "Son contenedores (variables) para los valores internos de las Clases y/o Objetos ", 
        "concept": "concepto", 
        "description": "Son contenedores (variables) para los valores internos de las Clases y/o Objetos . \u00b7 de objeto: cuando cada objeto de una clase tiene su propia copia; es decir, muchos objetos de la misma clase tienen cada uno su conjunto de campos privado \u00b7 de clase (static): cuando todos los objetos de una clase comparten una copia com\u00fan \u00b7 \"PI\" es un campo de clase porque pone \"static\". Todos los objetos de clase Circulo comparten el mismo valor de \"PI\". Adem\u00e1s, es p\u00fablico (\"public\") e inmutable (\"final\"); es decir, una constante. \u00b7 \"radio es un campo de objeto porque no pone \"static\". Cada objeto de clase Circulo tendr\u00e1 su propio radio. Adem\u00e1s, es privado (\"private\"). Cada campo puede declararse como: 1. public, protected, de paquete o private, seg\u00fan la Visibilidad que se desee 2. static si es de clase; si no se dice nada es de objeto 3. final si queremos que su valor sea inmodificable; si no se dice nada, podr\u00e1 modificarse Se recomienda que \u00b7 todos los campos de objeto sean private \u00b7 todos los campos de objeto queden inicializados en su construcci\u00f3n \u00b7 los nombre de los campos de objeto empiecen por una letra min\u00fascula \u00b7 los nombres de los campos de clase empiecen por una letra min\u00fascula, salvo que sean constantes (static final) en cuyo caso se escribir\u00e1n con letras may\u00fasculas", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/52.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/219.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/300.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Campo", 
        "examples": [
            "public\r\n  class Circulo { \u00a0 public static final double PI = 3.1416; \u00a0 private double radio; \u00a0 \u00a0\r\n  public double area() { return PI * r * r; }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "alternative": "field", 
        "id": "44"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/24.html": {
        "id": "24", 
        "definition": "Los arrays son de tama\u00f1o fijo, mientras que las Listas son de tama\u00f1o variable", 
        "description": "Los arrays son de tama\u00f1o fijo, mientras que las Listas son de tama\u00f1o variable. Si no sabemos el tama\u00f1o de un array al crearlo, tenemos 2 opciones 1. crearlo muy grande, de forma que nos quedan los datos en el peor caso posible; el precio que pagamos es desperdiciar espacio 2. crearlo de un tama\u00f1o reducido, pero prever que si llegan m\u00e1s datos habr\u00e1 que ampliarlo (o sea, crea un array mayor y copiar los datos); el precio que pagamos es tiempo de ejecuci\u00f3n. Las listas son una forma c\u00f3moda de aplicar la segunda opci\u00f3n. Ver \" Listas \". Ver \u201clist frente a arrays .", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/190.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/190.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/345.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/15.html"
        ], 
        "title": "\u00bfarrays o listas?"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html": {
        "definition": "Un m\u00e9todo es un poco de c\u00f3digo con una misi\u00f3n", 
        "concept": "concepto", 
        "description": "Un m\u00e9todo es un poco de c\u00f3digo con una misi\u00f3n. T\u00edpicamente utiliza una serie de argumentos de entrada para producir un resultado. En una misma clase no pueden convivir dos m\u00e9todos que tengan igual nombre e igual lista de argumentos de entrada. Simplemente porque java no sabr\u00eda distinguir a qu\u00e9 m\u00e9todo nos referimos en cada momento. Cuando dos m\u00e9todos se llaman igual pero difieren en el n\u00famero, orden o tipo de los argumentos de entrada, se dice que el nombre del m\u00e9todo est\u00e1 sobrecargado (en ingl\u00e9s, \"overloaded\"). Esto se puede hacer en java. }", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/201.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/202.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/203.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/204.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/205.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/206.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/207.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/208.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/209.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/210.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/211.html"
        ], 
        "title": "M\u00e9todo", 
        "examples": [
            "int\r\n  suma (int a, int b) { \u00a0 return a + b; } \u00a0 char\r\n  suma (char\r\n  c, int n) { \u00a0 return c + n;"
        ], 
        "alternative": "method", 
        "id": "200"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/48.html": {
        "id": "48", 
        "definition": "Se dice del caso en el que una variable de tipo A recibe el valor de una variable de tipo B", 
        "description": "Se dice del caso en el que una variable de tipo A recibe el valor de una variable de tipo B. Esta operaci\u00f3n siempre se puede hacer, sin necesidad de indic\u00e1rselo expl\u00edcitamente al compilador. Es una operaci\u00f3n segura que jam\u00e1s causa ning\u00fan error. Ver \u201c Sustituci\u00f3n \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/274.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/47.html"
        ], 
        "title": "upcasting"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/374.html": {
        "id": "374", 
        "definition": "En sistemas tipo UNIX, Linux, ", 
        "description": "En sistemas tipo UNIX, Linux, ... En sistemas tipo Windows Si queremos que el c\u00f3digo se adapte al sistema en el que ejecuta o Si estamos escribiendo en un fichero, tambi\u00e9n podemos hacerlo directamente: o", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/373.html"
        ], 
        "title": "Saltos de l\u00ednea"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/346.html": {
        "definition": "Normalmente las listas se utilizan indicando el tipo de objetos que pueden contener", 
        "description": "Normalmente las listas se utilizan indicando el tipo de objetos que pueden contener. Pero tambi\u00e9n se pueden utilizar listas sobre Objetos en general, lo que permite listas heterog\u00e9neas a cambio de ser (t\u00edpicamente) necesario el uso de downcasting en la recuperaci\u00f3n de los elementos. Ejemplo:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/341.html"
        ], 
        "title": "listas de Object", 
        "examples": [
            "\u00a0\u00a0\u00a0\r\n  List lista = new\r\n  ArrayList(); \u00a0 \u00a0\u00a0\u00a0\r\n  lista.add(1); \u00a0\u00a0\u00a0\r\n  lista.add(9); \u00a0\u00a0\u00a0\r\n  lista.add(1, 5); \u00a0\u00a0\u00a0\r\n  System.out.println(lista.size()); \u00a0\u00a0\u00a0\r\n  System.out.println(lista.get(0)); \u00a0\u00a0\u00a0\r\n  System.out.println(lista.get(1)); \u00a0\u00a0\u00a0\r\n  System.out.println(lista.get(2)); \u00a0\u00a0\u00a0\r\n  for (Iterator it =\r\n  lista.iterator(); it.hasNext();) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int n = (Integer) it.next(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.print(n + \" \"); \u00a0\u00a0\u00a0\r\n  } \u00a0\u00a0\u00a0\r\n  System.out.println();"
        ], 
        "id": "346"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/352.html": {
        "definition": "Normalmente los mapas se utilizan indicando el tipo de las claves y valores que pueden contener", 
        "description": "Normalmente los mapas se utilizan indicando el tipo de las claves y valores que pueden contener. Pero tambi\u00e9n se pueden utilizar mapas sobre Objetos en general, lo que permite mapas heterog\u00e9neos a cambio de ser (t\u00edpicamente) necesario el uso de downcasting en la recuperaci\u00f3n de los elementos. El mismo ejemplo anterior quedar\u00eda as\u00ed:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/347.html"
        ], 
        "title": "mapas de Object", 
        "examples": [
            "\u00a0 Map mapa = new HashMap(); \u00a0 \u00a0\r\n  mapa.put(\"uno\", \"one\"); \u00a0\r\n  mapa.put(\"dos\", \"two\"); \u00a0\r\n  mapa.put(\"tres\", \"three\"); \u00a0\r\n  mapa.put(\"cuatro\", \"four\"); \u00a0\r\n  mapa.put(\"tres\", \"33\"); \u00a0\r\n  System.out.println(mapa.size()); \u00a0\r\n  for (Iterator it =\r\n  mapa.keySet().iterator(); it.hasNext(); ) { \u00a0\u00a0\u00a0 String clave = (String) it.next(); \u00a0\u00a0\u00a0\r\n  String valor = (String) mapa.get(clave); \u00a0\u00a0\u00a0\r\n  System.out.println(clave + \" ->\r\n  \" + valor); \u00a0 }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "352"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/180.html": {
        "id": "180", 
        "definition": "Acr\u00f3nimo: java archive", 
        "description": "Acr\u00f3nimo: java archive. Formato de ficheros que almacenan m\u00faltiples ficheros, comprimidos. Se emplea rutinariamente para convertir un grupo de ficheros class en un \u00fanico fichero jar. En esta agrupaci\u00f3n se puede incluir un fichero MANIFEST que indique por donde empezar, resultando en un fichero capaz de ejecutarse con un \u201cdoble clic\u201d. Ver \u201c Ejecuci\u00f3n \u201d. Ver \" Ficheros .java \". Se denomina de igual modo una herramienta est\u00e1ndar que permite comprimir varios ficheros y/o directorios en un \u00fanico fichero. El formato es compatible con ZIP. Ver [http://java.sun.com/j2se/1.5.0/docs/tooldocs/index.html#basic].", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/88.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/131.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "jar"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/192.html": {
        "definition": "Aquellas en las que cada elemento de la lista referencia al siguiente", 
        "concept": "estructura de datos", 
        "description": "Aquellas en las que cada elemento de la lista referencia al siguiente. La principal ventaja de las listas encadenadas es que ocupan tanto espacio como nodos tienen en cada momento (a diferencia de los arrays que ocupan tanto espacio como elementos pueden llegar a contener). Adem\u00e1s, es muy f\u00e1cil insertar o eliminar nodos en medio de la lista. El principal inconveniente de las listas encadenadas es que hay que tener una referencia por nodo, ocupando m\u00e1s espacio.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/193.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/194.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/195.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/196.html"
        ], 
        "title": "Listas encadenadas", 
        "alternative": "linked lists", 
        "id": "192"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/71.html": {
        "definition": "El fragmento de c\u00f3digo fuente que indica qu\u00e9 hacer cuando se llama al M\u00e9todo ; es decir, c\u00f3mo se genera el resultado", 
        "concept": "concepto", 
        "description": "El fragmento de c\u00f3digo fuente que indica qu\u00e9 hacer cuando se llama al M\u00e9todo ; es decir, c\u00f3mo se genera el resultado. Sint\u00e1cticamente, en java, lo que aparece entre llaves.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Cuerpo (de un m\u00e9todo)", 
        "examples": [
            "public\r\n  class Punto { \u00a0 private double x, y; \u00a0 \u00a0 public double distancia(Punto q) { \u00a0\u00a0\u00a0 double dx\r\n  = q.getX() - x; \u00a0\u00a0\u00a0 double dy\r\n  = q.getY() - y; \u00a0\u00a0\u00a0 return\r\n  Math.sqrt(dx * dx + dy * dy); \u00a0 } }"
        ], 
        "alternative": "method body", 
        "id": "71"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/362.html": {
        "definition": "Es una clase derivada de Reader que proporciona BufferedReader realiza una gesti\u00f3n m\u00e1s eficiente del fichero, leyendo muchos caracteres de golpe para que las llamadas a los m\u00e9todos 'read()' sean m\u00e1s r\u00e1pidas", 
        "concept": "clase", 
        "description": "Es una clase derivada de Reader que proporciona BufferedReader realiza una gesti\u00f3n m\u00e1s eficiente del fichero, leyendo muchos caracteres de golpe para que las llamadas a los m\u00e9todos 'read()' sean m\u00e1s r\u00e1pidas. El ejemplo anterior probablemente funcione m\u00e1s deprisa escrito de la siguiente forma:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/361.html"
        ], 
        "title": "BufferedReader", 
        "examples": [
            "\u00a0\u00a0\u00a0 public String leeTodosLosCaracteres(String fichero) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throws IOException { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 StringBuilder buffer = new\r\n  StringBuilder(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Reader reader = \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new BufferedReader( \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new\r\n  FileReader(fichero)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 char[] chars = new char[1024]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 while (true) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int n = reader.read(chars); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (n < 0) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 buffer.append(chars, 0, n); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 reader.close(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return buffer.toString(); \u00a0\u00a0\u00a0\r\n  }\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "\u00a0\u00a0\u00a0 public List<String> leeTodasLosLineas(String fichero) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throws IOException { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 List<String> lineas = new\r\n  ArrayList<String>(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 BufferedReader reader = \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new BufferedReader( \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new\r\n  FileReader(fichero)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 while (true) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 String linea = reader.readLine(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (linea == null) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lineas.add(linea); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 reader.close(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return lineas; \u00a0\u00a0\u00a0\r\n  }"
        ], 
        "id": "362"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/272.html": {
        "definition": "Se dice que A es superclase de B cuando B es extensi\u00f3n directa o indirecta de A", 
        "concept": "concepto", 
        "description": "Se dice que A es superclase de B cuando B es extensi\u00f3n directa o indirecta de A. Ver \u201c Extensi\u00f3n \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Superclases", 
        "id": "272"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/130.html": {
        "definition": "D\u00edcese de los ficheros que contienen programas java", 
        "description": "D\u00edcese de los ficheros que contienen programas java. Ver \u201cFicheros .java\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/131.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "75", 
        "alternative": "Fichero fuente ", 
        "id": "130"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/185.html": {
        "definition": "Herramienta que permite generar p\u00e1ginas HTML de documentaci\u00f3n de programas", 
        "concept": "herramienta est\u00e1ndar", 
        "description": "Herramienta que permite generar p\u00e1ginas HTML de documentaci\u00f3n de programas. Para ello utiliza los comentarios de documentaci\u00f3n insertados en el texto. Ver \u201c Documentaci\u00f3n \u201d. Ver [http://java.sun.com/j2se/javadoc/].", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/84.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "javadoc", 
        "id": "185"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/377.html": {
        "definition": "Conecta con una salida alternativa a la est\u00e1ndar, permitiendo escribir en ella", 
        "description": "Conecta con una salida alternativa a la est\u00e1ndar, permitiendo escribir en ella. Similar a System.out y, adem\u00e1s, pueden convivir: Normalmente lo que se escribe aparece en la pantalla pero es f\u00e1cil que el usuario env\u00ede la salida est\u00e1ndar a un fichero, en cuyo caso s\u00f3lo la salida alternativa aparece en pantalla Desde el sistema operativo, es f\u00e1cil para el usuario redirigir la salida alternativa a un fichero e incluso dirigir cada salida a un fichero espec\u00edfico o ambas salidas al mismo fichero y tambi\u00e9n es posible cambiar la salida desde dentro del programa La definici\u00f3n en la clase System es as\u00ed: Ver \u201c System.out .", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "System.err", 
        "examples": [
            "public class SystemErr { \u00a0\r\n  public static void main(String[] argumentos) { \u00a0\u00a0\u00a0\r\n  System.out.println(\"System.out: salida est\u00e1ndar\"); \u00a0\u00a0\u00a0\r\n  System.err.println(\"System.err: salida alternativa\"); \u00a0\r\n  } }\u00a0\u00a0\u00a0 "
        ], 
        "id": "377"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/204.html": {
        "definition": "Se dice de aquellos m\u00e9todos que sirven para crear un objeto", 
        "description": "Se dice de aquellos m\u00e9todos que sirven para crear un objeto. Se llaman igual que la clase del objeto que crean. Se recomienda que los constructores inicialicen todos los campos del objeto. En una misma clase puede haber varios constructores que deben diferir en el n\u00famero o tipo de argumentos (sobrecarga). Un constructor puede llamar a otro constructor:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html"
        ], 
        "title": "constructores", 
        "examples": [
            "class\r\n  Circulo { \u00a0 private double radio; \u00a0 \u00a0 Circulo (double radio) { this.radio\r\n  = radio; } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "class\r\n  Rectangulo { \u00a0 private double ancho, alto; \u00a0 \u00a0 Rectangulo(double alto, double ancho) { \u00a0\u00a0\u00a0 this.alto= alto; \u00a0\u00a0\u00a0 this.ancho= ancho; \u00a0 } \u00a0 \u00a0 // construye un cuadrado \u00a0 Rectangulo(double lado) { \u00a0\u00a0\u00a0 this(lado, lado); \u00a0 } \u00a0 \u00a0 // construye un cuadrado de lado 1 \u00a0 Rectangulo() { \u00a0\u00a0\u00a0 this(1); \u00a0 }\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "204"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/147.html": {
        "id": "147", 
        "definition": "El paquete java", 
        "description": "El paquete java.util proporciona varias clases gen\u00e9ricas. La siguiente relaci\u00f3n no pretende ser exhaustiva, sino aquellas que el autor, personalmente, considera de uso m\u00e1s frecuente:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/146.html"
        ], 
        "title": "clases gen\u00e9ricas en el package java.util"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/311.html": {
        "definition": "Adem\u00e1s de servir como clase envoltorio de caracteres, proporciona una serie de m\u00e9todos \u00fatiles para analizar texto:", 
        "concept": "clase", 
        "description": "Adem\u00e1s de servir como clase envoltorio de caracteres, proporciona una serie de m\u00e9todos \u00fatiles para analizar texto:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "Character", 
        "id": "311"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/242.html": {
        "definition": "Se dice de la conversi\u00f3n autom\u00e1tica de valores entre tipos primitivos", 
        "concept": "concepto", 
        "description": "Se dice de la conversi\u00f3n autom\u00e1tica de valores entre tipos primitivos. Convierte de un formato \u201cm\u00e1s pobre\u201d a un formato \u201cm\u00e1s rico\u201d. A veces se conoce como upcasting de tipos primitivos. Las promociones toleradas por java son La promoci\u00f3n se produce autom\u00e1ticamente (el compilador la realiza sin quejarse ni avisar al programador) cuando: \u00b7 en una expresi\u00f3n se combinan valores de diferente tipo \u00b7 se intenta asignar a una variable de un cierto tipo un valor de otro tipo Por ejemplo: \u00b7 2.0 / 3 se promociona el (int)3 a (double)3.0 y la expresi\u00f3n vale (double)1.666 \u00b7 double x = 3; se promociona el (int)3 a (double)3.0 y la variable recibe el valor (double)3.0 La operaci\u00f3n inversa de la promoci\u00f3n es la reducci\u00f3n.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Promoci\u00f3n", 
        "alternative": "widening", 
        "id": "242"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/323.html": {
        "definition": "Esta clase permite generar String a partir de datos usando una especificaci\u00f3n de formato", 
        "concept": "clase", 
        "description": "Esta clase permite generar String a partir de datos usando una especificaci\u00f3n de formato. La funcionalidad se presta a diferentes clases para un uso c\u00f3modp:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/404.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/325.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/326.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/327.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/328.html"
        ], 
        "title": "Formatter", 
        "id": "323"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/232.html": {
        "definition": "Ver \u201cArgumentos\u201d", 
        "concept": "concepto", 
        "description": "Ver \u201cArgumentos\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/14.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Par\u00e1metros", 
        "id": "232"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/111.html": {
        "id": "111", 
        "definition": "Nombres de clases, de m\u00e9todos y de variables (campos incluidos):", 
        "description": "Nombres de clases, de m\u00e9todos y de variables (campos incluidos):", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/110.html"
        ], 
        "title": "1."
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/307.html": {
        "definition": "Es una clase muy general para manejar fechas y horas", 
        "concept": "clase", 
        "description": "Es una clase muy general para manejar fechas y horas. En parte reemplaza las funciones de Date, y adem\u00e1s a\u00f1ade much\u00edsima flexibilidad. La clase carece de constructores p\u00fablicos, as\u00ed que la forma de crear objetos de esta clase es por medio de una factor\u00eda La primera factor\u00eda utiliza la configuraci\u00f3n por defecto de idioma del ordenador donde se ejecuta y el huso horario en el que est\u00e9 configurado. Por ejemplo Una vez construido el Calendar, podemos usar m\u00e9todos getter y setter: El siguiente m\u00e9todo a\u00f1ade una cierta cantidad a un determinado campo: Puede ser \u00fatil para averiguar si un a\u00f1o es bisiesto: Para imprimir fechas puede recurrir a la clase Formatter o a clases ad-hoc como son", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/308.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/309.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/310.html"
        ], 
        "title": "Calendar", 
        "examples": [
            "Locale aqui = Locale.getDefault(); Locale spanish = new Locale(\u201ces\u201d); Locale spanish = new Locale(\u201ces\u201d,\r\n  \u201cES\u201d);  Locale\r\n  mexico = new Locale(\u201ces\u201d, \u201cMX\u201d);", 
            "TimeZone aqui = TimeZone.getDefault(); TimeZone madrid = new TimeZone(\u201cEurope/Madrid\u201d);"
        ], 
        "id": "307"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/81.html": {
        "definition": "Cuando un m\u00e9todo de una clase B recurre a m\u00e9todos de otra clase A para lograr sus objetivos, se dice que B delega en A", 
        "concept": "concepto", 
        "description": "Cuando un m\u00e9todo de una clase B recurre a m\u00e9todos de otra clase A para lograr sus objetivos, se dice que B delega en A. \u201cdistancia\u201d delega en el m\u00e9todo \u201csqrt\u201d de la clase \u201cMath\u201d para calcular la ra\u00edz cuadrada y en los m\u00e9todos getX() y getY() de la clase Punto para acceder a las coordenadas. La delegaci\u00f3n es interesante en cuanto permite construir programas cada vez m\u00e1s complejos aprovechando m\u00e9todos ya disponibles. Lo contrario de la delegaci\u00f3n es la \u201creinvenci\u00f3n de la rueda\u201d. Ver \"Composici\u00f3n\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/63.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Delegaci\u00f3n", 
        "examples": [
            "double distancia(Punto p,\r\n  Punto q) { \u00a0 double dx = p.getX() - q.getX(); \u00a0 double dy = p.getY() - q.getY(); \u00a0 return Math.sqrt(dx*dx + dy*dy); }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "alternative": "delegation", 
        "id": "81"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/320.html": {
        "definition": "Interfaz normalizada para recorrer ordenadamente los elementos de una colecci\u00f3n", 
        "concept": "interface", 
        "description": "Interfaz normalizada para recorrer ordenadamente los elementos de una colecci\u00f3n. Define 2 m\u00e9todos a implementar: Con los iteradores se suelen construir los siguientes tipos de bucles La interface \u201cEnumeration\u201d ha sido revisada y ampliada por \u201c Iterator \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "Enumeration<E>", 
        "examples": [
            "public interface Enumeration<E> { \u00a0\u00a0\u00a0 /** \u00a0\u00a0\u00a0\u00a0 * @return TRUE si la\r\n  siguiente llamada a next()  \u00a0\u00a0\u00a0\u00a0 * devolver\u00e1 un\r\n  elemento \u00a0\u00a0\u00a0\u00a0 */ \u00a0\u00a0\u00a0 public\r\n  boolean hasMoreElements(); \u00a0 \u00a0\u00a0\u00a0 /** \u00a0\u00a0\u00a0\u00a0 * @return el\r\n  siguiente elemento de la colecci\u00f3n \u00a0\u00a0\u00a0\u00a0 * @throws NoSuchElementException\r\n  - si no hay elemento que devolver \u00a0\u00a0\u00a0\u00a0 */ \u00a0\u00a0\u00a0\r\n  public E nextElement();", 
            "\u00a0\u00a0\u00a0\r\n  for (Enumeration<E> ite = ...; ite.hasMoreElements(); ) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 E elemento\r\n  = ite.nextElement(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ... \u00a0\u00a0\u00a0\r\n  }", 
            "\u00a0\u00a0\u00a0\r\n  Enumeration<E> ite = ...; \u00a0\u00a0\u00a0\r\n  while (ite.hasMoreElements ()) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 E elemento\r\n  = ite.nextElement (); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ... \u00a0\u00a0\u00a0 }"
        ], 
        "id": "320"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/142.html": {
        "definition": "Se pueden escribir bucles con varias variables que se van actualizando simult\u00e1neamente:", 
        "description": "Se pueden escribir bucles con varias variables que se van actualizando simult\u00e1neamente:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/138.html"
        ], 
        "title": "bucles \"for\" con varios contadores", 
        "examples": [
            "\u00a0 for (int i = 0, j = 10; i < 9 && j > 0; i++, j--)  \u00a0\u00a0\u00a0 acci\u00f3n; "
        ], 
        "id": "142"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/101.html": {
        "id": "101", 
        "definition": "La forma m\u00e1s directa de iterar sobre los miembros de un tipo enumerado es usar el array de constantes Ver \u201cEnumSet\u201d", 
        "description": "La forma m\u00e1s directa de iterar sobre los miembros de un tipo enumerado es usar el array de constantes Ver \u201cEnumSet\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/321.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/98.html"
        ], 
        "title": "iteraci\u00f3n"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/190.html": {
        "definition": "Secuencias de datos en las que importa el orden relativo de los mismos", 
        "concept": "estructura de datos", 
        "description": "Secuencias de datos en las que importa el orden relativo de los mismos. Ver \u201c List \u201d. Ver \u201c Listas encadenadas \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/341.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/192.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/191.html"
        ], 
        "title": "Listas", 
        "id": "190"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/38.html": {
        "definition": "En algunas ocasiones no es c\u00f3modo escribir la condici\u00f3n de terminaci\u00f3n ni al principio (\u201cwhile\u201d) ni al final (\u201cdo ", 
        "description": "En algunas ocasiones no es c\u00f3modo escribir la condici\u00f3n de terminaci\u00f3n ni al principio (\u201cwhile\u201d) ni al final (\u201cdo ... while\u201d) sino que aparece de forma natural por en medio:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/34.html"
        ], 
        "title": "bucles \"n + \u00bd\"", 
        "examples": [
            "for\r\n  ( ; ; ) { \u00a0\u00a0\u00a0 String linea = consola.readLine(); \u00a0\u00a0\u00a0 if (linea == null) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break; \u00a0\u00a0\u00a0 procesa(linea); }", 
            "while\r\n  (true) { \u00a0\u00a0\u00a0 String linea = consola.readLine(); \u00a0\u00a0\u00a0 if (linea == null) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break; \u00a0\u00a0\u00a0 procesa(linea); }", 
            "String\r\n  linea = consola.readLine(); while\r\n  (linea != null) { \u00a0\u00a0\u00a0 procesa(linea); \u00a0\u00a0\u00a0 linea = consola.readLine(); }", 
            "for\r\n  (String linea = consola.readLine(); \u00a0\u00a0\u00a0\u00a0 linea != null;  \u00a0\u00a0\u00a0\u00a0 linea = consola.readLine()) { \u00a0 procesa(linea); }"
        ], 
        "id": "38"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/90.html": {
        "definition": "Si empleamos paquetes, es muy conveniente alinear el nombre del paquete y los directorios", 
        "concept": "o directorios", 
        "description": "Si empleamos paquetes, es muy conveniente alinear el nombre del paquete y los directorios. Sea Una vez colocado el fichero \u201cHola2.class\u201d en su directorio nos situaremos en el directorio X y llamaremos al int\u00e9rprete Alternativamente, si estuvi\u00e9ramos en otro directorio, le indicar\u00edamos al int\u00e9rprete d\u00f3nde est\u00e1 nuestro c\u00f3digo interpretable (el directorio X):", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/88.html"
        ], 
        "title": "con paquetes", 
        "examples": [
            "package\r\n  ejemplo.ejecucion; \u00a0 public\r\n  class Hola2 { \u00a0 public static void main(String[]\r\n  argumentos) { \u00a0\u00a0\u00a0 System.out.println(\"Hola.\"); \u00a0 } }"
        ], 
        "id": "90"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/138.html": {
        "definition": "Los bucles \u201cfor\u201d se ejecutan un n\u00famero determinado de veces", 
        "concept": "palabra reservada", 
        "description": "Los bucles \u201cfor\u201d se ejecutan un n\u00famero determinado de veces.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/139.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/140.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/141.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/142.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/143.html"
        ], 
        "title": "for", 
        "examples": [
            "for (inicializaci\u00f3n; \u00a0\u00a0\u00a0\u00a0 condici\u00f3n; \u00a0\u00a0\u00a0\u00a0 actualizaci\u00f3n) \u00a0 acci\u00f3n; \u00a0 for (inicializaci\u00f3n; \u00a0\u00a0\u00a0\u00a0 condici\u00f3n; \u00a0\u00a0\u00a0\u00a0 actualizaci\u00f3n) { \u00a0 acci\u00f3n 1; \u00a0 acci\u00f3n 2; \u00a0 ... \u00a0 acci\u00f3n ...; } \u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "138"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/233.html": {
        "definition": "Son listas de objetos que se caracterizan porque los nuevos objetos se a\u00f1aden al final, y tambi\u00e9n salen por el final De esta forma, resulta que el \u00faltimo que entra es el primero que sale (en Ingl\u00e9s, LIFO: Last In, First Out)", 
        "concept": "estructura de datos", 
        "description": "Son listas de objetos que se caracterizan porque los nuevos objetos se a\u00f1aden al final, y tambi\u00e9n salen por el final De esta forma, resulta que el \u00faltimo que entra es el primero que sale (en Ingl\u00e9s, LIFO: Last In, First Out). Es f\u00e1cil implementar las pilas como listas:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Pilas", 
        "examples": [
            "public\r\n  interface Pila<T> { \u00a0\u00a0\u00a0 // mete un\r\n  objeto T al final de la pila \u00a0\u00a0\u00a0 void push(T t) throws ExcepcionPilaLlena; \u00a0 \u00a0\u00a0\u00a0 // retira el\r\n  \u00faltimo objeto de la pila \u00a0\u00a0\u00a0 T pop() throws ExcepcionPilaVacia; \u00a0 \u00a0\u00a0\u00a0 // mira, sin retirar, el \u00faltimo objeto \u00a0\u00a0\u00a0 T top() throws ExcepcionPilaVacia; \u00a0 \u00a0\u00a0\u00a0 // objetos en\r\n  la pila \u00a0\u00a0\u00a0 int longitud(); }\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "import\r\n  java.util.*; \u00a0 public\r\n  class PilaLista<T> implements Pila<T> { \u00a0 private List<T> lista = new\r\n  ArrayList<T>(); \u00a0 \u00a0 public void push(T t) { \u00a0\u00a0\u00a0 lista.add(t); \u00a0 } \u00a0 \u00a0 public T top() throws ExcepcionPilaVacia { \u00a0\u00a0\u00a0 if (lista.size() == 0) throw new\r\n  ExcepcionPilaVacia(); \u00a0\u00a0\u00a0 return lista.get(lista.size()-1); \u00a0 } \u00a0 \u00a0 public T pop() throws ExcepcionPilaVacia { \u00a0\u00a0\u00a0 if (lista.size() == 0) throw new\r\n  ExcepcionPilaVacia(); \u00a0\u00a0\u00a0 return lista.remove(lista.size()-1); \u00a0 } \u00a0 \u00a0 public int longitud() { \u00a0\u00a0\u00a0 return lista.size(); \u00a0 } }"
        ], 
        "alternative": "stacks", 
        "id": "233"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/70.html": {
        "definition": "Se dice del caso en el que para evaluar una expresi\u00f3n booleana s\u00f3lo se eval\u00faa uno de los operandos, el primero", 
        "concept": "concepto", 
        "description": "Se dice del caso en el que para evaluar una expresi\u00f3n booleana s\u00f3lo se eval\u00faa uno de los operandos, el primero. eval\u00faa \u201cx\u201d; si es falso, devuelve FALSE; si no, eval\u00faa \u201cy\u201d Se basa en las reglas del \u00e1lgebra de Boole que dicen que eval\u00faa \u201cx\u201d; si es cierto, devuelve TRUE; si no, eval\u00faa \u201cy\u201d Se basa en las reglas del \u00e1lgebra de Boole que dicen que Estos cortocircuitos sirven para acelerar la ejecuci\u00f3n, evitando c\u00e1lculos innecesarios o para evitar errores de ejecuci\u00f3n proporcionando una escapatoria para casos particulares. Algunos ejemplos habituales: NOTA. Si se quiere evaluar siempre el segundo operando, use los operadores respectivamente.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Cortocircuito", 
        "alternative": "short-circuit", 
        "id": "70"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/178.html": {
        "definition": "Ver palabras reservadas \u201c interface \u201d e \u201c implements \u201d", 
        "concept": "concepto", 
        "description": "Ver palabras reservadas \u201c interface \u201d e \u201c implements \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/176.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/169.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Interfases", 
        "id": "178"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/97.html": {
        "definition": "Sirve para declarar tipos Enumerados, bien en l\u00ednea: bien como clase en su fichero propio En ambos casos disponemos de una nueva clase que se caracteriza por disponer de una serie finita y expl\u00edcita de constantes", 
        "concept": "palabra reservada", 
        "description": "Sirve para declarar tipos Enumerados, bien en l\u00ednea: bien como clase en su fichero propio En ambos casos disponemos de una nueva clase que se caracteriza por disponer de una serie finita y expl\u00edcita de constantes. Una vez definidos los elementos de un tipo enumerado es imposible crear nuevos objetos. Otros ejemplos: Ver \u201c Enumerados \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/98.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "enum", 
        "examples": [
            "public enum Vocal { \u00a0\u00a0\u00a0 A, E, I, O, U; }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "97"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/268.html": {
        "definition": "Se dice que B es subclase de A cuando B es extensi\u00f3n directa o indirecta de A", 
        "concept": "concepto", 
        "description": "Se dice que B es subclase de A cuando B es extensi\u00f3n directa o indirecta de A. Ver \u201cExtensi\u00f3n\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/128.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Subclases", 
        "id": "268"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/292.html": {
        "id": "292", 
        "definition": "Las variables se crean en un cierto momento y desaparecen en otro momento dado", 
        "description": "Las variables se crean en un cierto momento y desaparecen en otro momento dado. A partir de la creaci\u00f3n se pueden utilizar para almacenar valores. Cuando se destruyen, desaparece la posibilidad de acceder a los valores que conten\u00edan. Los detalles dependen de cada tipo de variable. variables de clase (static) Se crean al arrancar el programa y se destruyen cuando termina el programa. Es decir, siempre est\u00e1n disponibles. variables de objeto Se crean al crear el objeto (new) y desaparecen cuando el objeto deja de utilizarse. argumentos formales (de los m\u00e9todos) Se crean cada vez que se llama al m\u00e9todo. Si hay 20 llamadas, se crean 20 veces. Si un m\u00e9todo se llama a s\u00ed mismo (recursi\u00f3n), se generan nuevas variables en el nuevo m\u00e9todo. Desaparecen cuando el m\u00e9todo devuelve su resultado. variables locales (en un bloque) Se crean cada vez que se ejecuta al bloque, pero s\u00f3lo a partir del punto en el que se declaran. Desaparecen cuando el bloque termina. Un caso particular, especialmente frecuente es el de las variables en el cuerpo de un m\u00e9todo, que siguen las mismas reglas. Se crean cada vez que se ejecuta al m\u00e9todo, pero s\u00f3lo a partir del punto en el que se declaran. Si hay 20 llamadas, se crean 20 veces. Si un m\u00e9todo se llama a s\u00ed mismo (recursi\u00f3n), se generan nuevas variables en el nuevo m\u00e9todo. Desaparecen cuando el m\u00e9todo devuelve su resultado.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/289.html"
        ], 
        "title": "ciclo de vida: creaci\u00f3n y destrucci\u00f3n"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/144.html": {
        "definition": "M\u00e9todo de las clases PrintStream y PrintWriter", 
        "concept": "m\u00e9todo", 
        "description": "M\u00e9todo de las clases PrintStream y PrintWriter. Sin\u00f3nimo de printf(). Imprime una serie de valores siguiendo el formato proporcionado como primer argumento. Ver \u201c Formatter \u201d donde se explica la notaci\u00f3n usando en la descripci\u00f3n de formato.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/323.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "format", 
        "id": "144"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/350.html": {
        "id": "350", 
        "definition": "Son aquellas implementaciones que Map<K, V> que mantienen las claves ordenadas; es decir, que cuando se itera sobre el Map, las claves van saliendo en orden", 
        "description": "Son aquellas implementaciones que Map<K, V> que mantienen las claves ordenadas; es decir, que cuando se itera sobre el Map, las claves van saliendo en orden. Para poder ordenar las claves, es necesario que sean de objetos comparables. Variante de Map<K, V> con la propiedad de que mantiene las claves ordenadas; es decir, cuando se itera sobre el Map, las claves est\u00e1n en orden. Las claves deben ser Comparable. Es una implementaci\u00f3n que garantiza el orden de las claves cuanto se itera sobre ellas. Es m\u00e1s voluminosa y lenta.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/347.html"
        ], 
        "title": "variantes ordenadas"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/279.html": {
        "definition": "Para lanzar una excepci\u00f3n que pueda ser capturada por un bloque catch anexo a un bloque try", 
        "concept": "palabra reservada", 
        "description": "Para lanzar una excepci\u00f3n que pueda ser capturada por un bloque catch anexo a un bloque try. Ver \u201cExcepciones\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/114.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "throw", 
        "id": "279"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/327.html": {
        "definition": "Ver \" Formatter \"", 
        "description": "Ver \" Formatter \". Cuando interesa escribir cantidades num\u00e9ricas usando el convenio local de n\u00fameros (caracteres para separar grupos de 3 d\u00edgitos) se recurre a la siguiente notaci\u00f3n: String format(Locale locale, String format, Object \u2026 args)", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/323.html"
        ], 
        "title": "N\u00fameros en notaci\u00f3n local", 
        "examples": [
            "import java.util.*; \u00a0 public class Decimales { \u00a0 \u00a0\r\n  public static void main(String[] args) { \u00a0\u00a0\u00a0\r\n  test(\"de\", \"DE\", 1234.56); \u00a0\u00a0\u00a0\r\n  test(\"en\", \"US\", 1234.56); \u00a0\u00a0\u00a0\r\n  test(\"es\", \"ES\", 1234.56); \u00a0\u00a0\u00a0\r\n  test(\"fr\", \"FR\", 1234.56); \u00a0\u00a0\u00a0\r\n  test(\"it\", \"IT\", 1234.56); \u00a0\u00a0\u00a0\r\n  test(\"pt\", \"PT\", 1234.56); \u00a0\r\n  } \u00a0 \u00a0\r\n  private static void test(String idioma, String pais,  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double n) { \u00a0\u00a0\u00a0\r\n  Locale locale= new Locale(idioma, pais); \u00a0\u00a0\u00a0\r\n  System.out.println(String.format(locale,  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"%s:\r\n  %,.2f\",\u00a0 locale, n)); \u00a0 } }", 
            "\u00a0 de_DE: 1.234,56 en_US: 1,234.56 es_ES: 1.234,56 fr_FR: 1\u00e1234,56 it_IT: 1.234,56 pt_PT: 1.234,56"
        ], 
        "id": "327"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/86.html": {
        "definition": "Se dice cuando el contenido de una variable de tipo A se asigna a una variable de tipo B, siendo B subclase de A", 
        "concept": "concepto", 
        "description": "Se dice cuando el contenido de una variable de tipo A se asigna a una variable de tipo B, siendo B subclase de A. No siempre es posible. S\u00f3lo funciona si \u201ca\u201d contiene un objeto de clase B. De lo contrario se lanza una ClassCastException. Ver \u201cCasting\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/47.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Downcasting", 
        "id": "86"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/66.html": {
        "definition": "En Windows se denomina \u201cS\u00edmbolo del sistema\u201d; en los sistemas de tipos UNIX, se denominan \u201cshell\u201d", 
        "description": "En Windows se denomina \u201cS\u00edmbolo del sistema\u201d; en los sistemas de tipos UNIX, se denominan \u201cshell\u201d. El caso es que el usuario depende de una pantalla donde va dando \u00f3rdenes textuales. Veamos un ejemplo: Paso a paso. \u00b7 vamos al directorio C:pepe \u00b7 vemos que en el directorio s\u00f3lo hay un fichero Eco.java ( c\u00f3digo fuente ) \u00b7 compilamos el fichero usando \u201c javac \u201d \u00b7 vemos que en el directorio aparece un fichero Eco.class ( c\u00f3digo interpretable ) \u00b7 ejecutamos \u201cEco.class\u201d usando \u201c java \u201d \u00b7 vemos que aparecen los argumentos de la l\u00ednea de \u201ccomandos\u201d, entendiendo que los argumentos son texto separado por espacio en blanco, salvo que usemos comillas para agrupar varias palabras en un solo argumento.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/56.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/61.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/182.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/42.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/88.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/181.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Consola", 
        "examples": [
            "public\r\n  class Eco { \u00a0 public static void main(String[]\r\n  argumentos) { \u00a0\u00a0\u00a0 for (int i = 0; i < argumentos.length;\r\n  i++) \u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\"argumentos[\"\r\n  + i + \"] = \" + argumentos[i]); \u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "66"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/371.html": {
        "definition": "Asociaciones tipo Map<K, V> donde los elementos se recorren en orden", 
        "concept": "clase", 
        "description": "Asociaciones tipo Map<K, V> donde los elementos se recorren en orden. Ver \u201c Map \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "SortedMap<K, V>", 
        "id": "371"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/322.html": {
        "definition": "Clase java para referirse a ficheros y directorios en el sistema de ficheros del ordenador", 
        "concept": "clase", 
        "description": "Clase java para referirse a ficheros y directorios en el sistema de ficheros del ordenador. Un objeto File se puede construir a partir del nombre o ruta completa, o a partir del directorio en el que se encuentra: La clase File proporciona muchos m\u00e9todos, entre los que cabe destacar: java.io.File boolean canRead() TRUE si el fichero se puede leer boolean canWrite() TRUE si el fichero se puede escribir boolean delete() elimina el fichero; devuelve FALSE si no puede eliminarlo boolean exists() TRUE si el fichero existe String getAbsolutePath() devuelve la ruta completa String getCanonicalPath() devuelve la ruta completa String getName() el nombre del fichero, sin ruta Sring getParent() la ruta del 'padre' o directorio en el que se encuentra File getParentFile() el 'padre' o directorio en el que se encuentra boolean isDirectorio() TRUE si es un directorio boolean isFile() TRUE si no es un directorio long length() tama\u00f1o del fichero en bytes String[] list() si se trata de un directorio, un array con los nombres de los ficheros que contiene File[] listFiles() si se trata de un directorio, un array con los ficheros que contiene boolean mkdir() crea el directorio si no existe boolean mkdirs() crea todos los directorios que haga falta, si no existen boolean renameTo(File nuevo) cambio de nombre Es muy frecuente usar los ficheros para leer o escribir. Java proporciona varias clases para facilitar estas operaciones: bytes caracteres lectura InputStream Reader escritura OutputStream Writer En el caso de trabajar con caracteres es importante tener en cuenta la \"codificaci\u00f3n en bytes\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "File", 
        "id": "322"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/361.html": {
        "definition": "Madre de un conjunto de clases para leer ficheros car\u00e1cter a car\u00e1cter", 
        "concept": "clase abstracta", 
        "description": "Madre de un conjunto de clases para leer ficheros car\u00e1cter a car\u00e1cter. Java convierte los bytes que contiene el fichero en caracteres Unicode . Vea \"codificaci\u00f3n de los caracteres\". La clase derivada m\u00e1s habitual es java.io.FileReader FileReader(File file) constructor FileReader(String nombre) constructor Todas las clases derivadas de Reader proporcionan estos m\u00e9todos: java.io.Reader cierra el fichero lee un car\u00e1cter devuelve el car\u00e1cter le\u00eddo pasado a entero devuelve \u20131 si el fichero se ha acabado lee un n\u00famero 'n' de caracteres igual o menor que la longitud del array 'chars' devuelve el n\u00famero de caracteres le\u00eddos; los caracteres le\u00eddos est\u00e1n en las posiciones [0 .. n-1] del array 'chars' devuelve \u20131 si el fichero se ha acabado lee un n\u00famero 'n' de caracteres devuelve el n\u00famero de caracteres le\u00eddos; los caracteres le\u00eddos est\u00e1n en las posiciones [start .. start+n-1] del array 'chars' devuelve \u20131 si el fichero se ha acabado Es habitual preparar un array de cierto tama\u00f1o, pecando por exceso, para ir leyendo montones de caracteres. En cada caso particular habr\u00e1 que decidir c\u00f3mo se van leyendo caracteres para hacer lo que haya que hacerles. El ejemplo siguiente lee el fichero entero, devolviendo todos los caracteres en una cadena: Vea \" BufferedReader \" para leer caracteres m\u00e1s deprisa y para leer l\u00ednea a l\u00ednea. Reader lee caracteres (16 bits). Si necesita leer bytes (8 bits), debe utilizar la clase InputStream . Ver \u201c File \u201d, \u201c InputStream \u201d, \u201c Writer .", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/362.html"
        ], 
        "title": "Reader", 
        "examples": [
            "\u00a0\u00a0\u00a0 /** \u00a0\u00a0\u00a0\u00a0 * Lectura de todos\r\n  los caracteres de un fichero. \u00a0\u00a0\u00a0\u00a0 * \u00a0\u00a0\u00a0\u00a0 * @param fichero\r\n  nombre del fichero del que queremos leer. \u00a0\u00a0\u00a0\u00a0 * @return todos los\r\n  caracteres en el fichero. \u00a0\u00a0\u00a0\u00a0 * @throws IOException\r\n  si hay problemas al abrir o al escribir. \u00a0\u00a0\u00a0\u00a0 */ \u00a0\u00a0\u00a0\r\n  public String leeTodosLosCaracteres(String fichero) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throws IOException { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 StringBuilder buffer = new StringBuilder(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Reader\r\n  reader = new FileReader(fichero); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 char[] chars = new char[1024]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 while (true) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int n = reader.read(chars); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (n < 0) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 buffer.append(chars, 0, n); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 reader.close(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return buffer.toString(); \u00a0\u00a0\u00a0\r\n  }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "361"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/358.html": {
        "id": "358", 
        "definition": "Properties properties = new Properties(); properties", 
        "description": "Properties properties = new Properties(); properties.setProperty(\u201ctitulo\u201d, \u201cAplicaci\u00f3n Gr\u00e1fica\u201d); properties.setProperty(\u201cancho\u201d, \u201c600\u201d); properties.setProperty(\u201calto\u201d, \u201c400\u201d); String titulo = properties.getProperty(\u201ctitulo\u201d, \u201csin nombre\u201d); int ancho = Integer.parseInt(properties.getProperty(\u201cancho\u201d, \u201c400\u201d);", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/357.html"
        ], 
        "title": "Uso t\u00edpico"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/129.html": {
        "definition": "Son m\u00e9todos de clase (static) que crean objetos", 
        "concept": "concepto", 
        "description": "Son m\u00e9todos de clase (static) que crean objetos. A diferencia de los m\u00e9todos constructores \u00b7 pueden tener cualquier nombre \u00b7 pueden haber varios con el mismo n\u00famero y tipo de argumentos, siempre y cuando difieran en el nombre \u00b7 pueden no llegar a crear ning\u00fan objeto (t\u00edpicamente, devolviendo \u201cnull\u201d) Ver \u201cConstructores\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/68.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "F\u00e1bricas", 
        "examples": [
            "public class Punto2D\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 { \u00a0\u00a0\u00a0 //\r\n  representaci\u00f3n interna: coordenadas cartesianas \u00a0\u00a0\u00a0 private double x, y; \u00a0 \u00a0\u00a0\u00a0 // constructor\r\n  interno: coordenadas cartesianas \u00a0\u00a0\u00a0 private Punto2D(double x, double y) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.x = x; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.y = y; \u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0  \u00a0\u00a0\u00a0 // f\u00e1brica: coordenadas cartesianas \u00a0\u00a0\u00a0 public static Punto2D cartesianas(double\r\n  x, double y) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return new Punto2D(x, y); \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 // f\u00e1brica: coordenadas polares \u00a0\u00a0\u00a0 public static Punto2D polares(double\r\n  modulo, double angulo) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double x = modulo * Math.cos(angulo); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double y = modulo * Math.sin(angulo); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return new Punto2D(x, y); \u00a0\u00a0\u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "alternative": "factories", 
        "id": "129"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/45.html": {
        "definition": "Ver \"char\": caracteres individuales", 
        "concept": "concepto", 
        "description": "Ver \"char\": caracteres individuales. Ver \" String \": cadenas de caracteres.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/51.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/373.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Caracteres", 
        "id": "45"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/95.html": {
        "definition": "Componente sint\u00e1ctico de sentencias condicionales de tipo \u201c if \u201d", 
        "concept": "palabra reservada", 
        "description": "Componente sint\u00e1ctico de sentencias condicionales de tipo \u201c if \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/161.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "else", 
        "id": "95"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/318.html": {
        "definition": "Sirve para contener fechas", 
        "concept": "clase", 
        "description": "Sirve para contener fechas. Concretamente, fecha y hora con precisi\u00f3n de milisegundos. En versiones antiguas de java, los objetos Date se usaban para todo tipo de actividad relacionada con fechas; pero resultaba poco flexible a efectos de internacionalizaci\u00f3n y se ha sustituido por Calendar, que es m\u00e1s completa y flexible. Hay dos constructures donde \u2018milisegundos\u2019 es un intervalo de tiempo medido en ilisegundos y empezando a contar el 1 de enero de 1970 (UTC). As\u00ed es, por ejemplo, el valor que devuelve Otra forma de crear un objeto con la fecha y hora actual: Quedan asimismo algunos m\u00e9todos de utilidad Ver \u201c Calendar \u201d. Ver \u201c Formatter \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "Date", 
        "examples": [
            "boolean after(Date d) boolean before(Date d) int compareTo(Date d)", 
            "si una fecha y hora (this) es anterior, posterior o igual a otra (d)", 
            "long getTime()", 
            "devuelve el tiempo transcurrido desde el 1 de enero de 1970 hasta this;\r\n  en milisegundos", 
            "void setTime(long mili)", 
            "como el constructor, fija una fecha y hora", 
            "String toString()", 
            "Fri Mar\r\n  26 09:14:19 CET 2010 que es el viernes, 26 de marzo de 2010, a las nueve y cuarto, hora de\r\n  Centroeuropa"
        ], 
        "id": "318"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/230.html": {
        "id": "230", 
        "definition": "Siempre podemos referirnos a una clase empleando su nombre can\u00f3nico completo", 
        "description": "Siempre podemos referirnos a una clase empleando su nombre can\u00f3nico completo. Por comodidad del programador y por alcanzar un c\u00f3digo de m\u00e1s f\u00e1cil lectura, podemos importar el nombre del paquete y luego referirnos a las clases del mismo por su identificador sin prefijo. El paquete al que pertenece un fichero se importa directamente sin necesidad de indicarlo. Si se importan dos paquetes con clases hom\u00f3nimas, el compilador exigir\u00e1 que se indique el nombre can\u00f3nico para que no haya dudas. Ver \"import\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/170.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/228.html"
        ], 
        "title": "importaci\u00f3n de paquetes"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/290.html": {
        "definition": "El valor contenido en una variable se puede cambiar por medio de sentencias de asignaci\u00f3n que eliminan el valor anterior y colocan uno nuevo: En general, una sentencia de asignaci\u00f3n tiene este formato La ejecuci\u00f3n consiste en evaluar la expresi\u00f3n y almacenar el valor resultante en la variable", 
        "concept": "asignaci\u00f3n", 
        "description": "El valor contenido en una variable se puede cambiar por medio de sentencias de asignaci\u00f3n que eliminan el valor anterior y colocan uno nuevo: En general, una sentencia de asignaci\u00f3n tiene este formato La ejecuci\u00f3n consiste en evaluar la expresi\u00f3n y almacenar el valor resultante en la variable. Si la expresi\u00f3n se refiere a la misma variable, primero se extrae el valor de la variable, luego se calcula la expresi\u00f3n y, por \u00faltimo, se almacena el valor resultante en la variable. Si se quiere asignar el mismo valor a varias variables, se pueden acumular sint\u00e1cticamente: todas las variables citadas toman el mismo valor que es el de la expresi\u00f3n. Las variables \u201cfinal\u201d no pueden ser actualizadas. Esto quiere decir que s\u00f3lo se les puede asignar un valor una s\u00f3lo vez, bien al declararlas, bien en el constructor. Es m\u00e1s, java impone que se les asigne un valor en uno u otro momento; de lo contrario se quejar\u00e1 de que la variable no est\u00e1 inicializada.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/289.html"
        ], 
        "title": "actualizaci\u00f3n", 
        "examples": [
            "int x;", 
            "0", 
            "x = 5;", 
            "5", 
            "x = x + 1;", 
            "6"
        ], 
        "id": "290"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/267.html": {
        "id": "267", 
        "definition": "Son bloques entre llaves { ", 
        "description": "Son bloques entre llaves { ... } que sirven para inicializar campos de clase", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/264.html"
        ], 
        "title": "bloques static"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/261.html": {
        "definition": "Se denomina signatura de un m\u00e9todo a lo que lo caracteriza de forma inconfundible: su nombre y la serie de argumentos (n\u00famero, tipo y orden)", 
        "concept": "concepto", 
        "description": "Se denomina signatura de un m\u00e9todo a lo que lo caracteriza de forma inconfundible: su nombre y la serie de argumentos (n\u00famero, tipo y orden). Ver \u201cM\u00e9todo\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Signatura (de un m\u00e9todo)", 
        "id": "261"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/160.html": {
        "definition": "Son los nombres de las cosas de los programas: clases, objetos, m\u00e9todos, variables, etc", 
        "concept": "concepto", 
        "description": "Son los nombres de las cosas de los programas: clases, objetos, m\u00e9todos, variables, etc. Los identificadores deben empezar con una letra o un s\u00edmbolo \"_\". A continuaci\u00f3n pueden venir cuantas letras, d\u00edgitos o s\u00edmbolos \"_\" se desee, sin dejas espacio entre ellos. Si un identificador est\u00e1 formado por varias palabras, estas se concatenan poniendo en may\u00fasculas la primera letra de cada palabra. No se pueden usar como identificadores las palabras reservadas de java. Ejemplos \u00b7 i, j, m, alfa, beta, Manuel, coche, Europa \u00b7 Jos\u00e9Antonio \u00b7 a\u00f1oBisiesto \u00b7 mil24 \u00b7 a\u00f1o0, a\u00f1o1, a\u00f1o2, ... a\u00f1o10 \u00b7 manual_de_protecci\u00f3n_de_datos Por convenio, se recomienda que \u00b7 los nombres sean significativos \u00b7 la longitud: la necesaria para que el nombre no resulte cr\u00edptico \u00b7 los nombres de las clases e interfases empiecen con una letra may\u00fascula \u00b7 los nombres de los m\u00e9todos empiecen con una letra min\u00fascula \u00b7 los nombres de campos y variables empiecen con una letra min\u00fascula \u00b7 los nombres de las constantes sean todo letras may\u00fasculas, usando el car\u00e1cter '_' si constaran de varias palabras", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Identificadores", 
        "alternative": "identifiers", 
        "id": "160"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/324.html": {
        "id": "324", 
        "definition": "Este peque\u00f1o programa le permitir\u00e1 analizar c\u00f3mo se transforma una String en bytes seg\u00fan una cierta codificaci\u00f3n: Resultado de ejecuci\u00f3n: car\u00e1cter: a e i o u \u00e1 \u00e9 \u00ed \u00f3 \u00fa ISO-8859-1:11: 61 65 69 6f 75 20 e1 e9 ed f3 fa Cp1252 :11: 61 65 69 6f 75 20 e1 e9 ed f3 fa MacRoman :11: 61 65 69 6f 75 20 87 8e 92 97 9c UTF-8 :16: 61 65 69 6f 75 20 c3 a1 c3 a9 c3 ad c3 b3 c3 ba UTF-16BE :22: 00 61 00 65 00 69 00 6f 00 75 00 20 00 e1 00 e9 00 ed 00 f3 00 fa UTF-16LE :22: 61 00 65 00 69 00 6f 00 75 00 20 00 e1 00 e9 00 ed 00 f3 00 fa 00", 
        "description": "Este peque\u00f1o programa le permitir\u00e1 analizar c\u00f3mo se transforma una String en bytes seg\u00fan una cierta codificaci\u00f3n: Resultado de ejecuci\u00f3n: car\u00e1cter: a e i o u \u00e1 \u00e9 \u00ed \u00f3 \u00fa ISO-8859-1:11: 61 65 69 6f 75 20 e1 e9 ed f3 fa Cp1252 :11: 61 65 69 6f 75 20 e1 e9 ed f3 fa MacRoman :11: 61 65 69 6f 75 20 87 8e 92 97 9c UTF-8 :16: 61 65 69 6f 75 20 c3 a1 c3 a9 c3 ad c3 b3 c3 ba UTF-16BE :22: 00 61 00 65 00 69 00 6f 00 75 00 20 00 e1 00 e9 00 ed 00 f3 00 fa UTF-16LE :22: 61 00 65 00 69 00 6f 00 75 00 20 00 e1 00 e9 00 ed 00 f3 00 fa 00", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/58.html"
        ], 
        "title": "Ejemplos"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/392.html": {
        "definition": "El m\u00e9todo equals() va ligado al m\u00e9todo \u201chashCode() que devuelve un entero que caracteriza al objeto, cumpliento la propiedad de que dos objeto que sean equals() deben devolver el mismo hashCode()", 
        "description": "El m\u00e9todo equals() va ligado al m\u00e9todo \u201chashCode() que devuelve un entero que caracteriza al objeto, cumpliento la propiedad de que dos objeto que sean equals() deben devolver el mismo hashCode(). Es decir Esto permite que se pueda escribir c\u00f3digo para buscar objetos iguales que primero miran el hashCode() y luego, si el hashCode() es igual, se mira el equals(): Las clases que hacen esta discriminaci\u00f3n previa por hashCode(), simplemente funcionan mal si se redefine equals() pero no se redefine hashCode(). Esto ocurre, por ejemplo, en las clases HashMap y HashSet de la librer\u00eda est\u00e1ndar de java. Regla: si redefine equals(), debe redefinir hashCode().", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/154.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/329.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/330.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/103.html"
        ], 
        "id": "392"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/13.html": {
        "definition": "Application Programming Interface", 
        "concept": "acr\u00f3nimo", 
        "description": "Application Programming Interface. Interfaz de programaci\u00f3n.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "API", 
        "id": "13"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/205.html": {
        "definition": "Se dice de aquellos m\u00e9todos que devuelven el valor de un campo del objeto", 
        "concept": "getters", 
        "description": "Se dice de aquellos m\u00e9todos que devuelven el valor de un campo del objeto. Por convenio, se escriben comenzando con las letras \"get\" seguidas del nombre del campo. El tipo de retorno es el tipo del campo al que se accede. Si el campo es booleano, se escriben con las letras \u201cis\u201d seguidas del nombre del campo.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html"
        ], 
        "title": "m\u00e9todos de acceso", 
        "examples": [
            "public\r\n  class Circulo { \u00a0 private double radio; \u00a0 \u00a0 public double getRadio() {\r\n  return radio; } }", 
            "public\r\n  class Bombilla { \u00a0 private boolean encendida; \u00a0 \u00a0 public boolean isEncendida() {\r\n  return encendida; } }"
        ], 
        "id": "205"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/47.html": {
        "definition": "Se dice de la conversi\u00f3n entre tipos de datos", 
        "concept": "concepto", 
        "description": "Se dice de la conversi\u00f3n entre tipos de datos. Con Tipos primitivos, se denomina promoci\u00f3n (cuando se pasa de un tipo m\u00e1s pobre a un tipo m\u00e1s rico) y reducci\u00f3n (cuando se pasa de un tipo m\u00e1s rico a un tipo m\u00e1s pobre). Ver \u201c Promoci\u00f3n \u201d y \u201c Reducci\u00f3n \u201d. Con objetos, el objeto en s\u00ed no se modifica; pero s\u00ed se modifica el tipo de objeto que la variable cree que referencia. En los p\u00e1rrafos siguientes usaremos las definiciones", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/283.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/242.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/247.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/219.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/48.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/49.html"
        ], 
        "title": "Casting", 
        "id": "47"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/252.html": {
        "definition": "A veces se acumulan varias condiciones anidando unas tras otras", 
        "description": "A veces se acumulan varias condiciones anidando unas tras otras. Aunque correcto, el c\u00f3digo puede llegar a ser ininteligible.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/248.html"
        ], 
        "title": "sustituci\u00f3n de condiciones anidadas por guardas", 
        "examples": [
            "public\r\n  String texto(double nota) { \u00a0\u00a0\u00a0 String txt; \u00a0\u00a0\u00a0 if (nota > 9.99) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 txt = \"Matr\u00edcula de Honor\"; \u00a0\u00a0\u00a0 else if (nota > 8.99) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 txt =\r\n  \"Sobresaliente\"; \u00a0\u00a0\u00a0 else if (nota > 6.99) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 txt = \"Notable\"; \u00a0\u00a0\u00a0 else if (nota > 4.99) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 txt = \"Aprobado\"; \u00a0\u00a0\u00a0 else \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 txt = \"Suspenso\"; \u00a0\u00a0\u00a0 return txt; }", 
            "public\r\n  String texto(double nota) { \u00a0\u00a0\u00a0 if (nota >\r\n  9.99) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return \"Matr\u00edcula de Honor\"; \u00a0\u00a0\u00a0 if (nota > 8.99) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return \"Sobresaliente\"; \u00a0\u00a0\u00a0 if (nota > 6.99) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return \"Notable\"; \u00a0\u00a0\u00a0 if (nota > 4.99) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return\r\n  \"Aprobado\"; \u00a0\u00a0\u00a0 return \"Suspenso\"; }"
        ], 
        "id": "252"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/236.html": {
        "definition": "M\u00e9todo de las clases PrintStream y PrintWriter ", 
        "concept": "m\u00e9todo", 
        "description": "M\u00e9todo de las clases PrintStream y PrintWriter . Sin\u00f3nimo de format() . Imprime una serie de valores siguiendo el formato proporcionado como primer argumento. Ver \u201c Formatter \u201d donde se explica la notaci\u00f3n usada en la descripci\u00f3n de formato. Ver \u201c System.out y \u201c System.err .", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "printf", 
        "id": "236"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/206.html": {
        "definition": "Se dice de aquellos m\u00e9todos que cargan el valor de un campo del objeto", 
        "concept": "setters", 
        "description": "Se dice de aquellos m\u00e9todos que cargan el valor de un campo del objeto. Por convenio, se escriben comenzando con las letras \"set\" seguidas del nombre del campo. Si el campo es booleano, se puede optar por el mismo convenio: Este planteamiento lleva a programas que dicen cosas as\u00ed: Por ello, a veces es mejor usar nombres de m\u00e9todos que sean significativos sin recurrir a un argumento booleano: Y los programas quedan as\u00ed:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html"
        ], 
        "title": "m\u00e9todos de carga", 
        "examples": [
            "public\r\n  class Circulo { \u00a0 private double radio; \u00a0 \u00a0 public void setRadio(double\r\n  radio) { this.radio = radio; } }\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "public class Bombilla { \u00a0\r\n  private boolean encendida; \u00a0 \u00a0\r\n  public void setEncendida(boolean encendida) {  \u00a0\u00a0\u00a0\u00a0\u00a0\r\n  this.encendida = encendida; \u00a0 } }\u00a0\u00a0\u00a0\u00a0 ", 
            "public class Bombilla { \u00a0\r\n  private boolean encendida; \u00a0 \u00a0\r\n  public void\r\n  setEncendida() { this.encendida = true; } \u00a0\r\n  public void setApagada() { this.encendida =\r\n  false; } }"
        ], 
        "id": "206"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/36.html": {
        "id": "36", 
        "definition": "Los bucles \u201cdo ", 
        "description": "Los bucles \u201cdo ... while\u201d se ejecutan una o m\u00e1s veces. Ver \u201c do-while \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/83.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/34.html"
        ], 
        "title": "bucles \"do ... while\""
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/285.html": {
        "definition": "Ver \u201c Excepciones \u201d, \u201c Exception \u201d, \u201c catch \u201d y \u201c finally \u201d", 
        "concept": "palabras reservadas", 
        "description": "Ver \u201c Excepciones \u201d, \u201c Exception \u201d, \u201c catch \u201d y \u201c finally \u201d. Un bloque try puede terminarse con \u00b7 cero o m\u00e1s bloques catch, de los que se ejecuta el primero cuya excepci\u00f3n casa con la lanzada dentro del bloque try \u00b7 un bloque finally, opcional, que se ejecuta siempre al salir del bloque try, h\u00e1yase ejecutado o no alguno de los bloques catch", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/114.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/117.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/50.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/133.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "try catch finally", 
        "id": "285"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/82.html": {
        "definition": "En general, se dice de las situaciones en que se intentan meter m\u00e1s datos en un contenedor de los que caben", 
        "concept": "concepto", 
        "description": "En general, se dice de las situaciones en que se intentan meter m\u00e1s datos en un contenedor de los que caben. As\u00ed es muy frecuente oir hablar de \"buffer overflow\" para indicar que no caben tantos datos en un buffer. En aritm\u00e9tica se aplica cuando un valor excede el m\u00e1ximo previsto. En n\u00fameros enteros el desbordamiento se puede producir por n\u00fameros excesivamente grandes, sean positivos o negativos. Java no lo detecta: En n\u00fameros en coma flotante el desbordamiento se puede producir en el exponente cuando \u00e9ste es positivo. Java lo interpreta como que nos hemos ido al infinito. Double.MAX_VALUE * 10 = 1.79769e+308 * 10 = Infinity Ver \" Underflow \".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Desbordamiento", 
        "alternative": "overflow", 
        "id": "82"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/60.html": {
        "definition": "Texto que se escribe entremezclado con el c\u00f3digo fuente pero que, a diferencia de \u00e9ste, no est\u00e1 destinado a la m\u00e1quina, sino a las personas que lean el c\u00f3digo fuente", 
        "concept": "concepto", 
        "description": "Texto que se escribe entremezclado con el c\u00f3digo fuente pero que, a diferencia de \u00e9ste, no est\u00e1 destinado a la m\u00e1quina, sino a las personas que lean el c\u00f3digo fuente. El objetivo de los comentarios es facilitar a las personas la comprensi\u00f3n del c\u00f3digo, as\u00ed como aportar informaci\u00f3n adicional tal como el nombre del autor, fechas relevantes, propiedad intelectual, etc. En java hay \u00b7 comentarios de una l\u00ednea que comienzan con los caracteres \"//\" y terminan con la l\u00ednea \u00b7 comentarios de un bloque de l\u00edneas que comienzan con los caracteres \"/*\" y terminan con los caracteres \"*/\" \u00fb estos comentarios no se pueden anidar: comentarios dentro de comentarios \u00b7 comentarios para generaci\u00f3n autom\u00e1tica de documentaci\u00f3n que comienzan con los caracteres \"/**\" y terminan con los caracteres \"*/. En estos comentarios, algunas l\u00edneas tienen una interpretaci\u00f3n especial a fin de generar la documentaci\u00f3n pertinente.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Comentarios", 
        "alternative": "comments", 
        "id": "60"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/41.html": {
        "definition": "Ver \"N\u00fameros\"", 
        "concept": "palabra reservada", 
        "description": "Ver \"N\u00fameros\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/215.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "byte", 
        "id": "41"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/69.html": {
        "definition": "Se emplea para forzar la terminaci\u00f3n de una pasada en un bucle", 
        "concept": "palabra reservada", 
        "description": "Se emplea para forzar la terminaci\u00f3n de una pasada en un bucle. Es \u00fatil cuando queremos abortar limpiamente una ejecuci\u00f3n del bucle; pero que \u00e9ste siga ejecut\u00e1ndose: Aunque es muy pr\u00e1ctico, puede dar lugar a programas de dif\u00edcil lectura. Se recomienda NO usar sentencias \"continue\" salvo que sea evidente su necesidad o mejore la legibilidad del c\u00f3digo. Ver \" break \".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/33.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "continue", 
        "examples": [
            "for ( ; ; ) { \u00a0 String linea = entrada.readLine();\n\u00a0 if (linea.charAt(0) == '#')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // se ignoran las l\u00edneas que  \u00a0\u00a0\u00a0 continue;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // empiezan por '#' \u00a0 // se hace algo con la l\u00ednea le\u00edda }", 
            "for\r\n  (int i = 0; i < 1000; i++) {  \u00a0\u00a0\u00a0 A;  \u00a0\u00a0\u00a0 if (c1) {  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 B;  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (c2) {  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 C;  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }  \u00a0\u00a0\u00a0 }  }", 
            "for\r\n  (int i = 0; i < 1000; i++) {  \u00a0\u00a0\u00a0 A;  \u00a0\u00a0\u00a0 if (! c1) continue;  \u00a0\u00a0\u00a0 B;  \u00a0\u00a0\u00a0 if (! c2) continue;  \u00a0\u00a0\u00a0 C;  }"
        ], 
        "id": "69"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/191.html": {
        "id": "191", 
        "definition": "Ver \" \u00bfarrays o listas?\"", 
        "description": "Ver \" \u00bfarrays o listas?\"", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/24.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/190.html"
        ], 
        "title": "\u00bflistas o arrays?"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/251.html": {
        "definition": "En la extracci\u00f3n de variables se elige una expresi\u00f3n y se calcula asignando el resultado a una variable; a continuaci\u00f3n, se emplea la variable en donde aparec\u00eda la expresi\u00f3n", 
        "description": "En la extracci\u00f3n de variables se elige una expresi\u00f3n y se calcula asignando el resultado a una variable; a continuaci\u00f3n, se emplea la variable en donde aparec\u00eda la expresi\u00f3n. La variable puede ser local o ser un campo del objeto, seg\u00fan convenga. La extracci\u00f3n de variables permite \u00b7 dar un nombre significativo a una expresi\u00f3n \u00b7 simplificar las expresiones que usan la nueva variable \u00b7 acelerar la ejecuci\u00f3n cuando la expresi\u00f3n reemplazada se eval\u00faa una sola vez en vez de varias veces A modo de ejemplo, se muestra en diferentes pasos como la extracci\u00f3n de variables ayuda a mejorar la legibilidad del c\u00f3digo: La operaci\u00f3n inversa de la extracci\u00f3n de variables es la eliminaci\u00f3n de variables (en ingl\u00e9s denominada inlining). Consiste en reemplazar el uso de una variable por la expresi\u00f3n en ella cargada. En el ejemplo anterior, consiste en ejecutar los pasos en orden inverso.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/248.html"
        ], 
        "title": "extracci\u00f3n / eliminaci\u00f3n de variables", 
        "examples": [
            "\u00a0\u00a0\u00a0 public int[][] mezcla(int[][]m1, int[][] m2) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int[][] resultado = \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new int[Math.max(m1.length,\r\n  m2.length)] \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  [Math.max(m1[0].length, m2[0].length)]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int i = 0; i <\r\n  Math.max(m1.length, m2.length); i++) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int j = 0; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 j < Math.max(m1[0].length,\r\n  m2[0].length); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 j++) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (i < m1.length\r\n  && j < m1[0].length) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (i < m2.length\r\n  && j < m2[0].length) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i][j] =\r\n  (m1[i][j] + m2[i][j]) / 2; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i][j] =\r\n  m1[i][j]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (i < m2.length\r\n  && j < m2[0].length) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i][j] =\r\n  m2[i][j]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0} else { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i][j] = 0; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return resultado; \u00a0\u00a0\u00a0 }", 
            "\u00a0\u00a0\u00a0 public int[][] mezcla(int[][]m1, int[][] m2) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int filasM1 = m1.length; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int columnasM1 = m1[0].length; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int filasM2 = m2.length; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int columnasM2 = m2[0].length; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int[][] resultado = \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new int[Math.max(filasM1,\r\n  filasM2)] \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [Math.max(columnasM1,\r\n  columnasM2)]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int i = 0; i <\r\n  Math.max(filasM1, filasM2); i++) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int j = 0; j <\r\n  Math.max(columnasM1, columnasM2); j++) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (i < filasM1 &&\r\n  j < columnasM1) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (i < filasM2 && j\r\n  < columnasM2) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i][j] =\r\n  (m1[i][j] + m2[i][j]) / 2; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i][j] =\r\n  m1[i][j]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (i < filasM2\r\n  && j < columnasM2) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i][j] =\r\n  m2[i][j]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i][j] = 0; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return resultado; \u00a0\u00a0\u00a0 }\u00a0\u00a0 ", 
            "\u00a0\u00a0\u00a0 public int[][] mezcla(int[][]m1, int[][] m2) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int filasM1 = m1.length; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int columnasM1 = m1[0].length; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int filasM2 = m2.length; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int columnasM2 = m2[0].length; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int filasR = Math.max(filasM1,\r\n  filasM2); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int columnasR = Math.max(columnasM1,\r\n  columnasM2); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int[][] resultado = new\r\n  int[filasR][columnasR]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int i = 0; i < filasR; i++) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0for (int j = 0; j < columnasR; j++) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (i < filasM1 &&\r\n  j < columnasM1) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (i < filasM2\r\n  && j < columnasM2) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i][j] =\r\n  (m1[i][j] + m2[i][j]) / 2; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resultado[i][j] = m1[i][j]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (i < filasM2\r\n  && j < columnasM2) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i][j] =\r\n  m2[i][j]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i][j] = 0; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return resultado; \u00a0\u00a0\u00a0 }", 
            "\u00a0\u00a0\u00a0 public int[][] mezcla(int[][]m1, int[][] m2) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int filasM1 = m1.length; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int columnasM1 = m1[0].length; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int filasM2 = m2.length; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int columnasM2 = m2[0].length; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int filasR = Math.max(filasM1,\r\n  filasM2); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int columnasR = Math.max(columnasM1,\r\n  columnasM2); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int[][] resultado = new\r\n  int[filasR][columnasR]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int i = 0; i < filasR; i++) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int j = 0; j < columnasR;\r\n  j++) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 boolean estaEnM1 = i <\r\n  filasM1 && j < columnasM1; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 boolean estaEnM2 = i < filasM2\r\n  && j < columnasM2; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (estaEnM1) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (estaEnM2) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i][j] =\r\n  (m1[i][j] + m2[i][j]) / 2; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i][j] =\r\n  m1[i][j]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (estaEnM2) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i][j] =\r\n  m2[i][j]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i][j] = 0; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return resultado; \u00a0\u00a0\u00a0 }"
        ], 
        "id": "251"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/201.html": {
        "id": "201", 
        "definition": "Un m\u00e9todo accede a diferentes tipos de variables: \u00b7 los campos de la clase a la que pertenece, con el valor que tengan; exist\u00edan antes y permanecen despu\u00e9s de la terminaci\u00f3n del m\u00e9todo \u00b7 los argumentos formales, con el valor dado por los datos de llamada al m\u00e9todo; se crean con la llamada al m\u00e9todo y desaparecen con su terminaci\u00f3n \u00b7 las variables locales que defina para su propio uso; se crean cuando se declaran y desaparecen con la terminaci\u00f3n del m\u00e9todo", 
        "description": "Un m\u00e9todo accede a diferentes tipos de variables: \u00b7 los campos de la clase a la que pertenece, con el valor que tengan; exist\u00edan antes y permanecen despu\u00e9s de la terminaci\u00f3n del m\u00e9todo \u00b7 los argumentos formales, con el valor dado por los datos de llamada al m\u00e9todo; se crean con la llamada al m\u00e9todo y desaparecen con su terminaci\u00f3n \u00b7 las variables locales que defina para su propio uso; se crean cuando se declaran y desaparecen con la terminaci\u00f3n del m\u00e9todo", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html"
        ], 
        "title": "variables"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/162.html": {
        "id": "162", 
        "definition": "", 
        "description": "", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/161.html"
        ], 
        "title": "if encadenados"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/228.html": {
        "definition": "Los paquetes son una forma de agrupar varias clases", 
        "concept": "concepto", 
        "description": "Los paquetes son una forma de agrupar varias clases. Es \u00fatil \u00b7 cuando el programa es muy grande, para estructurar las clases en grupos relacionados. \u00b7 para aprovechar la posibilidad de dotar a los miembros de una clase de visibilidad \u201cde paquete\u201d, de forma que s\u00f3lo son visibles por otras clases del mismo paquete y no por clases de otros paquetes. Aunque no es estrictamente necesario, se recomienda encarecidamente que la estructura de paquetes coincida con la estructura de directorios donde se encuentran los ficheros .java. La declaraci\u00f3n de paquete se hace por fichero .java. Es decir, si un fichero .java comienza diciendo todas las clases que se definan en ese fichero se dir\u00e1n del paquete x.y.z . Y deben estar en el directorio", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/229.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/230.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/231.html"
        ], 
        "title": "Paquete", 
        "alternative": "package", 
        "id": "228"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/155.html": {
        "definition": "Cuando la nueva clase B dispone autom\u00e1ticamente de todos los miembros public, protected y \u201cde paquete\u201d de la clase A, miembros que puede usar o redefinir", 
        "concept": "concepto", 
        "description": "Cuando la nueva clase B dispone autom\u00e1ticamente de todos los miembros public, protected y \u201cde paquete\u201d de la clase A, miembros que puede usar o redefinir. Ver \u201c Extensi\u00f3n \u201d. B hereda de A \u00b7 los miembros (campos y m\u00e9todos) B puede ocultar \u00b7 variables de A \u00b7 m\u00e9todos est\u00e1ticos de A (de clase) B puede redefinir \u00b7 m\u00e9todos de A (de objeto) B puede aportar lo que quiera si no colisiona con lo definido en A", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/128.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/156.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/157.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/158.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/159.html"
        ], 
        "title": "Herencia", 
        "alternative": "inheritance", 
        "id": "155"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/8.html": {
        "definition": "", 
        "description": "", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/4.html"
        ], 
        "title": "Ejemplo", 
        "examples": [
            "\u00a0 public abstract class Punto { \u00a0 \u00a0\u00a0\u00a0 public abstract\r\n  double getX(); \u00a0 \u00a0\u00a0\u00a0 public abstract\r\n  double getY(); \u00a0 \u00a0\u00a0\u00a0 public abstract\r\n  double getModulo(); \u00a0 \u00a0\u00a0\u00a0 public abstract\r\n  double getAngulo(); \u00a0 \u00a0\u00a0\u00a0 public double\r\n  distancia(Punto p) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double dx =\r\n  getX() - p.getX(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double dx2 =\r\n  dx * dx; \u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double dy =\r\n  getY() - p.getY(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double dy2 =\r\n  dy * dy; \u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return\r\n  Math.sqrt(dx2 + dy2); \u00a0\u00a0\u00a0 } }", 
            "\u00a0 public class PuntoC extends\r\n  Punto { \u00a0\u00a0\u00a0 private double x; \u00a0\u00a0\u00a0 private double y; \u00a0 \u00a0\u00a0\u00a0 public double\r\n  getX() { return x; } \u00a0 \u00a0\u00a0\u00a0 public double\r\n  getY() { return y; } \u00a0 \u00a0\u00a0\u00a0 public double\r\n  getModulo() { return Math.sqrt(x * x + y * y); } \u00a0 \u00a0\u00a0\u00a0 public double\r\n  getAngulo() { return Math.atan2(y, x); } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \u00a0\u00a0\u00a0 public\r\n  PuntoC(double x, double y) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.x= x; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.y= y; \u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \u00a0 \u00a0\u00a0\u00a0 public String\r\n  toString() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return\r\n  \"cartesianas: \" + x + \", \" + y; \u00a0\u00a0\u00a0 } }", 
            "\u00a0 public class PuntoP extends\r\n  Punto { \u00a0\u00a0\u00a0 private double m; \u00a0\u00a0\u00a0 private double a; \u00a0 \u00a0\u00a0\u00a0 public double\r\n  getX() { return m * Math.cos(a); } \u00a0 \u00a0\u00a0\u00a0 public double\r\n  getY() { return m * Math.sin(a); } \u00a0 \u00a0\u00a0\u00a0 public double\r\n  getModulo() { return m; } \u00a0 \u00a0\u00a0\u00a0 public double\r\n  getAngulo() { return a; } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \u00a0\u00a0\u00a0 public\r\n  PuntoP(double m, double a) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.m = m; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.a = a; \u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \u00a0 \u00a0\u00a0\u00a0 public String\r\n  toString() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return\r\n  \"polares: \" + m + \", \" + a; \u00a0\u00a0\u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "8"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/153.html": {
        "definition": "Ver \u201c M\u00e9todo / getters \u201d", 
        "concept": "concepto", 
        "description": "Ver \u201c M\u00e9todo / getters \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/205.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Getter", 
        "id": "153"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/137.html": {
        "definition": "Ver \"N\u00fameros\"", 
        "concept": "palabra reservada", 
        "description": "Ver \"N\u00fameros\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/215.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "float", 
        "id": "137"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/220.html": {
        "definition": "Si tenemos un \u00e1mbito de visibilidad A1 y definimos un \u00e1mbito A2 dentro de A1, las variables definidas en A2 ocultan a las variables hom\u00f3nimas de A1", 
        "concept": "concepto", 
        "description": "Si tenemos un \u00e1mbito de visibilidad A1 y definimos un \u00e1mbito A2 dentro de A1, las variables definidas en A2 ocultan a las variables hom\u00f3nimas de A1. Ejemplo: \u00c1mbito clase: l\u00edneas 1-7. \u00c1mbito metodo: l\u00edneas 3-6. La x del \u00e1mbito clase (declarada en la l\u00ednea 2) queda oculta por la x del \u00e1mbito m\u00e9todo (declarada en la l\u00ednea 3). El uso de THIS permite que en la l\u00ednea 5 el valor de la x del m\u00e9todo pase a la x de la clase. Este bloque de c\u00f3digo (11-17) hace exactamente lo mismo que el bloque (1-7) pero sin problemas de visibilidad. La m declarada en la l\u00ednea 20 queda oculta por la m declarada en la l\u00ednea 21 en el \u00e1mbito del for (l\u00edneas 21-23). La m de las l\u00ednea 21 y 23 se refieren a la declaraci\u00f3n en el \u00e1mbito m\u00e1s estrecho: la de la l\u00ednea 21. Ver \" ocultaci\u00f3n | redefinici\u00f3n \".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Ocultaci\u00f3n", 
        "examples": [
            "1 class C { 2\u00a0\u00a0\u00a0 private int x; 3\u00a0\u00a0\u00a0 public void metodo(int x) {\u00a0\u00a0  5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.x = x; 6\u00a0\u00a0\u00a0 } 7\u00a0 }", 
            "11 class C { 12\u00a0\u00a0\u00a0 private int x1; 13\u00a0\u00a0\u00a0 public void metodo(int x2) {\u00a0\u00a0  15\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.x1 = x2; 16\u00a0\u00a0\u00a0 } 17\u00a0 } \u00a0", 
            "20\u00a0\u00a0 int m; 21\u00a0\u00a0 for (int m= 0; m < \u2026; m++) {\u00a0  22\u00a0\u00a0\u00a0\u00a0\u00a0 metodo(m); 23\u00a0\u00a0 }"
        ], 
        "alternative": "hiding", 
        "id": "220"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/300.html": {
        "definition": "\u00c1mbito o zona del c\u00f3digo en el que un elemento de Java puede referenciarse por su nombre", 
        "description": "\u00c1mbito o zona del c\u00f3digo en el que un elemento de Java puede referenciarse por su nombre. Java define 4 modificadores fundamentales que califican a Clases, M\u00e9todos y Campos : private el elemento s\u00f3lo es accesible dentro del fichero en el que se define de paquete el elemento s\u00f3lo es accesible dentro del paquete en el que se define (clases en el mismo directorio). protected el elemento es accesible dentro del paquete en el que se define y, adem\u00e1s, en las Subclases . public el elemento es accesible desde cualquier sitio. Las reglas b\u00e1sicas se pueden resumir en la siguiente tabla Las clases pueden ser \u201cpublic\u201d (para todo el mundo), \u201cde paquete\u201d (restringidas a un paquete) o \u201cprivate\u201d (restringidas a un fichero). Se recomienda que los Campo sean siempre \u201cprivate\u201d (restringidos a un fichero). Los m\u00e9todos suelen aprovechar frecuentemente las facilidades java de control de visibilidad. El siguiente ejemplo recoge toda la casu\u00edstica y muestra qu\u00e9 es posible y que no: N\u00f3tese la diferencia en la clase C que extiende a la clase A, que puede acceder a los m\u00e9todos protegidos de A siempre y cuando lo haga como m\u00e9todo heredado, que no como m\u00e9todo de A. Cuando se intenta compilar, el compilador detecta y reporta los siguientes errores sem\u00e1nticos:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/12.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/52.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/44.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/268.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/44.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "176", 
        "examples": [
            "package\r\n  a; \u00a0 public\r\n  class A { \u00a0 \u00a0 private void metodoPrivate() { \u00a0 } \u00a0 \u00a0 /* de paquete */ void metodoFriendly() { \u00a0 } \u00a0 \u00a0 protected void metodoProtected() { \u00a0 } \u00a0 \u00a0 public void metodoPublic() { \u00a0 } \u00a0 \u00a0 void acceso(A a) { \u00a0\u00a0\u00a0 a.metodoPrivate(); \u00a0\u00a0\u00a0 a.metodoFriendly(); \u00a0\u00a0\u00a0 a.metodoProtected(); \u00a0\u00a0\u00a0 a.metodoPublic(); \u00a0 } }", 
            "package\r\n  a; \u00a0 public\r\n  class A2 { \u00a0 \u00a0 void acceso(A a) { \u00a0\u00a0\u00a0 a.metodoPrivate();\u00a0\u00a0\u00a0 // mal \u00a0\u00a0\u00a0 a.metodoFriendly(); \u00a0\u00a0\u00a0 a.metodoProtected(); \u00a0\u00a0\u00a0 a.metodoPublic(); \u00a0 } }", 
            "package\r\n  b; \u00a0 import\r\n  a.A; \u00a0 public\r\n  class B { \u00a0 \u00a0 void acceso(A a) { \u00a0\u00a0\u00a0 a.metodoPrivate();\u00a0\u00a0\u00a0 // mal \u00a0\u00a0\u00a0 a.metodoFriendly();\u00a0\u00a0 // mal \u00a0\u00a0\u00a0 a.metodoProtected();\u00a0 // mal \u00a0\u00a0\u00a0 a.metodoPublic(); \u00a0 } }", 
            "package\r\n  c; \u00a0 import\r\n  a.A; \u00a0 public\r\n  class C extends A { \u00a0 \u00a0 void acceso(A a) { \u00a0\u00a0\u00a0 a.metodoPrivate();\u00a0\u00a0\u00a0 // mal \u00a0\u00a0\u00a0 a.metodoFriendly();\u00a0\u00a0 // mal \u00a0\u00a0\u00a0 a.metodoProtected();\u00a0 // mal \u00a0\u00a0\u00a0 a.metodoPublic(); \u00a0 } \u00a0 \u00a0 void acceso(C c) { \u00a0\u00a0\u00a0 c.metodoPrivate();\u00a0\u00a0\u00a0 // mal \u00a0\u00a0\u00a0 c.metodoFriendly();\u00a0\u00a0 // mal \u00a0\u00a0\u00a0 c.metodoProtected(); \u00a0\u00a0\u00a0 c.metodoPublic(); \u00a0 } }\u00a0\u00a0\u00a0 "
        ], 
        "alternative": "Visibilidad ", 
        "id": "300"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/183.html": {
        "definition": "Si empleamos paquetes, hay que alinear los nombres del paquete y los directorios", 
        "concept": "o directorios", 
        "description": "Si empleamos paquetes, hay que alinear los nombres del paquete y los directorios. Sea Una vez colocado el fichero \u201cHola2.java\u201d en su directorio nos situaremos en el directorio X y llamaremos al compilador El resultado es el fichero \u201cX/ejemplo/ejecucion/Hola.class\u201d. Si deseamos separar ficheros .java de ficheros .class, se lo indicaremos al compilador El resultado es el fichero \u201cY/ejemplo/ejecucion/Hola.class\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/182.html"
        ], 
        "title": "con paquetes", 
        "examples": [
            "package\r\n  ejemplo.ejecucion; \u00a0 public\r\n  class Hola2 { \u00a0 public static void main(String[]\r\n  argumentos) { \u00a0\u00a0\u00a0 System.out.println(\"Hola.\"); \u00a0 } }"
        ], 
        "id": "183"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/296.html": {
        "id": "296", 
        "definition": "Se dice de aquellas variables marcadas como final, indicando que su valor no podr\u00e1 ser modificado (tras su carga inicial)", 
        "description": "Se dice de aquellas variables marcadas como final, indicando que su valor no podr\u00e1 ser modificado (tras su carga inicial). Ver \u201c Variables / invariantes \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/294.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/289.html"
        ], 
        "title": "finales"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/52.html": {
        "definition": "Es el formalismo que permite definir un cierto tipo de objetos ", 
        "concept": "concepto", 
        "description": "Es el formalismo que permite definir un cierto tipo de objetos . Todo objeto es de alguna clase y todos los objetos se comportan de acuerdo a la definici\u00f3n de su clase. Las clases son un conjunto de campos y m\u00e9todos . Opcionalmente una clase puede definir otras clases; pero esto es menos frecuente. Entre objetos de una clase, un objeto difiere de otro en el valor de sus Campo . Las clases responden a la pregunta de \u201c\u00bfC\u00f3mo es (un objeto)?\u201d Cada clase tiene un nombre que debe serle propio y no repetirse dentro de su \u00c1mbito para evitar ambig\u00fcedades. Por convenio, los nombres de las clases deben comenzar con una letra may\u00fascula", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/219.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/44.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/44.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/12.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/53.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/54.html"
        ], 
        "title": "Clases", 
        "id": "52"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/253.html": {
        "definition": "Consiste en la identificaci\u00f3n de una serie de l\u00edneas de c\u00f3digo que se llevan a un m\u00e9todo aparte, reemplazando las l\u00edneas originales por una llamada al nuevo m\u00e9todo", 
        "description": "Consiste en la identificaci\u00f3n de una serie de l\u00edneas de c\u00f3digo que se llevan a un m\u00e9todo aparte, reemplazando las l\u00edneas originales por una llamada al nuevo m\u00e9todo. Es \u00fatil \u00b7 para extraer c\u00f3digo com\u00fan que se repite en varios sitios \u00b7 para hacer m\u00e1s legible un programa, d\u00e1ndole un nombre a unas l\u00edneas de c\u00f3digo \u00b7 para evitar el uso de \" break \" El siguiente ejemplo es un programa que detecta si una String es un pal\u00edndromo", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/33.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/248.html"
        ], 
        "title": "extracci\u00f3n de m\u00e9todos", 
        "examples": [
            "\u00a0\u00a0\u00a0 // c\u00e1lulo de la diagonal mayor de un\r\n  paralep\u00edpedo rectangular \u00a0\u00a0\u00a0 public double getDiagonalMayor(double a, double b, double c) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return Math.sqrt(Math.sqrt(a * a + b\r\n  * b) * \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Math.sqrt(a * a + b\r\n  * b) + c * c); \u00a0\u00a0\u00a0 }", 
            "\u00a0\u00a0\u00a0 // c\u00e1lulo de la diagonal mayor de un\r\n  paralep\u00edpedo rectangular \u00a0\u00a0\u00a0 public double getDiagonalMayor(double a, double b, double c) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return\r\n  hipotenusa(hipotenusa(a, b), c); \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 // teorema de Pit\u00e1goras \u00a0\u00a0\u00a0 private double hipotenusa(double x,\r\n  double y) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return Math.sqrt(x * x + y * y); \u00a0\u00a0\u00a0 }", 
            "\u00a0\u00a0\u00a0 public void testSimetria(String s) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 boolean esSimetrica = true; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int i = 0; i < s.length();\r\n  i++) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int j = s.length() - 1 - i; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (j < i) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 char c1 = s.charAt(i); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 char c2 = s.charAt(j); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (c1 != c2) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 esSimetrica = false; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(esSimetrica); \u00a0\u00a0\u00a0 }", 
            "\u00a0\u00a0\u00a0 public void testSimetria2(String s) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(isSimetrica(s)); \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 private boolean isSimetrica(String s) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int i = 0; i < s.length();\r\n  i++) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int j = s.length() - 1 - i; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (j < i) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return true; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 char c1 = s.charAt(i); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 char c2 = s.charAt(j); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (c1 != c2) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return\r\n  false; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return true;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // necesario para la cadena vac\u00eda\r\n  \"\" \u00a0\u00a0\u00a0 }"
        ], 
        "id": "253"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/247.html": {
        "definition": "Se dice de la conversi\u00f3n forzada de valores de tipos primitivos", 
        "concept": "concepto", 
        "description": "Se dice de la conversi\u00f3n forzada de valores de tipos primitivos. Es lo contrario de la promoci\u00f3n, convirtiendo de un formato \u201cm\u00e1s rico\u201d en un formato \u201cm\u00e1s pobre\u201d. A veces se conoce como downcasting de tipos primitivos. Las promociones toleradas por java son Al contrario que la promoci\u00f3n, el compilador se niega a reducir valores salvo que se le ordene expl\u00edcitamente: Cuando un valor real se reduce a un valor entero, nos quedamos exclusivamente con la parte entera, sin realizar ning\u00fan tipo de redondeo. Si el formato destino de la conversi\u00f3n es incapaz de contener el valor, el resultado es imprevisible. Pero tenga en cuenta que java no se va a quejar (no se produce ning\u00fan error ni de compilaci\u00f3n, ni de ejecuci\u00f3n).", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Reducci\u00f3n", 
        "alternative": "narrowing", 
        "id": "247"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/11.html": {
        "definition": "Conjunto ordenado y finito de operaciones que permite hallar la soluci\u00f3n de un problema", 
        "concept": "concepto", 
        "description": "Conjunto ordenado y finito de operaciones que permite hallar la soluci\u00f3n de un problema. Para hallar la soluci\u00f3n de un cierto problema, pueden haber multitud de algoritmos que, siendo todos correctos, requieran diferente esfuerzo, tiempo de c\u00e1lculo o datos intermedios. Los algoritmos, cuando se codifican en un lenguaje de programaci\u00f3n, se convierten en programas . Un mismo algoritmo puede programarse de m\u00faltiples maneras, dependiendo del programador o del problema concreto al que se aplique. Cuando el problema a resolver es peque\u00f1o, suele ser indiferente emplear uno u otro de los algoritmos conocidos para resolverlo; pero cuando el problema crece, las diferencias de esfuerzo requerido por diferentes algoritmos puede llevar a programas que, siendo todos correctos, tarden m\u00e1s o menos tiempo, o requieran m\u00e1s o menos memoria para ejecutar. Por ello, en aplicaciones reales conviene elegir cuidadosamente el algoritmo que se va a programar.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/241.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Algoritmo", 
        "alternative": "algorithm", 
        "id": "11"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/57.html": {
        "definition": "Este m\u00e9todo se declara en la clase Object y est\u00e1 disponible en todas las clases", 
        "concept": "m\u00e9todo", 
        "description": "Este m\u00e9todo se declara en la clase Object y est\u00e1 disponible en todas las clases. B\u00e1sicamente, se trata de crear otro objeto similar a this, con sus campos propios. Clone() copia los valores de los campos de tipo primitivo, y comparte referencias de los campos que son objetos o arrays. Por ello conviene ser cauto en el uso del m\u00e9todo y lo m\u00e1s habitual es que los objetos que van a utilizarlo lo redefinan, indicando claramente cu\u00e1ndo se comparten referencias y cu\u00e1ndo se hacen copias frescas.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "clone", 
        "id": "57"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/120.html": {
        "id": "120", 
        "definition": "Es lo normal cuando el programa se encuentra con situaciones en las que el tratamiento normal de los datos no puede proseguir", 
        "description": "Es lo normal cuando el programa se encuentra con situaciones en las que el tratamiento normal de los datos no puede proseguir. Las excepciones de tipo Exception deben aparecer expl\u00edcitamente en la cabecera del m\u00e9todo que puede lanzarlas. Se usan excepciones de tipo Exception cuando \u00b7 no es responsabilidad del que llama al m\u00e9todo, saber si los argumentos son correctos o dan pie a un error \u00b7 es responsabilidad del que llama gestionar la excepci\u00f3n cuando se produzca \u00b7 a veces de dice que estas excepciones se utilizan para tratar errores recuperables, pues el m\u00e9todo llamante debe estar preparado para recibirlas y actuar en consecuencia Se dice que son excepciones informativas.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/117.html"
        ], 
        "title": "\u00bfcu\u00e1ndo lanzar Exception o subclases de ella?"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/108.html": {
        "id": "108", 
        "definition": "Son aquellos que no respetan la sem\u00e1ntica del lenguaje", 
        "description": "Son aquellos que no respetan la sem\u00e1ntica del lenguaje. Errores t\u00edpicos: \u00b7 intentar asignar a una variable un valor para el que no ha sido declarada \u00b7 llamar a un m\u00e9todo con argumentos para los que no ha sido programado \u00b7 dar el mismo nombre a dos variables en el mismo \u00e1mbito", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/105.html"
        ], 
        "title": "sem\u00e1nticos"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/173.html": {
        "definition": "Es un operador boolano que devuelve TRUE si el objeto de la izquierda es de la clase indicada a la derecha o de una subclase de ella", 
        "concept": "palabra reservada", 
        "description": "Es un operador boolano que devuelve TRUE si el objeto de la izquierda es de la clase indicada a la derecha o de una subclase de ella. instanceof tambi\u00e9n se puede emplear con arrays devuelve TRUE si se trata de un array de enteros. siempre devuelve TRUE.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "instanceof", 
        "examples": [
            "class A { ... } class B extends A { ...}", 
            "A a = new A(); B b = new B(); A ab = new B();", 
            "a instanceof A a instanceof B b instanceof A b instanceof B ab instanceof A ab instanceof B", 
            "true false true true true true"
        ], 
        "id": "173"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/265.html": {
        "id": "265", 
        "definition": "Ver \u201cVariables / de clase\u201d", 
        "description": "Ver \u201cVariables / de clase\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/293.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/264.html"
        ], 
        "title": "campos static"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/250.html": {
        "definition": "Una expresi\u00f3n imbuida en una expresi\u00f3n m\u00e1s grande puede extraerse para aclarar el significado de la sub-expresi\u00f3n", 
        "description": "Una expresi\u00f3n imbuida en una expresi\u00f3n m\u00e1s grande puede extraerse para aclarar el significado de la sub-expresi\u00f3n. Para ello se introducen variables auxiliares.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/248.html"
        ], 
        "title": "introducci\u00f3n de variables explicativas", 
        "examples": [
            "\u00a0\u00a0\u00a0 public boolean bisiesto(int a\u00f1o) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return (a\u00f1o % 4 == 0 &&\r\n  (!(a\u00f1o % 100 == 0))) || a\u00f1o % 400 == 0; \u00a0\u00a0\u00a0 }", 
            "\u00a0\u00a0\u00a0 public boolean bisiesto(int a\u00f1o) {  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 boolean multiplo4\u00a0\u00a0 = a\u00f1o % 4 == 0;  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 boolean multiplo100 = a\u00f1o % 100 == 0;\r\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 boolean multiplo400 = a\u00f1o % 400 == 0;\r\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return (multiplo4 && (!\r\n  multiplo100)) || multiplo400;  \u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "250"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/195.html": {
        "id": "195", 
        "definition": "Son aquellas en las que los nodos referencian tanto al nodo siguiente como al anterior", 
        "description": "Son aquellas en las que los nodos referencian tanto al nodo siguiente como al anterior. En estas listas es muy f\u00e1cil avanzar o retroceder desde cualquier nodo.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/192.html"
        ], 
        "title": "listas doblemente encadenadas"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/100.html": {
        "definition": "Como un enumerado es una clase, puede disfrutar de campos y m\u00e9todos propios, sin olvidar nunca que s\u00f3lo existir\u00e1n tantos objetos de esa clase como constantes se han definido", 
        "description": "Como un enumerado es una clase, puede disfrutar de campos y m\u00e9todos propios, sin olvidar nunca que s\u00f3lo existir\u00e1n tantos objetos de esa clase como constantes se han definido. Tambi\u00e9n es posible definir m\u00e9todos espec\u00edficos para cada objeto constante:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/98.html"
        ], 
        "title": "campos y m\u00e9todos", 
        "examples": [
            "/** \u00a0* Billetes de euros. \u00a0*/\r\n   public enum\r\n  Billetes { \u00a0\u00a0\u00a0 B5(5), B10(10), B20(20), B50(50), B100(100), B200(200), B500(500); \u00a0 \u00a0\u00a0\u00a0 private final int valor; \u00a0 \u00a0\u00a0\u00a0 Billetes(int\r\n  valor) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.valor = valor; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public int getValor() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return valor; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public String toString() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return valor + \"euros\"; \u00a0\u00a0\u00a0 } }", 
            "public\r\n  enum Operation { \u00a0\u00a0\u00a0 PLUS\u00a0\u00a0\r\n  { double eval(double x, double y) { return x + y; } }, \u00a0\u00a0\u00a0 MINUS\u00a0\r\n  { double eval(double x, double y) { return x - y; } }, \u00a0\u00a0\u00a0 TIMES\u00a0\r\n  { double eval(double x, double y) { return x * y; } }, \u00a0\u00a0\u00a0 DIVIDE { double eval(double x, double y)\r\n  { return x / y; } }; \u00a0 \u00a0\u00a0\u00a0 abstract double eval(double x, double y); \u00a0 \u00a0\u00a0\u00a0 public static void main(String[]\r\n  argumentos) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double x = Double.parseDouble(argumentos[0]); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Operation operation =\r\n  Operation.valueOf(argumentos[1]); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double y =\r\n  Double.parseDouble(argumentos[2]); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(operation.eval(x,\r\n  y)); \u00a0\u00a0\u00a0 } }", 
            "$\r\n  java Operation 2 PLUS 2 4.0"
        ], 
        "id": "100"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/288.html": {
        "definition": "Se dice cuando el contenido de una variable de tipo B se asigna a una variable de tipo A, siendo B subclase de A", 
        "concept": "concepto", 
        "description": "Se dice cuando el contenido de una variable de tipo B se asigna a una variable de tipo A, siendo B subclase de A. Siempre es posible. Ver \u201cSustituci\u00f3n\u201d. Ver \u201cCasting\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/274.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/47.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Upcasting", 
        "id": "288"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/123.html": {
        "definition": "Si ambos operandos son enteros, el resultado es entero", 
        "description": "Si ambos operandos son enteros, el resultado es entero. Si alguno de los operandos es real, el resultado es real. Si uno de los operandos es entero y el otro es real, en entero se pasa a real y se operan como reales. Ver \" Promoci\u00f3n \". Si se dividen enteros, el cociente es el resultado de la divisi\u00f3n de enteros. Si alguno de los operandos es un n\u00fameros real, el resultado es otro n\u00famero real. Ver \" Promoci\u00f3n \". El resto sobre reales se calcula como sobre enteros; pero devuelve un valor real.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/242.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/242.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/122.html"
        ], 
        "title": "aritm\u00e9ticas", 
        "examples": [
            "a + b", 
            "a \u2013 b", 
            "a * b", 
            "a / b", 
            "a % b"
        ], 
        "id": "123"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/262.html": {
        "definition": "En un mismo \u00c1mbito pueden coexistir dos o m\u00e1s m\u00e9todos hom\u00f3nimos (mismo nombre o identificador) siempre y cuando difieran en el n\u00famero, orden o tipo de sus argumentos", 
        "concept": "concepto", 
        "description": "En un mismo \u00c1mbito pueden coexistir dos o m\u00e1s m\u00e9todos hom\u00f3nimos (mismo nombre o identificador) siempre y cuando difieran en el n\u00famero, orden o tipo de sus argumentos. No es suficiente diferenciaci\u00f3n diferir en el tipo del valor devuelto o en las excepciones que pueden lanzar.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/12.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/263.html"
        ], 
        "title": "Sobrecarga de nombres", 
        "alternative": "name overloading", 
        "id": "262"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/20.html": {
        "definition": "Es muy frecuente recorrer los t\u00e9rminos de un array, visitando todos y cada uno de sus elementos en orden", 
        "description": "Es muy frecuente recorrer los t\u00e9rminos de un array, visitando todos y cada uno de sus elementos en orden. Se puede utilizar un bucle con contador o iterar sobre los elementos: Otro ejemplo: impresi\u00f3n de una matriz no cuadrada, fila por fila:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/15.html"
        ], 
        "title": "recorrido", 
        "examples": [
            "int maximo = Integer.MIN_VALUE; for (int i = 0; i <\r\n  vector.length; i++) { \u00a0\u00a0\u00a0\r\n  if (vector[i] > maximo) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 maximo =\r\n  vector[i]; }", 
            "int maximo = Integer.MIN_VALUE; for (int n: vector) { \u00a0\u00a0\u00a0\r\n  if (n > maximo) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 maximo = n; }", 
            "int[][] matriz = ...; for (int[] fila : matriz) { \u00a0\u00a0\u00a0\r\n  for (int dato : fila) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.print(dato + \"\r\n  \"); \u00a0\u00a0\u00a0\r\n  System.out.println(); }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "20"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/284.html": {
        "definition": "Todos los objetos java disponen de este m\u00e9todo que devuelve una cadena representativa del objeto", 
        "concept": "m\u00e9todo", 
        "description": "Todos los objetos java disponen de este m\u00e9todo que devuelve una cadena representativa del objeto. Lo m\u00e1s habitual es que el programador codifique el m\u00e9todo para que la cadena devuelta sea c\u00f3moda y \u00fatil: Si no se programa el m\u00e9todo en un cierto objeto, se hereda el de su superior en la jerarqu\u00eda de herencia, en \u00faltimo caso, el definido en la clase Object, que imprime el nombre de la clase y el hashCode del objeto en hexadecimal:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "toString", 
        "examples": [
            "public\r\n  class Punto { \u00a0\u00a0private int x, y; \u00a0 \u00a0 public String toString() { \u00a0\u00a0\u00a0 return \"<\" + x + \",\r\n  \" + y + \">\"; \u00a0 } }", 
            "public\r\n  class Object { \u00a0\u00a0\u00a0 public String toString() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return getClass().getName() + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"@\" +\r\n  Integer.toHexString(hashCode()); \u00a0\u00a0\u00a0 } }", 
            "public\r\n  class Ejemplo { \u00a0\u00a0\u00a0 public static void main(String[]\r\n  argumentos) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Ejemplo\r\n  ejemplo = new Ejemplo(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(ejemplo); \u00a0\u00a0\u00a0 } }", 
            "$ java Ejemplo Ejemplo@107077e"
        ], 
        "id": "284"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/302.html": {
        "definition": "Se usa para construir Bucles que se ejecutan cero o m\u00e1s veces", 
        "concept": "palabra reservada", 
        "description": "Se usa para construir Bucles que se ejecutan cero o m\u00e1s veces. Si el contenido del bucle es una \u00fanica sentencia, se pueden obviar las llaves. No es obligatorio: siempre pueden ponerse llaves. La palabra reservada \u201cwhile\u201d tambi\u00e9n se emplea en bucles \u201c do-while \u201d. Ver \u201cBucles\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/34.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/83.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/34.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "while", 
        "examples": [
            "while (condici\u00f3n) \u00a0\u00a0\u00a0 sentencia; \u00a0 while (condici\u00f3n) { \u00a0\u00a0\u00a0 sentencia 1; \u00a0\u00a0\u00a0 sentencia 2; \u00a0\u00a0\u00a0 ... \u00a0\u00a0\u00a0 sentencia ...; }", 
            "while (isHambriento()) \u00a0\u00a0\u00a0 comer();", 
            "\u00a0 while (semaforo.isActivado())\r\n  { \u00a0\u00a0\u00a0 semaforo.setColor(ROJO); \u00a0\u00a0\u00a0 semaforo.setColor(VERDE); \u00a0\u00a0\u00a0 semaforo.setColor(AMARILLO); }", 
            "\u00a0 int\r\n  factorial(int n) {  \u00a0\u00a0\u00a0 int fact = 1;  \u00a0\u00a0\u00a0 while (n > 0) {  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 fact*= n;  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 n--;  \u00a0\u00a0\u00a0 }  \u00a0\u00a0\u00a0 return fact;  }"
        ], 
        "id": "302"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/335.html": {
        "id": "335", 
        "definition": "Lo m\u00e1s habitual es que las clases de la librer\u00eda de java lo proporcionen", 
        "description": "Lo m\u00e1s habitual es que las clases de la librer\u00eda de java lo proporcionen. Por ejemplo: Si tenemos un array, podemos pasarlo a lista e iterar sobre la lista:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/334.html"
        ], 
        "title": "\u00bfDe d\u00f3nde saco un iterator?"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/333.html": {
        "definition": "Las clases que implementan esta interfaz deben proporcionar un m\u00e9todo \u201citerator()\u201d que devuelva un Iterator sobre la objetos de clase T: Los objetos de clases que implementan esta interface son susceptibles de usarse directamente en sentencias \u201cfor each\u201d para ir recorriendo los objetos que va devolviendo el iterador", 
        "concept": "interface", 
        "description": "Las clases que implementan esta interfaz deben proporcionar un m\u00e9todo \u201citerator()\u201d que devuelva un Iterator sobre la objetos de clase T: Los objetos de clases que implementan esta interface son susceptibles de usarse directamente en sentencias \u201cfor each\u201d para ir recorriendo los objetos que va devolviendo el iterador. Sea la clase: Si X es un objeto de esa clase, se pueden recorrer sus elementos f\u00e1cilmente: Ver \u201c recorridos con iterador (for each) \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "Iterable<T>", 
        "id": "333"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/357.html": {
        "definition": "Es una variante de Map especializada en textos, es decir, un caso partitular de Map<String, String>, aunque tiene algunos m\u00e9todos para facilitar su uso, especialmente escribiendo y leyendo de ficheros de texto", 
        "concept": "clase", 
        "description": "Es una variante de Map especializada en textos, es decir, un caso partitular de Map<String, String>, aunque tiene algunos m\u00e9todos para facilitar su uso, especialmente escribiendo y leyendo de ficheros de texto. M\u00e9todos m\u00e1s utilizados: java.util.Properties Property() constructor Property(Properties defaults) construye un objeto Properties utilizando otro como defecto; es decir, si el nuevo objeto no tiene la clave que se solicita, se busca en el objeto \u201cdefaults\u201d. Object setProperty(String clave, String valor) asocia el valor a la clave devuelve el antiguo valor asociado a la clave, o NULL si la clave no exist\u00eda antes String getProperty(String clave) devuelve el valor asociado a la clave devuelve NULL si no hay valor asociado String getProperty(String clave, String X) devuelve el valor asociado a la clave devuelve X si no hay valor asociado Set<String> stringPropertyNames() conjunto de claves que tienen asociado un valor, incluyendo posibles objetos Properties que se usan como respaldo (ver segundo constructor)", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/358.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/359.html"
        ], 
        "title": "Properties", 
        "id": "357"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/112.html": {
        "definition": "Elija un tama\u00f1o de sangrado y \u00faselo de forma sistem\u00e1tica en todo el programa", 
        "description": "Elija un tama\u00f1o de sangrado y \u00faselo de forma sistem\u00e1tica en todo el programa. Es habitual usar 2, 3 o 4 espacios en blanco, o un car\u00e1cter TABULADO como elemento de sangrado. ..if (condicion) { ....sentencias; .. } else { ....sentencias; .. } ..if (condicion) { ....sentencias; .. } else if (condicion) { ....sentencias; .. } else { ....sentencias; .. } ..for (int i= 0; i < array.length; i++) { ....sentencias; .. } ..for (int i= 0; i < array.length; i++) .. { ....sentencias; .. } ..for (int Object x: lista) { ....sentencias; .. } ..while (condicion) { ....sentencias; .. } ..do { ....sentencias; .. } while (condicion); ..public tipo metodo(argumentos) { ....sentencias; .. } if (condicion) { sentencias; } else if (condicion) { sentencias; } else { sentencias; } if (condicion) sentencias; else if (condicion) sentencias; else sentencias; if (condicion) { sentencias; } else if (condicion) { sentencias; } else { sentencias; } if (condicion) { sentencias; } else if (condicion) { sentencias; } else { sentencias; } 2 * 3 + 4 * 5 2*3+4*5", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/110.html"
        ], 
        "title": "66", 
        "alternative": "2. Sangrado y espacio en blanco ", 
        "id": "112"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/164.html": {
        "definition": "", 
        "description": "", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/161.html"
        ], 
        "title": "errores t\u00edpicos", 
        "examples": [
            "if (condicion)  \u00a0\u00a0\u00a0 sentencia1;  \u00a0\u00a0\u00a0 sentencia2;  \u00a0\u00a0\u00a0 sentencia3; ", 
            "if (condicion) ;  \u00a0\u00a0\u00a0 sentencia; ", 
            "if (a)  \u00a0\u00a0\u00a0 if (b)  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 S1;  else  \u00a0\u00a0\u00a0 S2; ", 
            "if (a) { \u00a0\u00a0\u00a0 if (b) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 S1; \u00a0\u00a0\u00a0 } else { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 S2; \u00a0\u00a0\u00a0 } }"
        ], 
        "id": "164"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/53.html": {
        "id": "53", 
        "definition": "Las clases se pueden instanciar (new) para dar lugar a objetos", 
        "description": "Las clases se pueden instanciar (new) para dar lugar a objetos. Las clases se pueden extender (extends) para dar lugar a nuevas clases. Las clases pueden implementar (implements) interfaces. Gr\u00e1ficamente:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/52.html"
        ], 
        "title": "operaciones con clases"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/213.html": {
        "definition": "Se usa para construir un objeto de una cierta clase", 
        "concept": "palabra reservada", 
        "description": "Se usa para construir un objeto de una cierta clase. Lo que se hace es ejecutar el constructor, inicializando los campos del objeto seg\u00fan se crea. No se puede usar con clases abstractas, ni con interfaces.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "new", 
        "id": "213"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/186.html": {
        "definition": "Java Development Kit", 
        "concept": "acr\u00f3nimo", 
        "description": "Java Development Kit. Entorno de desarrollo java. Paquete software que contiene herramientas para desarrollar y ejecutar programas java. Incluye:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "JDK", 
        "id": "186"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/121.html": {
        "id": "121", 
        "definition": "Es lo normal cuando el programa se encuentra con una situaci\u00f3n inmanejable que no deber\u00eda haberse producido; pero impide seguir", 
        "description": "Es lo normal cuando el programa se encuentra con una situaci\u00f3n inmanejable que no deber\u00eda haberse producido; pero impide seguir. Lo m\u00e1s habitual es que este tipo de excepciones las lance el propio entorno de ejecuci\u00f3n ante errores del programador tales como \u00b7 indexaci\u00f3n de un array fuera de rango \u00b7 referencia a ning\u00fan objeto (null) \u00b7 errores de formato, operaciones matem\u00e1ticas, etc. Las excepciones de tipo RuntimeException no es necesario declararlas en la cabecera de los m\u00e9todos que pueden lanzarlas, aunque puede documentarse. Como regla puede decirse que es conveniente poner expl\u00edcitas aquellas excepciones que se lanzan porque el programador lo ha escrito en su c\u00f3digo. Se usan excepciones de tipo RuntimeException cuando \u00b7 es responsabilidad del que llama al m\u00e9todo, saber si los argumentos son correctos o dar\u00edan pie a un error \u00b7 el que llama no prev\u00e9 ninguna excepci\u00f3n, ni tratamiento expl\u00edcito alguno; por ello a veces se dice que son excepciones para errores irrecuperables \u00b7 el m\u00e9todo llamado se protege de fallos del programador lanzando una excepci\u00f3n de ejecuci\u00f3n Se dice que son excepciones defensivas.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/117.html"
        ], 
        "title": "\u00bfcu\u00e1ndo lanzar RuntimeException o subclases de ella?"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/393.html": {
        "definition": "equals() define una relaci\u00f3n de equivalencia, mientras que compareTo() define una relaci\u00f3n de orden", 
        "description": "equals() define una relaci\u00f3n de equivalencia, mientras que compareTo() define una relaci\u00f3n de orden. Es muy conveniente que sean coherentes El algunas ocasiones se puede usar otro criterio. Vease, por ejemplo, la clase BigDecimal de la librer\u00eda est\u00e1ndar de java, que usa la relaci\u00f3n de orden normal entre n\u00fameros Reales; pero tiene una peculiar interpretaci\u00f3n de lo que es igualdad.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/390.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/103.html"
        ], 
        "id": "393"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/297.html": {
        "id": "297", 
        "definition": "Se dice de la carga del primer valor en una variable", 
        "description": "Se dice de la carga del primer valor en una variable. Se puede hacer aprovechando su declaraci\u00f3n o posteriormente. A veces el compilador puede detectar de que se intenta utilizar una variable no inicializada, lo que suele ser s\u00edntoma de error u olvido. campos (variables) de clase (static) Conviene inicializarlas junto a la declaraci\u00f3n o en un bloque static. Si no se dice nada, se inicializan con valor 0 o null. campos (variables) de objeto Conviene inicializarlas junto a la declaraci\u00f3n o en el constructor. Si no se dice nada, se inicializan con valor 0 o null. argumentos formales (de los m\u00e9todos) Se inicializan con los argumentos reales aportados en la llamada al m\u00e9todo. variables locales (en un bloque) Conviene inicializarlas junto a su declaraci\u00f3n. O, visto al rev\u00e9s, conviene no declararlas hasta que se conoce su valor inicial. No se pueden utilizar si no se les asigna alg\u00fan valor. Ver \u201cInicializaci\u00f3n\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/172.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/289.html"
        ], 
        "title": "inicializaci\u00f3n"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/139.html": {
        "definition": "Los bucles \u201cfor\u201d tradicionalmente emplean un contador que es una variable (local al bucle)", 
        "description": "Los bucles \u201cfor\u201d tradicionalmente emplean un contador que es una variable (local al bucle). Local al bucle quiere decir que su \u00e1mbito es el propio bucle, no pudiendo utilizarse dicha variable fuera del bucle.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/138.html"
        ], 
        "title": "bucles \"for\" con contador", 
        "examples": [
            "for\r\n  (int i = 0; i < 10; i++)  \u00a0\u00a0\u00a0 System.out.print(i); ", 
            "Clase[]\r\n  array= ...; \u00a0 for\r\n  (int i = 0; i < array.length; i++) { \u00a0\u00a0\u00a0 Clase x = array[i]; \u00a0\u00a0\u00a0 procesa(x); }", 
            "int\r\n  factorial(int m) {  \u00a0\u00a0\u00a0 int fact = 1;  \u00a0\u00a0\u00a0 for (n = m; n > 0; n--)  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 fact*= n;  }\r\n  "
        ], 
        "id": "139"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/209.html": {
        "definition": "La declaraci\u00f3n de un m\u00e9todo indica el tipo del resultado que devuelve el m\u00e9todo", 
        "concept": "resultado", 
        "description": "La declaraci\u00f3n de un m\u00e9todo indica el tipo del resultado que devuelve el m\u00e9todo. Si el m\u00e9todo no devuelve nada, se dice \"void\". En Java los m\u00e9todos s\u00f3lo pueden devolver un \u00fanico valor. Si necesitara devolver varios valores, hay m\u00faltiples opciones: \u00b7 use como retorno un tipo estructurado; es decir, una clase con varios campos para los diferentes valores del resultado. El m\u00e9todo crea un objeto resultado con los datos pertinentes. Es la soluci\u00f3n m\u00e1s elegante; pero pudiera ser costosa en ejecuci\u00f3n. \u00b7 pase como argumento un tipo estructurado; es decir una clase con varios campos para los diferentes valores del resultado. El m\u00e9todo carga los resultados en al objeto pasado. Es menos elegante; pero m\u00e1s eficaz en ejecuci\u00f3n al evitar la creaci\u00f3n de nuevos objetos. \u00b7 use los campos de la clase a la que pertenece el m\u00e9todo. El m\u00e9todo carga en ellas los resultados. Aunque depende mucho de cada caso, puede dar lugar a programas ininteligibles, debido a que se modifican campos inesperados. Es (muy) poco recomendable. A esta forma de programar se la conoce como \u201cpor efecto colateral\u201d (side effect programming).", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html"
        ], 
        "title": "valor devuelto", 
        "examples": [
            "public\r\n  class EcuacionGrado2 { \u00a0\u00a0\u00a0 private double a, b, c; \u00a0 \u00a0\u00a0\u00a0 public EcuacionGrado2(double a, double b,\r\n  double c) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.a = a; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.b = b; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.c = c; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 // resultado estructurado \u00a0\u00a0\u00a0 public Solucion raices() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double discriminante = b * b - 4 * a * c; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (discriminante >= 0.0) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double x1 = (-b + Math.sqrt(discriminante))\r\n  / (2 * a); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double x2 = (-b -\r\n  Math.sqrt(discriminante)) / (2 * a); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return new Solucion(true, x1,\r\n  x2); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double real = (-b +\r\n  Math.sqrt(-discriminante)) / (2 * a); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double imag = (-b -\r\n  Math.sqrt(-discriminante)) / (2 * a); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return new Solucion(false, real,\r\n  imag); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 // modificaci\u00f3n del argumento de llamada \u00a0\u00a0\u00a0 public void raices(Solucion solucion) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double discriminante = b * b - 4 * a * c; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (discriminante >= 0.0) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double x1 = (-b +\r\n  Math.sqrt(discriminante)) / (2 * a); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double x2 = (-b -\r\n  Math.sqrt(discriminante)) / (2 * a); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 solucion.real = true; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 solucion.valor1 = x1; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 solucion.valor2 = x2; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double real = (-b +\r\n  Math.sqrt(-discriminante)) / (2 * a); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double imag = (-b -\r\n  Math.sqrt(-discriminante)) / (2 * a); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 solucion.real = false; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 solucion.valor1 = real; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 solucion.valor2 = imag; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public class Solucion { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 boolean real; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double valor1; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double valor2; \u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 public Solucion(boolean real, double\r\n  valor1, double valor2) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.real = real; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.valor1 = valor1; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.valor2 = valor2; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 } }\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "209"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/149.html": {
        "definition": "La introducci\u00f3n de clases gen\u00e9ricas en java es tard\u00eda y adolece de algunas importantes limitaciones derivadas de la necesidad de hacer compatible el c\u00f3digo creado con anterioridad", 
        "description": "La introducci\u00f3n de clases gen\u00e9ricas en java es tard\u00eda y adolece de algunas importantes limitaciones derivadas de la necesidad de hacer compatible el c\u00f3digo creado con anterioridad. La siguiente relaci\u00f3n no pretende explicar por qu\u00e9, s\u00f3lo constata las limitaciones. No se pueden crear objetos de un tipo formal. No se pueden crear arrays de tipos formales. No se pueden sobrecargar m\u00e9todos usando tipos formales. No se puede usar el operador instanceof Los campos y m\u00e9todos static (de clase) no pueden referirse a un tipo formal. (*) Los tipos enumerados no admiten tipos formales. Las excepciones no admiten tipos formales. Aunque T2 sea un subtipo de T1, <T2> no es un subtipo de <T1>. (*) Los tipos gen\u00e9ricos pueden tener campos y m\u00e9todos static, con la \u00fanica salvedad de que no se refieran al tipo formal de la clase. Si un m\u00e9todo est\u00e1tico se desea que sea gen\u00e9rico, hay que recurrir a m\u00e9todos gen\u00e9ricos. El asunto de los arrays de tipo formal es especialmente insidioso: no se puede declarar un array de un tipo formal; hay que declararlo de tipo Object y aplicar downcasting. o T x = datos[...];", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/146.html"
        ], 
        "title": "limitaciones de las clases gen\u00e9ricas en java", 
        "examples": [
            "new T();", 
            "new T[100]", 
            "class\r\n  X<T, S> { \u00a0 void metodo(T t) { ... } \u00a0 void metodo(S t) { ... } }", 
            "if\r\n  (x instanceof T)", 
            "static\r\n  T t; \u00a0 static\r\n  T metodo(T t) { ... }", 
            "enum Z<T> { A, B, C }", 
            "class\r\n  E<T> extends Exception { }", 
            "\u00a0"
        ], 
        "id": "149"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/340.html": {
        "definition": "Listas optimizadas para acelerar la inserci\u00f3n y extracci\u00f3n de elementos cualesquiera de la lista", 
        "concept": "clase", 
        "description": "Listas optimizadas para acelerar la inserci\u00f3n y extracci\u00f3n de elementos cualesquiera de la lista. Ver \u201c List \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "LinkedList<E>", 
        "id": "340"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/368.html": {
        "id": "368", 
        "definition": "El propio paquete java", 
        "description": "El propio paquete java.util proporciona algunas implementaciones de la interface Set, sin perjuicio de que se puedan programar otras. Es una implementaci\u00f3n muy eficiente en cuanto a uso de memoria. Es r\u00e1pida en todas las operaciones. Es una implementaci\u00f3n m\u00e1s lenta y pesada; pero presenta la ventaja de que el iterador recorre los elementos del conjunto en orden.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/366.html"
        ], 
        "title": "implementaciones est\u00e1ndar"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/168.html": {
        "definition": "Si una clase no implementa todos los m\u00e9todos definidos en una interfaz, sino s\u00f3lo parte de ellos, el resultado es una clase abstracta", 
        "description": "Si una clase no implementa todos los m\u00e9todos definidos en una interfaz, sino s\u00f3lo parte de ellos, el resultado es una clase abstracta.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/166.html"
        ], 
        "title": "implementaci\u00f3n parcial", 
        "examples": [
            "public interface Serie { \u00a0\u00a0\u00a0 // t\u00e9rmino i-\u00e9simo de la serie \u00a0\u00a0\u00a0 public int termino(int i); \u00a0 \u00a0\u00a0\u00a0 // suma de los\r\n  n primeros t\u00e9rminos \u00a0\u00a0\u00a0 public int suma(int n); }", 
            "public\r\n  abstract class SerieConSuma \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 implements Serie { \u00a0\u00a0\u00a0 public int suma(int n) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int suma = 0; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int i = 0; i < n; i++) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 suma +=\r\n  termino(i); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return suma; \u00a0\u00a0\u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "168"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/219.html": {
        "definition": "Son las diferentes materializaciones de una clase", 
        "concept": "concepto", 
        "description": "Son las diferentes materializaciones de una clase. A partir de una clase se crean objetos usando sentencias \u201cnew\u201d, bien directamente, bien indirectamente por medio de f\u00e1bricas. Cada objeto debe tener su nombre propio, que no debe repetirse dentro de su \u00e1mbito para evitar ambig\u00fcedades. Por convenio, los nombres de los objetos deben comenzar por una letra min\u00fascula.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Objetos", 
        "alternative": "objects", 
        "id": "219"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/22.html": {
        "definition": "Cuando una variable de tipo array se hace igual a otro, se copia la referencia; pero se comparte el array: Si no basta con compartir la referencia, sino que se necesita otra copia de un array, se puede recurrir al m\u00e9todo clone() ", 
        "description": "Cuando una variable de tipo array se hace igual a otro, se copia la referencia; pero se comparte el array: Si no basta con compartir la referencia, sino que se necesita otra copia de un array, se puede recurrir al m\u00e9todo clone() . Si los elementos del array son de un tipo primitivo, se copia su valor. Si son objetos, se copia la referencia, comparti\u00e9ndose el objeto. La misma situaci\u00f3n ocurre cuando tenemos arrays de dos o m\u00e1s dimensiones (efectivamente, se trata de arrays de arrays): Se puede usar el m\u00e9todo est\u00e1ndar \u201c arraycopy() \u201d: que es realmente equivalente al m\u00e9todo clone(), con los mismos problemas cuando se trata de arrays de objetos: Se puede usar el m\u00e9todo est\u00e1ndar copyOf() de java.util.Arrays : que es realmente equivalente al m\u00e9todo clone(), con los mismos problemas cuando se trata de arrays de objetos: Por \u00faltimo, la copia se puede programar expl\u00edcitamente, que es probablemente la forma m\u00e1s segura de trabajar:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/57.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/25.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/305.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/15.html"
        ], 
        "title": "copia de arrays", 
        "examples": [
            "\u00a0 \u00a0\u00a0\u00a0 void copia1() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int[] a = new int[]{1, 2, 3}; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(a)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int[] b = a; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(Arrays.toString(b)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 a[0] *= 10; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(b)); \u00a0\u00a0\u00a0 }", 
            "\u00a0 \u00a0 [1, 2, 3] \u00a0 [1, 2, 3] \u00a0 [10, 2, 3]", 
            "\u00a0 \u00a0\u00a0\u00a0 void copia2() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int[] a = new int[]{1, 2, 3}; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(a)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int[] b = a.clone(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(b)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 a[0] *= 10; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(b)); \u00a0\u00a0\u00a0 }", 
            "\u00a0 \u00a0 [1, 2, 3] \u00a0 [1, 2, 3] \u00a0 [1, 2, 3]", 
            "\u00a0 \u00a0\u00a0\u00a0 void copia2Objetos() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Punto[] a = new Punto[] \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 {new Punto(1, 2), new Punto(3, 4)}; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(a)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Punto[] b = a.clone(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(Arrays.toString(b)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 a[0].multiplica(-1); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(b)); \u00a0\u00a0\u00a0 }", 
            "\u00a0 \u00a0 \u00a0 [(1,2),\r\n  (3,4)] \u00a0 [(1,2),\r\n  (3,4)] \u00a0 [(-1,-2),\r\n  (3,4)]", 
            "\u00a0 \u00a0\u00a0\u00a0 class Punto { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 private int x, y; \u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 public Punto(int x, int y) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.x = x; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.y = y; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 public void multiplica(int factor) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 x *= factor; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 y *= factor; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 public String toString() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return String.format(\"(%d,\r\n  %d)\", x, y); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "\u00a0\u00a0\u00a0 void copia2ArraysBiDi() { \u00a0\u00a0\u00a0\u00a0\u00a0 int[][] a = new int[][]{{1, 2}, {3,\r\n  4}}; \u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.deepToString(a)); \u00a0\u00a0\u00a0\u00a0\u00a0 int[][] b = a.clone(); \u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.deepToString(b)); \u00a0\u00a0\u00a0\u00a0\u00a0 a[0][0] *= -1; \u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.deepToString(b)); \u00a0\u00a0\u00a0 }", 
            "\u00a0 \u00a0 [</w:t>[1, 2], [3, 4]] \u00a0 [</w:t>[1, 2], [3, 4]] \u00a0 [</w:t>[-1, 2], [3, 4]]", 
            "\u00a0\u00a0\u00a0 void copia20() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int[] a = new int[]{1, 2, 3}; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(a)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int[] b = new int[a.length]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.arraycopy(a, 0, b, 0,\r\n  a.length); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(b)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 a[0] *= 10; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(b)); \u00a0\u00a0\u00a0 }", 
            "\u00a0 \u00a0 [1, 2, 3] \u00a0 \u00a0 [1, 2, 3] \u00a0 [1, 2, 3]", 
            "\u00a0\u00a0\u00a0 void copia21Objetos() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Punto[] a = new Punto[] \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 {new Punto(1, 2), new Punto(3, 4)}; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(a)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Punto[] b = new Punto[a.length]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.arraycopy(a, 0, b, 0,\r\n  a.length); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(b)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 a[0].multiplica(-1); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(b)); \u00a0\u00a0\u00a0 }", 
            "\u00a0 \u00a0 \u00a0 [(1,2), (3,4)] \u00a0 \u00a0 [(1,2), (3,4)] \u00a0 [(-1,-2), (3,4)]", 
            "\u00a0\u00a0\u00a0 void copia30() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int[] a = new int[]{1, 2, 3}; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(a)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int[] b = Arrays.copyOf(a, a.length); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(b)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 a[0] *= 10; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(b)); \u00a0\u00a0\u00a0 }", 
            "\u00a0 \u00a0 [1, 2, 3] \u00a0 [1, 2, 3] \u00a0 [1, 2, 3]", 
            "\u00a0\u00a0\u00a0 void copia31Objetos() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Punto[] a = new Punto[] \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 {new Punto(1, 2), new Punto(3, 4)}; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(a)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Punto[] b = Arrays.copyOf(a,\r\n  a.length); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(b)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 a[0].multiplica(-1); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(Arrays.toString(b)); \u00a0\u00a0\u00a0 }", 
            "\u00a0 \u00a0 \u00a0 [(1,2), (3,4)] \u00a0 [(1,2), (3,4)] \u00a0 [(-1,-2), (3,4)]"
        ], 
        "id": "22"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/313.html": {
        "definition": "Una serie de estructuras de datos proporcionadas por la biblioteca est\u00e1ndar de java", 
        "concept": "interface", 
        "description": "Una serie de estructuras de datos proporcionadas por la biblioteca est\u00e1ndar de java. Las m\u00e1s relevantes son: Todas las clases que implementan esta interface proporciona los siguientes m\u00e9todos, al menos: El m\u00e9todo toArray() devuelve un array nuevo de longitud igual al n\u00famero de elementos en la colecci\u00f3n. El m\u00e9todo toArray(T[] a) intenta utilizar el array \u201ca\u201d que se le pasa como argumento: Consecuencia de esta peculiar forma de tratar el argumento, a menudo se utiliza esta construcci\u00f3n para generar un array de tipo deseado y de tama\u00f1o exactamente igual al n\u00famero de elementos: T[] resultado = coleccion.toArray( new T[0] ); En otros casos, si no queremos que java se dedique a crear arrays, creamos uno suficientemente grande y le decimos que lo llene hasta donde necesite T[] resultado = new T[1000]; colecci\u00f3n.toArray( resultado );", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "Collection<E>", 
        "examples": [
            "boolean add(E elemento)  boolean addAll(Collection<E>\r\n  c) void clear()  boolean contains(E elemento)  boolean\r\n  containsAll(Collection<E> elementos)  boolean isEmpty()  Iterator<E> iterator()  boolean\r\n  remove(E elemento)  boolean removeAll(Collection c) int size()  Object[] toArray()  T[] toArray(T[] a) "
        ], 
        "id": "313"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/157.html": {
        "id": "157", 
        "definition": "Para inicializar un objeto B que hereda de A hay que inicializar antes la parte heredada: los constructores de B empiezan llamando a los constructores de A \u00b7 Bien expl\u00edcitamente: El programador escribe el c\u00f3digo de la llamada \u00b7 Bien impl\u00edcitamente: Si el programado no lo escribe: el compilador lo inyecta Java exige que cuando una clase invoca al constructor de su superclase, la llamada a dicho super-constructor debe ser exactamente la primera cosa que haga el constructor de la subclase", 
        "description": "Para inicializar un objeto B que hereda de A hay que inicializar antes la parte heredada: los constructores de B empiezan llamando a los constructores de A \u00b7 Bien expl\u00edcitamente: El programador escribe el c\u00f3digo de la llamada \u00b7 Bien impl\u00edcitamente: Si el programado no lo escribe: el compilador lo inyecta Java exige que cuando una clase invoca al constructor de su superclase, la llamada a dicho super-constructor debe ser exactamente la primera cosa que haga el constructor de la subclase. Ver \"super\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/270.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/155.html"
        ], 
        "title": "constructores"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/122.html": {
        "definition": "Con n\u00fameros y variables num\u00e9ricas se pueden escribir expresiones aritm\u00e9ticas", 
        "concept": "concepto", 
        "description": "Con n\u00fameros y variables num\u00e9ricas se pueden escribir expresiones aritm\u00e9ticas. Con booleanos y variables booleanas se pueden construir expresiones l\u00f3gicas. Las expresiones aritm\u00e9ticas y l\u00f3gicas se pueden combinar para crear expresiones m\u00e1s complejas.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/123.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/124.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/125.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/126.html"
        ], 
        "title": "Expresiones", 
        "alternative": "expressions", 
        "id": "122"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/360.html": {
        "definition": "Los objetos de esta clase sirven para generar n\u00fameros aleatorios", 
        "concept": "clase", 
        "description": "Los objetos de esta clase sirven para generar n\u00fameros aleatorios. La clase disfruta de 2 constructores: public Random() Crea un objeto que genera n\u00fameros aleatorios. public Random(long semilla) Crea objetos que generan n\u00fameros aleatorios con la particularidad de que si se crean dos objetos con la misma semila, ambos objetos generar\u00e1n la misma serie de n\u00fameros aleatorios. Una vez generado un objeto Randon, se dispone de varios m\u00e9todos. Quiz\u00e1s los m\u00e1s usados sean los siguientes: class java.util.Random boolean nextBoolean() true o false, aleatoriamente int nextInt() un entero cualquiera int nextInt(int n) un entero aleatorio entre 0 y n: 0 <= aleatorio < n long nextLong() un entero long cuaqluiera void nextBytes(byte[] bytes) rellena el array con bytes aleatorios double nextDouble() un real (double) aleatorio float nextFloat() un real (float) aleatorio double nextGaussian() un real aleatorio con una distribuci\u00f3n est\u00e1ndar de media 0.0 y deviaci\u00f3n t\u00edpica 1.0", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "Random", 
        "id": "360"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/375.html": {
        "definition": "A diferencia de la clase est\u00e1ndar String, StringBuffer permite trabajar con cadenas de caracteres modificables", 
        "concept": "clase", 
        "description": "A diferencia de la clase est\u00e1ndar String, StringBuffer permite trabajar con cadenas de caracteres modificables. Ver tambi\u00e9n \u201c StringBuilder \u201d, que es m\u00e1s r\u00e1pida. El siguiente ejemplo muestra dos m\u00e9todos para construir un objeto que un listado de N n\u00fameros separados por comas. La diferencia en tiempos de ejecuci\u00f3n es notoria: El tiempo exacto que tarda en ejecutarse el programa depende de cada ordenador y de qu\u00e9 m\u00e1s programas hay en ejecuci\u00f3n en un momento dado. Lo importante es la proporci\u00f3n de tiempos, que es claramente favorable al uso de StringBuffer. La diferencia, inapreciable cuando hay pocos objetos que manejar, se torna apabullante cuando el n\u00famero de objetos crece. Ver \u201c StringBuilder \u201d: similar; pero m\u00e1s r\u00e1pida.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "StringBuffer", 
        "examples": [
            "public class UsandoStringBuffer { \u00a0 \u00a0\r\n  private static String metodo1(int n) { \u00a0\u00a0\u00a0\r\n  String resultado = \"\"; \u00a0\u00a0\u00a0\r\n  for (int i = 0; i < n; i++) \u00a0\u00a0\u00a0\u00a0\u00a0 resultado+= i + \", \"; \u00a0\u00a0\u00a0\r\n  return resultado; \u00a0\r\n  } \u00a0 \u00a0\r\n  private static String metodo2(int n) { \u00a0\u00a0\u00a0\r\n  StringBuffer buffer = new StringBuffer(); \u00a0\u00a0\u00a0\r\n  for (int i = 0; i < n; i++) \u00a0\u00a0\u00a0\u00a0\u00a0 buffer.append(i).append(\",\r\n  \"); \u00a0\u00a0\u00a0\r\n  return buffer.toString(); \u00a0\r\n  } \u00a0 \u00a0\r\n  public static void main(String[] argumentos) { \u00a0\u00a0\u00a0\r\n  int n = Integer.parseInt(argumentos[0]); \u00a0\u00a0\u00a0 long t1, t2; \u00a0 \u00a0\u00a0\u00a0\r\n  t1 = System.currentTimeMillis(); \u00a0\u00a0\u00a0\r\n  metodo1(n); \u00a0\u00a0\u00a0\r\n  t2 = System.currentTimeMillis(); \u00a0\u00a0\u00a0\r\n  System.out.println(\"m\u00e9todo 1: \" + (t2 - t1) +\r\n  \"ms\"); \u00a0 \u00a0\u00a0\u00a0\r\n  t1 = System.currentTimeMillis(); \u00a0\u00a0\u00a0\r\n  metodo2(n); \u00a0\u00a0\u00a0\r\n  t2 = System.currentTimeMillis(); \u00a0\u00a0\u00a0\r\n  System.out.println(\"m\u00e9todo 2: \" + (t2 - t1) +\r\n  \"ms\"); \u00a0\r\n  } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "375"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/343.html": {
        "id": "343", 
        "definition": "El propio paquete java", 
        "description": "El propio paquete java.util proporciona algunas implementaciones de la interface List, sin perjuicio de que se puedan programar otras. Es una implementaci\u00f3n muy eficiente en cuanto a uso de memoria. Es r\u00e1pida en todas las operaciones, excepto en las que afectas a elementos intermedios: inserci\u00f3n y borrado. Puede decirse que es un \u201carray\u201d de tama\u00f1o din\u00e1mico. Es una implementaci\u00f3n basada en listas encadenadas. Esto ofrece una buena velocidad en operaciones sobre t\u00e9rminos intemedios (inserci\u00f3n y borrado) a cambio de ralentizar las dem\u00e1s operaciones. Similar a \u201cArrayList\u201d pero con m\u00e9todos sincronizados, lo que permite ser usada en programas concurrentes. Todo es m\u00e1s lento que con una ArrayList.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/341.html"
        ], 
        "title": "implementaciones est\u00e1ndar"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/150.html": {
        "definition": "Los m\u00e9todos, individualmente, tambi\u00e9n pueden ser gen\u00e9ricos", 
        "description": "Los m\u00e9todos, individualmente, tambi\u00e9n pueden ser gen\u00e9ricos. Se dice que un m\u00e9todo es gen\u00e9rico cuando sus argumentos y/o su resultado se refieren a un tipo formal que se deja como par\u00e1metro. Los siguientes ejemplos muestran un uso t\u00edpico: Para usar un m\u00e9todo gen\u00e9rico basta llamarlo con par\u00e1metros que casen con su definici\u00f3n. El propio compilador infiere el tipo (concreto) que debe asignar a T para que funcione correctamente. Al igual que las clases gen\u00e9ricas, los m\u00e9todos gen\u00e9ricos funcionan bastante deficientemente cuando hay que crear arrays.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/146.html"
        ], 
        "title": "m\u00e9todos gen\u00e9ricos", 
        "examples": [
            "\u00a0 <T> T primero(T[] datos) { \u00a0\u00a0\u00a0 for (T t: datos) \u00a0\u00a0\u00a0\u00a0\u00a0 if (t != null) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return t; \u00a0\u00a0\u00a0 return null; \u00a0 }", 
            "\u00a0 static <T> List<T> pareja(T t)\r\n  { \u00a0\u00a0\u00a0 List<T> resultado = \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new ArrayList<T>(); \u00a0\u00a0\u00a0 resultado.add(t); \u00a0\u00a0\u00a0 resultado.add(t); \u00a0\u00a0\u00a0 return resultado; \u00a0 }", 
            "String[] datos =  \u00a0\u00a0\u00a0 { null, \"uno\", \"dos\"\r\n  }; System.out.println(primero(datos));", 
            "List<String>\r\n  bora_bora = \u00a0\u00a0\u00a0 pareja(\"bora\");"
        ], 
        "id": "150"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/260.html": {
        "definition": "Ver \"N\u00fameros\"", 
        "concept": "palabra reservada", 
        "description": "Ver \"N\u00fameros\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/215.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "short", 
        "id": "260"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/172.html": {
        "definition": "D\u00edcese de la asignaci\u00f3n de un primer valor (valor inicial) a una variable", 
        "concept": "concepto", 
        "description": "D\u00edcese de la asignaci\u00f3n de un primer valor (valor inicial) a una variable. campos (de clase o de objeto) Pueden inicializarse expl\u00edcitamente junto a la declaraci\u00f3n o en el constructor. De lo contrario, reciben un valor por defecto que depende de su tipo: \u00b7 enteros: valor 0 \u00b7 reales: valor 0.0 \u00b7 booleanos: valor false \u00b7 caracteres: valor (char)0 \u00b7 objetos: valor null variables locales Deben ser inicializadas expl\u00edcitamente por el programa, bien junto a la declaraci\u00f3n, bien en alguna sentencia de asignaci\u00f3n posterior; pero siempre antes de ser utilizadas. De lo contrario, el compilador emite un mensaje de error. Las variables que recogen los argumentos de llamada a un m\u00e9todo son inicializadas con los valores de llamada.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Inicializaci\u00f3n", 
        "id": "172"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/372.html": {
        "definition": "Ver \u201c Pilas \u201d", 
        "concept": "concepto", 
        "description": "Ver \u201c Pilas \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "Stacks", 
        "id": "372"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/304.html": {
        "definition": "Ver \u201c List \u201d", 
        "concept": "clase", 
        "description": "Ver \u201c List \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "ArrayList<E>", 
        "id": "304"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/187.html": {
        "definition": "Java Runtime Environment", 
        "concept": "acr\u00f3nimo", 
        "description": "Java Runtime Environment. Entorno de ejecuci\u00f3n java. Paquete software que contiene herramientas para ejecutar programas java, previamente compilados. Incluye un int\u00e9rprete (java) y bibliotecas de apoyo.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/181.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "JRE", 
        "id": "187"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/4.html": {
        "definition": "Hay m\u00e9todos abstractos y clases abstractas", 
        "concept": "palabra reservada", 
        "description": "Hay m\u00e9todos abstractos y clases abstractas. Los m\u00e9todos abstractos deben estar en clases abstractas. Las clases abstractas pueden tener m\u00e9todos abstractos.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/5.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/6.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/7.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/8.html"
        ], 
        "title": "abstract", 
        "id": "4"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/224.html": {
        "id": "224", 
        "definition": "Ver \" Desbordamiento \"", 
        "description": "Ver \" Desbordamiento \".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Overflow"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/214.html": {
        "definition": "Es una referencia (a un objeto) especial", 
        "concept": "palabra reservada", 
        "description": "Es una referencia (a un objeto) especial. Cuando una variable no apunta a ning\u00fan objeto, se dice que contiene la referencia \u201cnull\u201d que es la referencia que no apunta a nada. Cuando un campo que referencia a objetos se declara pero a\u00fan no se ha inicializado, contiene la referencia \u201cnull\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "null", 
        "id": "214"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/165.html": {
        "definition": "Java define el operador de igualdad sobre todo tipo de datos Tipos primitivos devuelve TRUE si los valores de a y b son id\u00e9nticos", 
        "concept": "==", 
        "description": "Java define el operador de igualdad sobre todo tipo de datos Tipos primitivos devuelve TRUE si los valores de a y b son id\u00e9nticos. OJO: La igualdad est\u00e1 muy bien definida para enteros, booleanos y caracteres; pero deja que desear en el caso de valores reales. Comparar dos reales es chequear que son id\u00e9nticos hasta el \u00faltimo decimal, lo que puede dar resultados extra\u00f1os si hay errores de redondeo. En el caso de n\u00fameros reales es mejor escribir c\u00f3digo del tipo Math.abs(a -b) < ERROR donde ERROR especifica la precisi\u00f3n de la comparaci\u00f3n. Objetos, incluidos arrays devuelve TRUE si se refieren al mismo objeto. Si interesa comparar el contenido de los objetos, conviene recurrir a un m\u00e9todo espec\u00edfico que, por convenio, se suele denominar \u201cequals\u201d. En el siguiente ejemplo, dos cartas se consideran \"equals\" si son del mismo palo y del mismo valor. Ver \u201cequals()\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/103.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Igualdad", 
        "examples": [
            "public enum Palo { Bastos,\r\n  Copas, Espadas, Oros }", 
            "public class\r\n  Carta { \u00a0 private Palo\r\n  palo; \u00a0 private int valor; \u00a0 \u00a0 public Carta(Palo palo, int valor) { \u00a0\u00a0\u00a0 this.palo = palo; \u00a0\u00a0\u00a0 this.valor = valor; \u00a0 } \u00a0 \u00a0 @Override \u00a0 public boolean equals(Object x) { \u00a0\u00a0\u00a0 if (x == this) return true; \u00a0\u00a0\u00a0 if (x == null) return true; \u00a0\u00a0\u00a0 if (x.getClass() != this.getClass())\r\n  return false; \u00a0\u00a0\u00a0 Carta carta=\r\n  (Carta)x; \u00a0\u00a0\u00a0 return this.palo == carta.palo && this.valor == carta.valor; \u00a0 } \u00a0 \u00a0 @Override \u00a0 public int hashCode() { \u00a0\u00a0\u00a0 return palo.ordinal() ^ valor; \u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "public\r\n  class TestCarta { \u00a0 \u00a0\u00a0\u00a0 public static void main(String[] args) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Carta c1 =\r\n  new Carta(Palo.Copas, 1); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Carta c2 = new Carta(Palo.Copas, 1); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Carta c3 = new Carta(Palo.Copas, 2); \u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\"c1 == c1 ->\r\n  \" + (c1 == c1)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\"c1 == c2\r\n  -> \" + (c1 == c2)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(\"c1.equals(c2) -> \" + c1.equals(c2)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\"c1 == c3\r\n  -> \" + (c1 == c3)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(\"c1.equals(c3) -> \" + c1.equals(c3)); \u00a0\u00a0\u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "c1 == c1 -> true c1 == c2 -> false c1.equals(c2) -> true c1 == c3 -> false c1.equals(c3) -> false"
        ], 
        "id": "165"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/359.html": {
        "id": "359", 
        "definition": "Es f\u00e1cil escribir y leer de ficheros, lo que hace que Properties se utilice frecuentemente para tener ficheros externos de configuraci\u00f3n", 
        "description": "Es f\u00e1cil escribir y leer de ficheros, lo que hace que Properties se utilice frecuentemente para tener ficheros externos de configuraci\u00f3n. java.util.Properties lee bytes lo escrito con store(OutputStream) lee caracteres lo escrito con store(Reader) lee un fichero en XML lo escrito con storeToXML(OutputStream, \u2026) escribe en un fichero de bytes escribe en un fichero de caracteres escribe en un fichero XML escribe en un fichero XML utilizando una codificaci\u00f3n expl\u00edcita Los formatos son bastante evidentes:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/357.html"
        ], 
        "title": "Ficheros"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/329.html": {
        "definition": "Implementaci\u00f3n de Map<K, V> que se centra en la rapidez de ejecuci\u00f3n", 
        "concept": "clase", 
        "description": "Implementaci\u00f3n de Map<K, V> que se centra en la rapidez de ejecuci\u00f3n. Ver \u201c Map \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "HashMap<K, V>", 
        "id": "329"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/308.html": {
        "definition": "Los m\u00e9todos que usan un campo como argumento, recurren a una serie de constantes definidas en la clase Calendar", 
        "description": "Los m\u00e9todos que usan un campo como argumento, recurren a una serie de constantes definidas en la clase Calendar. Quiz\u00e1s lo mejor es verlo con un ejemplo: N\u00f3tese que los meses se cuentan desde 0 (enero es el 0, marzo es el 2) y que el d\u00eda de la semana comienza en domingo (domingo es el 0, viernes es el 6).", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/307.html"
        ], 
        "title": "Campos", 
        "examples": [
            "public static void muestraCampos() { \u00a0\u00a0 Calendar ahora =\r\n  Calendar.getInstance(); \u00a0\u00a0 System.out.println(ahora.getTime()); \u00a0\u00a0 System.out.println(\"a\u00f1o:\r\n  \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0ahora.get(Calendar.YEAR)); \u00a0\u00a0 System.out.println(\"mes:\r\n  \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0ahora.get(Calendar.MONTH)); \u00a0\u00a0 System.out.println(\"d\u00eda del mes: \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ahora.get(Calendar.DAY_OF_MONTH)); \u00a0\u00a0 System.out.println(\"d\u00eda del a\u00f1o: \" +  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ahora.get(Calendar.DAY_OF_YEAR)); \u00a0\u00a0 System.out.println(\"d\u00eda de la semana:\r\n  \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ahora.get(Calendar.DAY_OF_WEEK)); \u00a0\u00a0 System.out.println(\"hora: \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  ahora.get(Calendar.HOUR)); \u00a0\u00a0 System.out.println(\"hora del d\u00eda:\r\n  \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ahora.get(Calendar.HOUR_OF_DAY)); \u00a0\u00a0 System.out.println(\"minutos:\r\n  \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0ahora.get(Calendar.MINUTE)); \u00a0\u00a0 System.out.println(\"segundos:\r\n  \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0ahora.get(Calendar.SECOND)); \u00a0\u00a0 System.out.println(\"milisegundos:\r\n  \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0ahora.get(Calendar.MILLISECOND)); }\u00a0\u00a0\u00a0 ", 
            "Fri Mar 26 16:10:14 CET\r\n  2010 a\u00f1o: 2010 mes: 2 d\u00eda del mes: 26 d\u00eda del a\u00f1o: 85 d\u00eda de la semana: 6 hora: 4 hora del d\u00eda: 16 minutos: 10 segundos: 14 milisegundos: 310"
        ], 
        "id": "308"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/337.html": {
        "definition": "Es f\u00e1cil construir clases que se puedan usar como iteradores, bastando llevar cuenta interna de d\u00f3nde se est\u00e1 en cada momento", 
        "description": "Es f\u00e1cil construir clases que se puedan usar como iteradores, bastando llevar cuenta interna de d\u00f3nde se est\u00e1 en cada momento. El ejemplo siguiente proporciona iteradores sobre arrays. Una vez tenemos el iterador se puede usar de forma compacta O de forma m\u00e1s extendida:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/334.html"
        ], 
        "title": "ejemplo: iterador sobre un array", 
        "examples": [
            "import java.util.*; \u00a0 public class IteraArray<T> \u00a0\u00a0\u00a0\r\n  implements Iterator<T> { \u00a0\r\n  private T[] objetos; \u00a0\r\n  private int posicion = 0; \u00a0 \u00a0\r\n  public IteraArray (T[] objetos) { \u00a0\u00a0\u00a0\r\n  this.objetos = (T[]) new Object[objetos.length]; \u00a0\u00a0\u00a0\r\n  System.arraycopy(objetos, 0, this.objetos,\r\n  0, objetos.length); \u00a0\u00a0\u00a0 posicion = 0; \u00a0\r\n  } \u00a0 \u00a0\r\n  public boolean hasNext() { \u00a0\u00a0\u00a0\r\n  return posicion < objetos.length; \u00a0\r\n  } \u00a0 \u00a0\r\n  public T next() { \u00a0\u00a0\u00a0\r\n  if (posicion < objetos.length) \u00a0\u00a0\u00a0\u00a0\u00a0 return objetos[posicion++]; \u00a0\u00a0\u00a0\r\n  throw new NoSuchElementException(); \u00a0\r\n  } \u00a0 \u00a0\r\n  public void remove() { \u00a0\u00a0\u00a0\r\n  throw new UnsupportedOperationException(); \u00a0\r\n  } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "337"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/299.html": {
        "id": "299", 
        "definition": "Ver \u201c campos de clase \u201d", 
        "description": "Ver \u201c campos de clase \u201d. Ver \u201c \u00e1mbitos de visibilidad \u201d. Ver \u201c creaci\u00f3n y destrucci\u00f3n \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/289.html"
        ], 
        "title": "de objeto"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/282.html": {
        "definition": "D\u00edcese de los tipos que quedan como par\u00e1metros en la definici\u00f3n de tipos y m\u00e9todos gen\u00e9ricos", 
        "description": "D\u00edcese de los tipos que quedan como par\u00e1metros en la definici\u00f3n de tipos y m\u00e9todos gen\u00e9ricos. Ver \u201cGen\u00e9ricos\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/146.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "168", 
        "alternative": "Tipos formales ", 
        "id": "282"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/342.html": {
        "definition": "En lo que sigue, un elemento \u201cx\u201d es \u201cequals\u201d a otro elemento \u201cy\u201d s\u00ed y s\u00f3lo si \u201cx", 
        "description": "En lo que sigue, un elemento \u201cx\u201d es \u201cequals\u201d a otro elemento \u201cy\u201d s\u00ed y s\u00f3lo si \u201cx.equals(y) == true\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/341.html"
        ], 
        "title": "m\u00e9todos de la interface", 
        "examples": [
            "boolean add(E elemento)  void add(int posicion, E elemento)  void clear()  boolean contains(E elemento)  boolean equals(Object x)  E get(int posicion)  int indexOf(E elemento)  boolean isEmpty()  Iterator<E> iterator()  E remove(int posicion)  boolean remove(E elemento)  E set(int posicion, E elemento)  int size()  Object[] toArray() "
        ], 
        "id": "342"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/231.html": {
        "id": "231", 
        "definition": "Es relativamente frecuente que las organizaciones usen su dominio de correo electr\u00f3nico como denominaci\u00f3n de los paquetes que ofrecen al p\u00fablico", 
        "description": "Es relativamente frecuente que las organizaciones usen su dominio de correo electr\u00f3nico como denominaci\u00f3n de los paquetes que ofrecen al p\u00fablico. Dado que las direcciones de correo son \u00fanicas, los paquetes tambi\u00e9n lo ser\u00e1n.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/228.html"
        ], 
        "title": "nombre universales"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/215.html": {
        "definition": "Java maneja directamente n\u00fameros enteros y reales (de coma flotante; en ingl\u00e9s floating point)", 
        "concept": "concepto", 
        "description": "Java maneja directamente n\u00fameros enteros y reales (de coma flotante; en ingl\u00e9s floating point).", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/216.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/217.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/410.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/218.html"
        ], 
        "title": "N\u00fameros", 
        "id": "215"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/93.html": {
        "definition": "Podemos hacer que una serie de sentencias se ejecuten o no dependiendo de una condici\u00f3n (booleana)", 
        "concept": "concepto", 
        "description": "Podemos hacer que una serie de sentencias se ejecuten o no dependiendo de una condici\u00f3n (booleana). Ver \u201c if \u201d. Ver \u201c switch \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/161.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/275.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Ejecuci\u00f3n condicional", 
        "alternative": "conditional execution", 
        "id": "93"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/330.html": {
        "definition": "Implementaci\u00f3n de Set<E> que se centra en la rapidez de ejecuci\u00f3n", 
        "concept": "clase", 
        "description": "Implementaci\u00f3n de Set<E> que se centra en la rapidez de ejecuci\u00f3n. Ver \u201c Set \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "HashSet<E>", 
        "id": "330"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/152.html": {
        "definition": "M\u00e9todo est\u00e1ndar disponible en todo los objetos", 
        "concept": "m\u00e9todo", 
        "description": "M\u00e9todo est\u00e1ndar disponible en todo los objetos. Devuelve un objeto de tipo Class, que permite saber cosas sobre la clase de objeto que estamos manejando. Aunque la clase Class proporciona much\u00edsimos m\u00e9todos, se recogen a continuaci\u00f3n solamente algunos de los m\u00e1s habitualmente utilizados:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "getClass", 
        "examples": [
            "package\r\n  PET; \u00a0 public\r\n  class Ejemplo { \u00a0\u00a0\u00a0 public static void main(String[] args) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Ejemplo x =\r\n  new Ejemplo(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Class tipo = x.getClass(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\"toString() =\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 tipo.toString()); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(\"getSimpleName() =\u00a0\u00a0\u00a0 \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  tipo.getSimpleName()); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\"getName()\r\n  =\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 tipo.getName()); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(\"getCanonicalName() = \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 tipo.getCanonicalName()); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\"getPackage()\r\n  =\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  tipo.getPackage()); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(\"getSuperclass() =\u00a0\u00a0\u00a0 \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  tipo.getSuperclass()); \u00a0\u00a0\u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "toString()\r\n  =\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 class PET.Ejemplo getSimpleName() =\u00a0\u00a0\u00a0 Ejemplo getName() =\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 PET.Ejemplo getCanonicalName() = PET.Ejemplo getPackage() =\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 package PET getSuperclass() =\u00a0\u00a0\u00a0 class\r\n  java.lang.Object"
        ], 
        "id": "152"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/312.html": {
        "definition": "Las comparaciones entre String se limitan a usar el orden num\u00e9rico de los c\u00f3digos Unicode, lo que a veces choca con el orden al que estamos acostumbrados en los diccionarios, el orden lexicogr\u00e1fico, que depende de cada idioma", 
        "concept": "clase", 
        "description": "Las comparaciones entre String se limitan a usar el orden num\u00e9rico de los c\u00f3digos Unicode, lo que a veces choca con el orden al que estamos acostumbrados en los diccionarios, el orden lexicogr\u00e1fico, que depende de cada idioma. El siguiente programa muestra como usar la clase java.text.Collator para comparar cadenas con letras may\u00fasculas, min\u00fasculas y caracteres acentuados:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "Collator", 
        "examples": [
            "import java.text.Collator; \u00a0 public class Comparador { \u00a0\r\n  private static void compara(String s1, String s2) { \u00a0\u00a0\u00a0\r\n  Collator collator = Collator.getInstance(); \u00a0\u00a0\u00a0\r\n  System.out.println(\"compareTo -> \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 s1.compareTo(s2)); \u00a0\u00a0\u00a0\r\n  System.out.println(\"collator\u00a0\r\n  -> \" + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 collator.compare(s1, s2)); \u00a0\r\n  } \u00a0 \u00a0\r\n  public static void main(String[] argumentos) { \u00a0\u00a0\u00a0\r\n  compara(\"I\u00f1aki\",\r\n  \"alberto\"); \u00a0\u00a0\u00a0\r\n  compara(\"I\u00f1aki\", \"Iv\u00e1n\"); \u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "$ java Comparador compareTo -> -24 collator\u00a0 -> 1 compareTo -> 123 collator\u00a0 -> -1"
        ], 
        "id": "312"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/241.html": {
        "definition": "Un programa o aplicaci\u00f3n est\u00e1 formado por una serie de clases con el objetivo de resolver un problema", 
        "concept": "concepto", 
        "description": "Un programa o aplicaci\u00f3n est\u00e1 formado por una serie de clases con el objetivo de resolver un problema. Un programa aplica un algoritmo para transformar los valores iniciales (datos de entrada) en valores finales (resultados o datos de salida). En Java un programa arranca ejecutando el m\u00e9todo \u201cmain\u201d de alguna clase. A partir de este m\u00e9todo se crean los objetos pertinentes y se realizan las transformaciones sobre los valores.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Programa", 
        "alternative": "program", 
        "id": "241"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/229.html": {
        "id": "229", 
        "definition": "Los nombres de las clases deben ser \u00fanicos dentro del mismo paquete", 
        "description": "Los nombres de las clases deben ser \u00fanicos dentro del mismo paquete. Si en un paquete x existe una clase A y en otro paquete y existe otra clase A, para romper la ambig\u00fcedad diremos que nos referimos a \u201cx.A\u201d o \u201cy.A\u201d, respectivamente. A la concatenaci\u00f3n del nombre del paquete y el nombre de la clase se le denomina \u201cnombre can\u00f3nico de la clase.\u201d En una aplicaci\u00f3n Java es imprescindible que no haya dos clases con el mismo nombre can\u00f3nico.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/228.html"
        ], 
        "title": "nombres can\u00f3nicos"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/9.html": {
        "definition": "Ver \u201c M\u00e9todo / getters \u201d", 
        "concept": "concepto", 
        "description": "Ver \u201c M\u00e9todo / getters \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/205.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Accesor", 
        "alternative": "getter", 
        "id": "9"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/278.html": {
        "definition": "Cuando un queremos llamar a un constructor desde otro constructor, usaremos this:", 
        "description": "Cuando un queremos llamar a un constructor desde otro constructor, usaremos this:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/276.html"
        ], 
        "title": "Uso de this para acceder a constructores de objetos", 
        "examples": [
            "class Elipse { \u00a0 private double ancho, alto; \u00a0 \u00a0 Elipse(double alto, double ancho) { \u00a0\u00a0\u00a0 this.alto=\r\n  alto; \u00a0\u00a0\u00a0\r\n  this.ancho= ancho; \u00a0 } \u00a0 \u00a0\r\n  // construye un c\u00edrculo \u00a0\r\n  Elipse(double diametro) { \u00a0\u00a0\u00a0\r\n  this(diametro, diametro); \u00a0 } \u00a0 \u00a0\r\n  // construye un c\u00edrculo de di\u00e1metro 10 \u00a0\r\n  Elipse() { \u00a0\u00a0\u00a0\r\n  this(10); \u00a0 }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "278"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/30.html": {
        "definition": "Se denomina bloque a un conjunto de sentencias entre llaves", 
        "concept": "concepto", 
        "description": "Se denomina bloque a un conjunto de sentencias entre llaves. Un bloque define un \u00c1mbito : \u00b7 las Variables que se declaran dentro de un bloque no existen fuera del bloque: aparecen al entrar \u201c{\u201c y desaparecen al terminar \u201c}\u201d \u00b7 si existiera una variable del mismo nombre fuera del bloque, queda oculta por la interna; es decir, es inaccesible Muchas construcciones sint\u00e1cticas de Java se basan en bloques: \u00b7 declaraci\u00f3n de interfaces, Clases y tipos enumerados \u00b7 declaraci\u00f3n de m\u00e9todos \u00b7 fragmentos de sentencias condicionales: if, while etc.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/12.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/289.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/176.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/52.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/98.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/161.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/302.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Bloque de sentencias", 
        "id": "30"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/381.html": {
        "definition": "Conjuntos en donde los elementos se recorren en orden", 
        "concept": "clase", 
        "description": "Conjuntos en donde los elementos se recorren en orden. Ver \u201c Set \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "TreeSet<E>", 
        "id": "381"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/248.html": {
        "definition": "Actividad por la que vamos modificando el c\u00f3digo fuente, sin modificar su funcionamiento, pero buscando una mejor legibilidad o estructuraci\u00f3n", 
        "concept": "concepto", 
        "description": "Actividad por la que vamos modificando el c\u00f3digo fuente, sin modificar su funcionamiento, pero buscando una mejor legibilidad o estructuraci\u00f3n. Algunas actividades de refactoring son evidentes: \u00b7 renombrar variables para que su nombre refleje intuitivamente su contenido. \u00b7 renombrar m\u00e9todos para que su nombre refleje intuitivamente su cometido. \u00b7 renombrar clases para que su nombre refleje intuitivamente su esencia. \u00b7 reordenar las clases en paquetes para que la estructura agrupe funciones de detalle. Ver [http://www.refactoring.com/].", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/249.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/250.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/251.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/252.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/253.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/254.html"
        ], 
        "title": "Refactoring", 
        "id": "248"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/379.html": {
        "definition": "Conecta con la salida est\u00e1ndar de la aplicaci\u00f3n, permitiendo escribir en ella", 
        "description": "Conecta con la salida est\u00e1ndar de la aplicaci\u00f3n, permitiendo escribir en ella. Lo m\u00e1s t\u00edpico imprime la representaci\u00f3n textual de \u201cx\u201d; donde \u201cx\u201d es un valor de alg\u00fan tipo primitivo, o un objeto, en cuyo caso se imprime x.toString(). hace lo mismo que \u201cprint(x)\u201d pero, adem\u00e1s, cambia a la l\u00ednea siguiente. llama a \"formatter\", imprimiento el resultado.. Normalmente lo que se escribe aparece en la pantalla Desde el sistema operativo, es f\u00e1cil para el usuario redirigir la salida a un fichero y tambi\u00e9n es posible cambiar la salida desde dentro del programa La definici\u00f3n en la clase System es as\u00ed: Ver \" System.err \".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "System.out", 
        "examples": [
            "public class SystemOut { \u00a0\r\n  public static void main(String[] argumentos) { \u00a0\u00a0\u00a0\r\n  String nombre =\"Aureliano\r\n  Buend\u00eda\"; \u00a0\u00a0\u00a0\r\n  System.out.print(\"de nombre: \"); \u00a0\u00a0\u00a0\r\n  System.out.println(nombre); \u00a0 } }"
        ], 
        "id": "379"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/116.html": {
        "id": "116", 
        "definition": "Si una excepci\u00f3n se lanza en dentro de un m\u00e9todo, puede que este la capture o que no", 
        "description": "Si una excepci\u00f3n se lanza en dentro de un m\u00e9todo, puede que este la capture o que no. Si no la captura debe informar en su cabecera de que puede ser lanzada. Si un m\u00e9todo propaga una excepci\u00f3n, esta deber\u00e1 ser considerada en el c\u00f3digo llamante que, a su vez, puede capturarla o retransmitirla Se debe informar expl\u00edcitamente en la cabecera del m\u00e9todo, salvo que la excepci\u00f3n sea subclase de java.lang.Error o de java.lang.RuntimeException, en cuyo caso se puede informar o no decir nada. Ver \"Exception\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/117.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Excepciones"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/84.html": {
        "definition": "En general se refiere a todo aquel material que complementa al c\u00f3digo ayudando a su comprensi\u00f3n por las personas", 
        "concept": "concepto", 
        "description": "En general se refiere a todo aquel material que complementa al c\u00f3digo ayudando a su comprensi\u00f3n por las personas. Es b\u00e1sico para poder responsabilizarse de un programa pues permite entenderlo para reparar defectos o mejorarlo. En particular se refiere a una forma especial de comentarios java, entremezclados con el c\u00f3digo, y que se caracterizan por \u00b7 comenzar con la cadena \u201c/**\u201d \u00b7 terminar con la cadena \u201c*/\u201d Estos comentarios no pueden anidarse, ni entre s\u00ed, ni con comentarios de tipo /* ... */. El compilador se limita a detectar la terminaci\u00f3n, sin preocuparse de si hay varios comentarios empezados. \u00b7 incluir algunas claves \u201c@etiqueta\u201d que se comentan m\u00e1s abajo. La forma estructurada de estos comentarios permiten un tratamiento especial \u00b7 los entornos de desarrollo resaltan en colores su empleo \u00b7 herramientas como javadoc permiten generar p\u00e1ginas HTML (para navegadores) Estos comentarios se aplican a clases, campos y m\u00e9todos.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Documentaci\u00f3n", 
        "examples": [
            "/** \u00a0\u00a0 * Parte descriptiva. \u00a0\u00a0 * Que puede consistir de varias frases o\r\n  p\u00e1rrafos. \u00a0\u00a0 * Se puede escribir con formato HTML. \u00a0\u00a0 * \u00a0\u00a0 * @etiqueta texto espec\u00edfico de la\r\n  etiqueta \u00a0\u00a0 */", 
            "ejemplo de documentaci\u00f3n\r\n  de clase", 
            "\u00a0 /** \u00a0* Ejemplo: c\u00edrculos. \u00a0* \u00a0* @author Jos\u00e9 A. Ma\u00f1as \u00a0* @version 24.9.2008 \u00a0*/ public\r\n  class Circulo { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "ejemplo de documentaci\u00f3n de\r\n  m\u00e9todo", 
            "\u00a0 \u00a0\r\n  /** \u00a0\u00a0\r\n  * Intersecci\u00f3n de dos rectas. \u00a0\u00a0\r\n  * \u00a0\u00a0\r\n  * @param\u00a0\u00a0\u00a0\u00a0 recta1\u00a0\u00a0\u00a0 una recta. \u00a0\u00a0\r\n  * @param\u00a0\u00a0\u00a0\u00a0 recta2\u00a0\u00a0\u00a0 otra recta. \u00a0\u00a0\r\n  * @return\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  punto en el que las rectas se cruzan. \u00a0\u00a0\r\n  * @exception Paralelas si las rectas son paralelas o\r\n  coincidentes. \u00a0\u00a0\r\n  * @see\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Punto \u00a0\u00a0\r\n  */ \u00a0\r\n  public Punto interseccion(Recta recta1, Recta recta2) \u00a0\u00a0\u00a0\u00a0\u00a0 throws Paralelas { \u00a0\u00a0\u00a0\r\n  ... \u00a0\r\n  } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "alternative": "documentation", 
        "id": "84"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/305.html": {
        "definition": "Esta clase proporciona m\u00faltiples m\u00e9todos para manipular Arrays sobre m\u00faltiples tipos de datos T: primitivos (enteros, reales, caracteres y booleanos) y objetos", 
        "concept": "clase", 
        "description": "Esta clase proporciona m\u00faltiples m\u00e9todos para manipular Arrays sobre m\u00faltiples tipos de datos T: primitivos (enteros, reales, caracteres y booleanos) y objetos. Llena el array con el valor indicado: todos los elementos iguales. Chequea si los arrays son id\u00e9nticos, comprobando valores primitivos (==) y referencias (con equals). Chequea si los arrays son id\u00e9nticos, comprobando valores primitivos (==) y referencias (con equals). Adem\u00e1s, si el array es multidimensional, profundiza en las sucesivas dimensiones. Genera una cadena para impresi\u00f3n. Genera una cadena para impresi\u00f3n, incluso si se trata de un array multidimensional. Genera una copia de los datos. Si n es mayor que datos.length, rellena con null. Si n es menor que datos.length, se ignora el exceso (es decir, trunca). Copia un segmento de los datos. Busca en qu\u00e9 posici\u00f3n del array datos se encuentra la clave dada. El array debe estar ordenado. Ordena el array. Ordena el array entre las posiciones indicadas.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "Arrays", 
        "id": "305"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/28.html": {
        "id": "28", 
        "definition": "La notaci\u00f3n \"++\" y \"\u2014\", aparte de incrementar y decrementar, respectivamente, el valor conenido en la variable, se puede usar como una expresi\u00f3n en s\u00ed misma, devolviendo bien el valor antes de la operaci\u00f3n, o el valor despu\u00e9s de la operaci\u00f3n", 
        "description": "La notaci\u00f3n \"++\" y \"\u2014\", aparte de incrementar y decrementar, respectivamente, el valor conenido en la variable, se puede usar como una expresi\u00f3n en s\u00ed misma, devolviendo bien el valor antes de la operaci\u00f3n, o el valor despu\u00e9s de la operaci\u00f3n. Veamos un ejemplo: pre- y post- / incremento y decremento programa imprime valor de \"x\" int x = 0; System.out.println( x++ ); 0 de 0 pasa a 1 int x = 0; System.out.println( ++x ); 1 de 0 pasa a 1 int x = 0; System.out.println( x-- ); 0 de 0 pasa a \u20131 int x = 0; System.out.println( --x ); -1 de 0 pasa a -1", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/26.html"
        ], 
        "title": "Incrementos y decrementos"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/87.html": {
        "definition": "La actividad en la que el programador crea o modifica el c\u00f3digo fuente", 
        "concept": "concepto", 
        "description": "La actividad en la que el programador crea o modifica el c\u00f3digo fuente. Se suele utilizar alg\u00fan entorno integrado de desarrollo (IDE \u2013 Integrated Development Environment), aunque en realidad vale cualquier editor de texto.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Edici\u00f3n", 
        "alternative": "edition", 
        "id": "87"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/351.html": {
        "definition": "", 
        "description": "", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/347.html"
        ], 
        "title": "ejemplos de uso", 
        "examples": [
            "\u00a0 Map<String, String> mapa\r\n  =  \u00a0\u00a0\u00a0\u00a0\u00a0 new HashMap<String, String>(); \u00a0 \u00a0 mapa.put(\"uno\",\r\n  \"one\"); \u00a0 mapa.put(\"dos\",\r\n  \"two\"); \u00a0 mapa.put(\"tres\",\r\n  \"three\"); \u00a0 mapa.put(\"cuatro\",\r\n  \"four\"); \u00a0 mapa.put(\"tres\",\r\n  \"33\"); \u00a0\r\n  System.out.println(mapa.size()); \u00a0 for (String clave:\r\n  mapa.keySet()) { \u00a0\u00a0\u00a0\u00a0\u00a0 String valor =\r\n  mapa.get(clave); \u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(clave\r\n  + \" -> \" + valor); \u00a0 }", 
            "\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 4 cuatro -> four tres -> 33 uno -> one dos -> two", 
            "Map<String, String> mapa =  \u00a0\u00a0\u00a0\u00a0\u00a0 new TreeMap<String, String>(); \u00a0 \u00a0 mapa.put(\"uno\",\r\n  \"one\"); \u00a0 mapa.put(\"dos\",\r\n  \"two\"); \u00a0 mapa.put(\"tres\",\r\n  \"three\"); \u00a0 mapa.put(\"cuatro\",\r\n  \"four\"); \u00a0 mapa.put(\"tres\",\r\n  \"33\"); \u00a0\r\n  System.out.println(mapa.size()); \u00a0 for (String clave: mapa.keySet())\r\n  { \u00a0\u00a0\u00a0\u00a0\u00a0 String valor =\r\n  mapa.get(clave); \u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(clave\r\n  + \" -> \" + valor); \u00a0 }", 
            "\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 4 cuatro -> four dos -> two tres -> 33 uno -> one", 
            "Map<String, String> mapa =  \u00a0\u00a0\u00a0\u00a0\u00a0 new LinkedHashMap<String, String>(); \u00a0 \u00a0 mapa.put(\"uno\",\r\n  \"one\"); \u00a0 mapa.put(\"dos\",\r\n  \"two\"); \u00a0 mapa.put(\"tres\",\r\n  \"three\"); \u00a0 mapa.put(\"cuatro\",\r\n  \"four\"); \u00a0 mapa.put(\"tres\",\r\n  \"33\"); \u00a0\r\n  System.out.println(mapa.size()); \u00a0 for (String clave:\r\n  mapa.keySet()) { \u00a0\u00a0\u00a0\u00a0\u00a0 String valor =\r\n  mapa.get(clave); \u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(clave\r\n  + \" -> \" + valor); \u00a0 }", 
            "\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 4 uno -> one dos -> two tres -> 33 cuatro -> four"
        ], 
        "id": "351"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/174.html": {
        "definition": "Ver \"N\u00fameros\"", 
        "concept": "palabra reservada", 
        "description": "Ver \"N\u00fameros\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/215.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "int", 
        "id": "174"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/341.html": {
        "definition": "Dentro de las colecciones de datos que java proporciona en su biblioteca b\u00e1sica, esta interfaz recoge las secuencias de datos en las que \u00b7 se respeta el orden en el que se insertan elementos \u00b7 pueden haber elementos duplicados \u00b7 el tama\u00f1o de la lista se adapta din\u00e1micamente a lo que haga falta El resultado es una especie de array de tama\u00f1o adaptable", 
        "concept": "interface", 
        "description": "Dentro de las colecciones de datos que java proporciona en su biblioteca b\u00e1sica, esta interfaz recoge las secuencias de datos en las que \u00b7 se respeta el orden en el que se insertan elementos \u00b7 pueden haber elementos duplicados \u00b7 el tama\u00f1o de la lista se adapta din\u00e1micamente a lo que haga falta El resultado es una especie de array de tama\u00f1o adaptable.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/342.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/343.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/344.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/345.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/346.html"
        ], 
        "title": "List<E>", 
        "id": "341"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/23.html": {
        "id": "23", 
        "definition": "Se pueden generar directamente valores que son arrays, tanto para cargar una variable como para pas\u00e1rselos a un m\u00e9todo (como argumento de llamada):", 
        "description": "Se pueden generar directamente valores que son arrays, tanto para cargar una variable como para pas\u00e1rselos a un m\u00e9todo (como argumento de llamada):", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/15.html"
        ], 
        "title": "valores de tipo array"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/294.html": {
        "definition": "Se dice de las variables que se declaran \u201cfinal\u201d", 
        "description": "Se dice de las variables que se declaran \u201cfinal\u201d. Pueden haber campos invariantes. Se caracterizan porque hay que darles un valor inicial durante la construcci\u00f3n del objeto, bien en la misma l\u00ednea de declaraci\u00f3n, bien en el constructor. Una vez asignado un valor, este no puede cambiarse nunca jam\u00e1s. Tambi\u00e9n pueden ser 'final' variables locales o par\u00e1metros cuyo valor no se puede modificar tras la asignaci\u00f3n inicial. Ver \u201cConstantes\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/67.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/289.html"
        ], 
        "title": "invariantes", 
        "examples": [
            "public\r\n  class Circulo { \u00a0 private final double radio; \u00a0 \u00a0 public\r\n  Circulo (double radio) { \u00a0\u00a0\u00a0 this.radio =\r\n  radio;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // queda fijo para\r\n  siempre \u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "\u00a0\u00a0\u00a0 public int getFilaLibre(final int columna) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int fila = FILAS - 1; fila >=\r\n  0; fila--) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (array[columna][fila] == null)\r\n  { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return fila; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return -1; \u00a0\u00a0\u00a0 }", 
            "\u00a0\u00a0\u00a0 public Ficha getFicha(Posicion posicion)\r\n  { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 final int columna =\r\n  posicion.getColumna(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 final int fila =\r\n  posicion.getFila(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return array[columna][fila]; \u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "294"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/332.html": {
        "definition": "Adem\u00e1s de proporcionar un objeto para contener N\u00fameros enteros, aporta algunos m\u00e9todos interesantes", 
        "concept": "clase", 
        "description": "Adem\u00e1s de proporcionar un objeto para contener N\u00fameros enteros, aporta algunos m\u00e9todos interesantes", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "Integer", 
        "id": "332"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/216.html": {
        "definition": "Java maneja diferentes rangos de valores: byte, short, int y long", 
        "description": "Java maneja diferentes rangos de valores: byte, short, int y long. Lo normal, mientras no se indique lo contrario, es trabajar con enteros int. Notaci\u00f3n En c\u00f3digo fuente los enteros se representan usando una serie de caracteres y una base de representaci\u00f3n. Normalmente se usan n\u00fameros decimales (base 10) que emplean los caracteres '0', '1', '2', '3', '4', '5', '6', '7', '8' y '9'. El valor de un n\u00famero se calcula multiplicando cada car\u00e1cter por la potencia de 10 correspondiente a su posici\u00f3n. Ejemplo: 2005 \u2192 2 103 + 0 102 + 0 101 + 5 100 En general: cn cn-1 ... c1 c0 \u2192 cn 10n + cn-1 10n-1 + ... + c1 101 + c0 100 Esta notaci\u00f3n se puede generalizar para trabajar en cualquier base, siendo frecuentes los n\u00fameros en notaci\u00f3n binaria (b = 2), octal (b = 8) y hexadecimal (b = 16): cn cn-1 ... c1 c0 \u2192 cn bn + cn-1 bn-1 + ... + c1 b1 + c0 b0 En notaci\u00f3n binaria, b = 2, y se usan los d\u00edgitos '0' y '1'. En notaci\u00f3n octal, b = 8, y se usan los d\u00edgitos del '0' al '7'. En notaci\u00f3n hexadecimal, b = 16, y se usan los d\u00edgitos del '0' al '9' y las letras de la 'a' a la 'f'. De forma que 'a' (o 'A') vale 10; 'b' vale 11 y as\u00ed sucesivamente hasta la 'f' que vale '15'. A veces se usan letras min\u00fasculas, a veces may\u00fasculas: es indiferente. El siguiente c\u00f3digo permite imprimir un valor num\u00e9rico en diferentes notaciones: Java permite escribir en el c\u00f3digo fuente n\u00fameros: \u00b7 en notaci\u00f3n decimal: como estamos acostumbrados (ej. 2001) \u00b7 en notaci\u00f3n octal: empezando por '0' (ej. 03721) \u00b7 en notaci\u00f3n hexadecimal: empezando por '0x' (ej. 0x7d1) Si no se dice nada, el valor se interpreta con formato \u201cint\u201d. Si se quiere forzar la representaci\u00f3n: \u00b7 para que el valor sea \u201clong\u201d, debe terminarse con la letra \u201cl\u201d o \u201cL\u201d: \u00b7 ejemplo: 1L, que es la unidad en representaci\u00f3n \u201clong\u201d Conversi\u00f3n de valores en String Frecuentemente tendremos los datos metidos en una String (por ejemplo porque los hemos le\u00eddo de un fichero de datos). La conversi\u00f3n a enteros de java se realiza de la siguiente manera: Valores fuera de rango \u00bfQu\u00e9 pasa si nos salimos de rango? NADA BUENO. Cada tipo de enteros, byte, short, int y long, se caracterizan por un valor m\u00ednimo (el entero m\u00e1s negativo que se puede representar) y un valor m\u00e1ximo (el mayor entero positivo que se puede representar). Si una operaci\u00f3n aritm\u00e9tica nos lleva fuera de ese rango el resultado es dif\u00edcilmente predecible. Por ejemplo, los int deben estar en el rango [-2.147.483.648, +2.147.483.647]. Pero ... Aunque el valor calculado est\u00e1 evidentemente mal, java no avisa de forma alguna. Ver \" Desbordamiento \". \u00bfQu\u00e9 tipo de enteros debo usar? Java tiene un especial cari\u00f1o por los \"int\". Todos los n\u00fameros java los interpreta como \"int\", salvo que se diga lo contrario. Lo m\u00e1s normal es que todos los enteros sean de tipo \"int\"; salvo que haya una necesidad evidente de recurrir a otro de los tipos: \u00b7 byte o short, porque tenemos much\u00edsimos enteros con valores muy peque\u00f1os \u00b7 long, porque tenemos enteros con valores muy grandes", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/82.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/215.html"
        ], 
        "title": "enteros", 
        "examples": [
            "\u00a0 public void bases(int n) { \u00a0\u00a0\u00a0 System.out.println(\"decimal:\u00a0\u00a0\u00a0\u00a0 \" + n); \u00a0\u00a0\u00a0 System.out.println(\"binario:\u00a0\u00a0\u00a0\u00a0 \" + Integer.toBinaryString(n)); \u00a0\u00a0\u00a0 System.out.println(\"octal:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \" + Integer.toOctalString(n)); \u00a0\u00a0\u00a0 System.out.println(\"hexadecimal:\r\n  \" + Integer.toHexString(n)); \u00a0\u00a0\u00a0 System.out.println(\"base 3:\u00a0\u00a0\u00a0\u00a0\u00a0 \" + Integer.toString(n, 3)); \u00a0 }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "decimal:\u00a0\u00a0\u00a0\u00a0 2001 binario:\u00a0\u00a0\u00a0\u00a0 11111010001 octal:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 3721 hexadecimal: 7d1 base 3:\u00a0\u00a0\u00a0\u00a0\u00a0 2202010"
        ], 
        "id": "216"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/73.html": {
        "id": "73", 
        "definition": "Se llama declarar al acto por el que se anuncia la existencia de una Clases, un M\u00e9todo o una variable ", 
        "description": "Se llama declarar al acto por el que se anuncia la existencia de una Clases, un M\u00e9todo o una variable .", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/74.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/75.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/76.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/77.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/78.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/79.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/80.html"
        ], 
        "title": "Declaraci\u00f3n"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/91.html": {
        "id": "91", 
        "definition": "Los ficheros ", 
        "description": "Los ficheros .class pueden empaquetarse en ficheros .jar. Esto es especialmente \u00fatil cuando hay muchos ficheros .class que, empaquetados en un solo fichero .jar, son m\u00e1s f\u00e1ciles de manejar. Para ejecutar m\u00e9todos \u201cmain\u201d en clases empaquetas en el jar basta incorporar el fichero JAR al \u201cclasspath\u201d e indicar la clase", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/88.html"
        ], 
        "title": "ficheros .jar"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/77.html": {
        "id": "77", 
        "definition": "Son variables declaradas dentro de un bloque de c\u00f3digo: conjunto de sentencias encerradas entre llaves", 
        "description": "Son variables declaradas dentro de un bloque de c\u00f3digo: conjunto de sentencias encerradas entre llaves. { sentencias } Responden al esquema: [ final ] <tipo> identificador [ = <valor_inicial> ] ; Su \u00e1mbito de uso abarca desde que se declaran hasta que se cierra el bloque. La variable de crea cuando la ejecuci\u00f3n pasa por su declaraci\u00f3n. La variable se destruye cuando el m\u00e9todo termina.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/73.html"
        ], 
        "title": "Declaraci\u00f3n de variables dentro de un bloque"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/29.html": {
        "definition": "Ver \u201cCampo\u201d", 
        "concept": "concepto", 
        "description": "Ver \u201cCampo\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/44.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Atributo", 
        "id": "29"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/18.html": {
        "id": "18", 
        "definition": "Se puede inicializar con cualquier expresi\u00f3n :", 
        "description": "Se puede inicializar con cualquier expresi\u00f3n :", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/15.html"
        ], 
        "title": "creaci\u00f3n con inicializaci\u00f3n"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/80.html": {
        "id": "80", 
        "definition": "Las clases se declarar en ficheros", 
        "description": "Las clases se declarar en ficheros. Los ficheros pueden estar en directorios diferentes, lo que corresponde en java a paquetes diferentes. La declaraci\u00f3n de clases responde al esquema: <\u00e1mbito> [ final ] identificador Su \u00e1mbito de visibilidad es al menos todo el paquete en el que se declaran. Los modificadores de visibilidad pueden hacerlos visibles fuera del paquete. Las clases final no pueden redefinirse. Las clases existen desde que arranca el programa hasta que termina.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/73.html"
        ], 
        "title": "Declaraci\u00f3n de clases"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/376.html": {
        "definition": "A diferencia de la clase est\u00e1ndar String, StringBuilder permite trabajar con cadenas de caracteres modificables", 
        "concept": "clase", 
        "description": "A diferencia de la clase est\u00e1ndar String, StringBuilder permite trabajar con cadenas de caracteres modificables. El siguiente ejemplo muestra dos m\u00e9todos para construir un objeto que un listado de N n\u00fameros separados por comas. La diferencia en tiempos de ejecuci\u00f3n es notoria: El tiempo exacto que tarda en ejecutarse el programa depende de cada ordenador y de qu\u00e9 m\u00e1s programas hay en ejecuci\u00f3n en un momento dado. Lo importante es la proporci\u00f3n de tiempos, que es claramente favorable al uso de StringBuilder. La diferencia, inapreciable cuando hay pocos objetos que manejar, se torna apabullante cuando el n\u00famero de objetos crece.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "StringBuilder", 
        "examples": [
            "public class UsandoStringBuilder { \u00a0 \u00a0\r\n  private static String metodo1(int n) { \u00a0\u00a0\u00a0\r\n  String resultado = \"\"; \u00a0\u00a0\u00a0\r\n  for (int i = 0; i < n; i++) \u00a0\u00a0\u00a0\u00a0\u00a0 resultado+= i + \", \"; \u00a0\u00a0\u00a0\r\n  return resultado; \u00a0\r\n  } \u00a0 \u00a0\r\n  private static String metodo2(int n) { \u00a0\u00a0\u00a0\r\n  StringBuilder buffer = new StringBuilder(); \u00a0\u00a0\u00a0\r\n  for (int i = 0; i < n; i++) \u00a0\u00a0\u00a0\u00a0\u00a0 buffer.append(i).append(\",\r\n  \"); \u00a0\u00a0\u00a0\r\n  return buffer.toString(); \u00a0\r\n  } \u00a0 \u00a0\r\n  public static void main(String[] argumentos) { \u00a0\u00a0\u00a0\r\n  int n = Integer.parseInt(argumentos[0]); \u00a0\u00a0\u00a0 long t1, t2; \u00a0 \u00a0\u00a0\u00a0\r\n  t1 = System.currentTimeMillis(); \u00a0\u00a0\u00a0\r\n  metodo1(n); \u00a0\u00a0\u00a0\r\n  t2 = System.currentTimeMillis(); \u00a0\u00a0\u00a0\r\n  System.out.println(\"m\u00e9todo 1: \" + (t2 - t1) +\r\n  \"ms\"); \u00a0 \u00a0\u00a0\u00a0\r\n  t1 = System.currentTimeMillis(); \u00a0\u00a0\u00a0\r\n  metodo2(n); \u00a0\u00a0\u00a0\r\n  t2 = System.currentTimeMillis(); \u00a0\u00a0\u00a0\r\n  System.out.println(\"m\u00e9todo 2: \" + (t2 - t1) +\r\n  \"ms\"); \u00a0\r\n  } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "376"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/349.html": {
        "id": "349", 
        "definition": "El propio paquete java", 
        "description": "El propio paquete java.util proporciona algunas implementaciones de la interface Map, sin perjuicio de que se puedan programar otras. Es una implementaci\u00f3n muy eficiente en cuanto a uso de memoria. Es r\u00e1pida en todas las operaciones. Puede decirse que es un \u201carray asociativo\u201d de tama\u00f1o din\u00e1mico. Es una implementaci\u00f3n basada en listas encadenadas. Respeta el orden de inserci\u00f3n, a cambio de ser m\u00e1s lenta. Similar a \u201cHashMap\u201d pero con m\u00e9todos sincronizados, lo que permite ser usada en programas concurrentes. Todo es m\u00e1s lento que con una HashMap.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/347.html"
        ], 
        "title": "implementaciones est\u00e1ndar"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/198.html": {
        "definition": "Si una clase es p\u00fablica y tiene un m\u00e9todo main, podemos lanzar la ejecuci\u00f3n del m\u00e9todo usando la herramienta \u201cjava\u201d", 
        "concept": "main", 
        "description": "Si una clase es p\u00fablica y tiene un m\u00e9todo main, podemos lanzar la ejecuci\u00f3n del m\u00e9todo usando la herramienta \u201cjava\u201d. Ver \u201cjava\u201d. El m\u00e9todo \u00b7 debe ser public para ser accesible desde fuera \u00b7 debe ser static (de clase) porque a\u00fan no hemos creado ning\u00fan objeto \u00b7 es void por convenio: no devuelve nada \u00b7 se llama main por convenio \u00b7 el argumento es un array de cadenas de texto, String, que se cargan con los datos que le pasemos al int\u00e9rprete", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/181.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "113", 
        "examples": [
            "public\r\n  class Ejemplo { \u00a0\u00a0\u00a0 public static void main(String[]\r\n  argumentos) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\u201cHola. Soy yo.\u201d); \u00a0\u00a0\u00a0 } }"
        ], 
        "id": "198"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/386.html": {
        "id": "386", 
        "definition": "", 
        "description": "", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/385.html"
        ], 
        "title": "Acr\u00f3nimos"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/238.html": {
        "definition": "Ver \u201c Visibilidad \u201d: \u00e1mbito de c\u00f3digo en el que un elemento de Java puede referenciarse por su nombre", 
        "concept": "palabra reservada", 
        "description": "Ver \u201c Visibilidad \u201d: \u00e1mbito de c\u00f3digo en el que un elemento de Java puede referenciarse por su nombre. Los elementos \u201cprivate\u201d s\u00f3lo pueden referenciarse dentro del mismo fichero en el que se definen. private class X La clase X s\u00f3lo pueden referenciarse dentro del mismo fichero en el que se define. Se pueden definir clases \u201cprivate\u201d dentro de otras clases o junto con otra clase en el mismo fichero. private resultado m\u00e9todo (argumentos) El m\u00e9todo s\u00f3lo pueden referenciarse dentro del mismo fichero en el que se define. Se pueden definir m\u00e9todos \u201cprivate\u201d dentro de cualquier clase. private variable La variable s\u00f3lo pueden referenciarse dentro del mismo fichero en el que se define. Se pueden definir variables \u201cprivate\u201d como campos de cualquier clase.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/300.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "private", 
        "id": "238"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/85.html": {
        "definition": "Adem\u00e1s se definen algunas constantes \u00fatiles Not a Number", 
        "concept": "palabra reservada", 
        "description": "Adem\u00e1s se definen algunas constantes \u00fatiles Not a Number. Se usa para representar errores. Por ejemplo, el resultado de dividir por 0.0. Double.NEGATIVE_INFINITY Infinito positivo y negativo. Ver \" N\u00fameros \".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/215.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "double", 
        "id": "85"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/210.html": {
        "definition": "Java permite pasar un n\u00famero indefinido (0 o m\u00e1s) de argumentos a un m\u00e9todo, con algunas limitaciones: \u00b7 s\u00f3lo el \u00faltimo argumento puede ser de longitud indefinida \u00b7 todos los valores deben ser del mismo tipo, incluyendo promoci\u00f3n, upcasting y autoboxing", 
        "concept": "varargs", 
        "description": "Java permite pasar un n\u00famero indefinido (0 o m\u00e1s) de argumentos a un m\u00e9todo, con algunas limitaciones: \u00b7 s\u00f3lo el \u00faltimo argumento puede ser de longitud indefinida \u00b7 todos los valores deben ser del mismo tipo, incluyendo promoci\u00f3n, upcasting y autoboxing. N\u00f3tese que el n\u00famero de argumentos puede ser cero (0). T\u00e9cnicamente, java trata estos argumentos como un array de datos del tipo indicado:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html"
        ], 
        "title": "n\u00famero variable de argumentos", 
        "examples": [
            "\u00a0\u00a0\u00a0 public int maximo(int ... valores) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int maximo = Integer.MIN_VALUE; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int n : valores) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (n > maximo) \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0maximo = n; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return maximo; \u00a0\u00a0\u00a0 }", 
            "\u00a0\u00a0\u00a0 max(5, -7, 21) \u2192 21 \u00a0\u00a0\u00a0 max() \u2192 MIN_VALUE", 
            "\u00a0\u00a0\u00a0 public boolean ordenados(String ... piezas) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (piezas.length < 2) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return true; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int i = 1; i < piezas.length;\r\n  i++) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 String s1 = piezas[i - 1]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 String s2 = piezas[i]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (s1.compareTo(s2) > 0) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return false; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return true; \u00a0\u00a0\u00a0 }", 
            "\u00a0\u00a0\u00a0 ordenados(\"alfa\",\r\n  \"beta\", \"gamma\", \"delta\") \u2192 false \u00a0\u00a0\u00a0 ordenados(\"alfa\",\r\n  \"beta\", \"delta\", \"gamma\") \u2192 true"
        ], 
        "id": "210"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/237.html": {
        "definition": "M\u00e9todo de las clases PrintStream y PrintWriter ", 
        "concept": "m\u00e9todo", 
        "description": "M\u00e9todo de las clases PrintStream y PrintWriter . Imprime un valor seguido de un fin de l\u00ednea. Est\u00e1 sobrecargado para tratar n\u00fameros, booleanos, caracteres y cualquier objeto. En este \u00faltimo caso imprime la cadena devuelta por el m\u00e9todo toString() . Ver \u201c System.out y \u201c System.err .", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "println", 
        "id": "237"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/257.html": {
        "definition": "Un tipo de excepciones que se caracteriza porque no hay que explicitarlo en la cabecera de los m\u00e9todos que, no deseando tratar la excepci\u00f3n ellos mismos, prefieren propagarla a quien los ha llamado", 
        "concept": "clase", 
        "description": "Un tipo de excepciones que se caracteriza porque no hay que explicitarlo en la cabecera de los m\u00e9todos que, no deseando tratar la excepci\u00f3n ellos mismos, prefieren propagarla a quien los ha llamado. Se utiliza para aquellos errores que son de programaci\u00f3n; es decir, imputables al programador que se ha equivocado, que no a los datos de una ejecuci\u00f3n concreta. Ver \u201cException\u201d y \u201cExcepciones\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/117.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/114.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "RuntimeException", 
        "id": "257"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/39.html": {
        "id": "39", 
        "definition": "\u00b7 Hacer una vez de m\u00e1s o de menos \u00b7 Equivocarse en el caso inicial o final \u00b7 hay que probar siempre los casos extremos: condici\u00f3n que no se satisface, s\u00f3lo se satisface una vez,", 
        "description": "\u00b7 Hacer una vez de m\u00e1s o de menos \u00b7 Equivocarse en el caso inicial o final \u00b7 hay que probar siempre los casos extremos: condici\u00f3n que no se satisface, s\u00f3lo se satisface una vez,... \u00b7 No comprobar que las variables est\u00e1n correctamente inicializadas \u00b7 Poner condiciones exactas: es mejor curarse en salud: \u00b7 while (i != 10) ... \u00b7 while (i < 10) ... // por si acaso \u00b7 Poner condiciones exactas trabajando con reales \u00b7 condiciones == o != \u00b7 es mejor recurrir siempre a <, <=, > o >=", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/34.html"
        ], 
        "title": "errores frecuentes"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/10.html": {
        "definition": "Ver \"boolean\"", 
        "concept": "concepto", 
        "description": "Ver \"boolean\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/31.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "\u00c1lgebra de Boole", 
        "id": "10"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/40.html": {
        "definition": "D\u00edcese de los errores de los programas que provocan un fallo en ejecuci\u00f3n, bien deteni\u00e9ndolos, bien llev\u00e1ndoles a conclusiones incorrectas", 
        "concept": "concepto", 
        "description": "D\u00edcese de los errores de los programas que provocan un fallo en ejecuci\u00f3n, bien deteni\u00e9ndolos, bien llev\u00e1ndoles a conclusiones incorrectas. La palabra viene del ingl\u00e9s, \"bicho\", y es reminiscencia de aquellos primeros ordenadores en los que anidaban bichos al calor de los circuitos, provocando fallos de la m\u00e1quina.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Bugs", 
        "id": "40"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/314.html": {
        "definition": "Interfaz que sirve para marcar clases que disfrutan de una relaci\u00f3n de orden total, lo que se traduce en que las clases que implementen esta interfaz deben proporcionar un m\u00e9todo int compareTo(T x) que compara THIS con x, devolviendo Los objetos que implementan esta interface se pueden usar en conjuntos ordenados y mapas ordenados", 
        "concept": "interface", 
        "description": "Interfaz que sirve para marcar clases que disfrutan de una relaci\u00f3n de orden total, lo que se traduce en que las clases que implementen esta interfaz deben proporcionar un m\u00e9todo int compareTo(T x) que compara THIS con x, devolviendo Los objetos que implementan esta interface se pueden usar en conjuntos ordenados y mapas ordenados.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/315.html"
        ], 
        "title": "Comparable<T>", 
        "id": "314"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/99.html": {
        "definition": "Los objetos de tipos enumerados disfrutan de una serie de m\u00e9todos est\u00e1ndar: Adem\u00e1s, la clase \u201cVocal\u201d proporciona un par de m\u00e9todos \u00fatiles:", 
        "description": "Los objetos de tipos enumerados disfrutan de una serie de m\u00e9todos est\u00e1ndar: Adem\u00e1s, la clase \u201cVocal\u201d proporciona un par de m\u00e9todos \u00fatiles:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/98.html"
        ], 
        "title": "m\u00e9todos est\u00e1ndar", 
        "examples": [
            "vocal", 
            "E", 
            "vocal.compareTo(Vocal.A) vocal.compareTo(Vocal.E) vocal.compareTo(Vocal.U)", 
            "1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // algo > 0 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 0 -3\u00a0\u00a0\u00a0\u00a0\u00a0 // algo < 0", 
            "vocal.equals(Vocal.A) vocal.equals(Vocal.E)", 
            "false true", 
            "vocal.name() vocal.toString()", 
            "\"E\"\u00a0\u00a0\u00a0 //\r\n  identificador de la constante \"E\"\u00a0\u00a0\u00a0 // puede reescribirse", 
            "vocal.ordinal()", 
            "1"
        ], 
        "id": "99"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/72.html": {
        "definition": "Perseguir la ejecuci\u00f3n de un programa detectando errores (bugs) y repar\u00e1ndolos", 
        "concept": "concepto", 
        "description": "Perseguir la ejecuci\u00f3n de un programa detectando errores (bugs) y repar\u00e1ndolos. Ver \"Bugs\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/40.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Debug", 
        "id": "72"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/27.html": {
        "id": "27", 
        "definition": "Java proporciona una notaci\u00f3n m\u00e1s compacta para algunas asignaciones t\u00edpicas forma compacta forma equivalente x += expr; x = x + expr; x -= expr; x = x - expr; x *= expr; x = x * expr; x /= expr; x = x / expr; x %= expr; x = x % expr; x &= expr; x = x & expr; x |= expr; x = x | expr; x ++ x = x + 1 ++x x-- x = x -1 --x", 
        "description": "Java proporciona una notaci\u00f3n m\u00e1s compacta para algunas asignaciones t\u00edpicas forma compacta forma equivalente x += expr; x = x + expr; x -= expr; x = x - expr; x *= expr; x = x * expr; x /= expr; x = x / expr; x %= expr; x = x % expr; x &= expr; x = x & expr; x |= expr; x = x | expr; x ++ x = x + 1 ++x x-- x = x -1 --x", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/26.html"
        ], 
        "title": "Notaci\u00f3n compacta"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/43.html": {
        "definition": "Son las primeras l\u00edneas de un M\u00e9todo, donde se indicaremos: \u00b7 su visibilidad: public, ", 
        "concept": "concepto", 
        "description": "Son las primeras l\u00edneas de un M\u00e9todo, donde se indicaremos: \u00b7 su visibilidad: public, ..., private \u00b7 el tipo de valor que devuelve (o void si no devuelve nada) \u00b7 el nombre del m\u00e9todo \u00b7 los argumentos formales: tipo y nombre", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Cabecera (de un m\u00e9todo)", 
        "examples": [
            "public\r\n  String cifra(String texto, byte[] clave) \u2026"
        ], 
        "id": "43"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/387.html": {
        "id": "387", 
        "definition": "", 
        "description": "", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/385.html"
        ], 
        "title": "T\u00e9rminos"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/218.html": {
        "id": "218", 
        "definition": "Java utiliza normalmente notaci\u00f3n anglosajona, donde la coma decimal es un punto '", 
        "description": "Java utiliza normalmente notaci\u00f3n anglosajona, donde la coma decimal es un punto '.' y el separador de miles es la coma ','. Si deseamos utilizar notaci\u00f3n local hay que recurrir a un formateador espec\u00edfico. Para escribir: Para leer: Ver \u201c Formatter \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/323.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/215.html"
        ], 
        "title": "notaci\u00f3n local"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/166.html": {
        "definition": "Se dice que una clase implementa una interfaz cuando proporciona c\u00f3digo para concreto para los m\u00e9todos definidos en la interfaz", 
        "concept": "concepto", 
        "description": "Se dice que una clase implementa una interfaz cuando proporciona c\u00f3digo para concreto para los m\u00e9todos definidos en la interfaz. Se dice que los m\u00e9todos en la clase concreta implementan a sus hom\u00f3nimos en la interface, debiendo cumplir las siguientes condiciones \u00b7 mismos argumentos (n\u00famero, clase y orden) Misma clase implica que no vale recurrir a argumentos de tipos que sean superclase o subclase del prometido en la interface. \u00b7 misma clase de resultado (vale que la implementaci\u00f3n devuelva una subclase) \u00b7 igual o mayor visibilidad \"de paquete\" < protected < public \u00b7 igual o menos capacidad de lanzar excepciones; el m\u00e9todo que implementa puede \u00b7 no lanzar excepci\u00f3n alguna \u00b7 lanzar excepciones que sean subclases de la del m\u00e9todo implementado \u00b7 lanzar las mismas excepciones que el m\u00e9todo implementado De una misma interfaz pueden derivarse m\u00faltiples implementaciones. Y se puede usar el tipo de la interfaz para referenciar a cualquier implementaci\u00f3n", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/167.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/168.html"
        ], 
        "title": "Implementaci\u00f3n", 
        "examples": [
            "public\r\n  interface Coordenada { \u00a0 \u00a0\u00a0\u00a0 double x(); \u00a0 \u00a0\u00a0\u00a0 double y(); \u00a0 \u00a0\u00a0\u00a0 double distancia(Coordenada q); }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "public\r\n  class Punto \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 implements Coordenada { \u00a0\u00a0\u00a0 private double x, y; \u00a0 \u00a0\u00a0\u00a0 public Punto(double x, double y) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.x = x; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.y = y; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double x() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return x; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double y() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return y; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double distancia(Coordenada q) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double dx = q.x() - x; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double dy = q.y() - y; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return Math.sqrt(dx * dx + dy * dy); \u00a0\u00a0\u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "public\r\n  interface Funcion { \u00a0\u00a0\u00a0 double y(double x) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throws Exception; }\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "class\r\n  Seno \u00a0 implements Funcion { \u00a0 public double y(double x) { \u00a0\u00a0\u00a0\u00a0\u00a0 return Math.sin(x); \u00a0\u00a0\u00a0 } }", 
            "class\r\n  Coseno \u00a0 implements Funcion { \u00a0 public double y(double x) { \u00a0\u00a0\u00a0\u00a0\u00a0 return Math.cos(x); \u00a0\u00a0\u00a0 } }", 
            "class\r\n  Tangente \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 implements Funcion { \u00a0\u00a0\u00a0 public double y(double x) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throws Exception { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double seno =  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Math.sin(x); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double coseno =  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Math.cos(x); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (Math.abs(coseno)  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 < 1e-6) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throw new Exception(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return seno / coseno; \u00a0\u00a0\u00a0 } }", 
            "class Suma \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 implements Funcion { \u00a0\u00a0\u00a0 private final Funcion f1; \u00a0\u00a0\u00a0 private final Funcion f2; \u00a0 \u00a0\u00a0\u00a0 Suma(Funcion f1, Funcion f2) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.f1 = f1; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.f2 = f2; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double y(double x) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throws Exception { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return f1.y(x) + f2.y(x); \u00a0\u00a0\u00a0 } }"
        ], 
        "id": "166"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/202.html": {
        "id": "202", 
        "definition": "Se llama signatura de un m\u00e9todo al siguiente conjunto de informaci\u00f3n \u00b7 el nombre del m\u00e9todo \u00b7 la serie de tipos de los argumentos de entrada As\u00ed, la signatura del m\u00e9todo \"suma\" del p\u00e1rrafo anterior es En una clase no pueden coexistir dos m\u00e9todos con id\u00e9ntica signatura: ser\u00edan causa de ambig\u00fcedad", 
        "description": "Se llama signatura de un m\u00e9todo al siguiente conjunto de informaci\u00f3n \u00b7 el nombre del m\u00e9todo \u00b7 la serie de tipos de los argumentos de entrada As\u00ed, la signatura del m\u00e9todo \"suma\" del p\u00e1rrafo anterior es En una clase no pueden coexistir dos m\u00e9todos con id\u00e9ntica signatura: ser\u00edan causa de ambig\u00fcedad.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html"
        ], 
        "title": "signatura"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/133.html": {
        "definition": "Componente sint\u00e1ctico de sentencias \u201c try \u201d", 
        "concept": "palabra reservada", 
        "description": "Componente sint\u00e1ctico de sentencias \u201c try \u201d. El bloque finally se ejecuta siempre al acabar el bloque try, tanto si acaba bien como si acaba mal, sea cual sea el significado de acabar bien o mal. El ejemplo siguiente muestra como el bloque puede acabar bien (calculando la ra\u00edz cuadrada de un real positivo) o mal (por diferentes motivos de formato o n\u00fameros negativos); pero siempre incrementa el n\u00famero de pruebas realizadas: El bloque finally puede emplearse incluso sin bloques catch, aprovechando su caracter\u00edstica de que siempre se ejecuta al salir del bloque try. El siguiente ejemplo muestra como medir el tiempo que tarda un algoritmo independientemente de que termine bien o mal: Concretamente, en el ejemplo se busca un cero de una funci\u00f3n en un intervalo dado. Como algoritmo se usa el consistente en ir dividiendo el intervalo en mitades hasta acotarlo. Hay varias razones por las que puede no funcionar: la funci\u00f3n no est\u00e1 definida en alg\u00fan punto, o presenta una discontinuidad, o simplemente no pasa por cero. Todas estas causas se traducen en el lanzamiento de una excepci\u00f3n informativa.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/285.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/134.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/135.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/136.html"
        ], 
        "title": "finally", 
        "examples": [
            "public\r\n  class Inversos { \u00a0 public static void main(String[] args) { \u00a0\u00a0\u00a0 Scanner scanner = new Scanner(System.in); \u00a0\u00a0\u00a0 int pruebas = 0; \u00a0\u00a0\u00a0 while (true) { \u00a0\u00a0\u00a0\u00a0\u00a0 double inverso = 0; \u00a0\u00a0\u00a0\u00a0\u00a0 try { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 String x = scanner.next(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (x.equals(\"fin\")) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int valor =\r\n  Integer.parseInt(x); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 inverso= 100 / valor; \u00a0\u00a0\u00a0\u00a0\u00a0 } catch (Exception e) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\"\u00a0 -> \" + e); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 inverso = 0; \u00a0\u00a0\u00a0\u00a0\u00a0 } finally { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 pruebas++; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\"\u00a0 -> \" + pruebas + \": \" +\r\n  inverso); \u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 } \u00a0 } }\u00a0\u00a0\u00a0\u00a0 ", 
            "$\r\n  java Inversos 2 \u00a0 -> 1: 50.0 dos \u00a0 -> java.lang.NumberFormatException: For\r\n  input string: \"dos\" \u00a0 -> 2: 0.0 0 \u00a0 -> java.lang.ArithmeticException: / by\r\n  zero \u00a0 -> 3: 0.0 fin \u00a0 -> 4: 0.0\u00a0\u00a0 ", 
            "public\r\n  class Funcion { \u00a0\u00a0\u00a0 private static final double ERROR =\r\n  1E-12; \u00a0 \u00a0\u00a0\u00a0 public double y(double x) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return\r\n  Math.tan(x);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 //\r\n  discontinuidad en x= PI/2 \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double cero(double a, double z) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throws Exception { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (a > z) throw new\r\n  Exception(\"a > z\"); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double fa = y(a); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double fz = y(z); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (Math.abs(fa) < ERROR) return\r\n  a; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (Math.abs(fz) < ERROR) return\r\n  z; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (fa * fz > 0)  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throw new\r\n  Exception(\"no pasa por cero en el intervalo\"); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double m = (a + z) / 2; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double fm = y(m); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (Math.abs(fm) < ERROR) return\r\n  m; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (Math.abs(a - z) < ERROR) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throw new Exception(\"funci\u00f3n discontinua\"); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (fa * fm < 0) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return cero(a, m); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 else \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return cero(m, z); \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public static void main(String[] args) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throws Exception {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // nadie captura la excepci\u00f3n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 long t0 = System.currentTimeMillis(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 try { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Funcion f = new Test(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\"ra\u00edz=\r\n  \" + f.cero(1, 3)); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } finally { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 long t2 =\r\n  System.currentTimeMillis(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println((t2 - t0) +\r\n  \"ms\"); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "133"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/222.html": {
        "definition": "Object Oriented Programming", 
        "concept": "acr\u00f3nimo", 
        "description": "Object Oriented Programming. Programaci\u00f3n orientada a objetos. Es una forma de programar consistente en entender los programas como un conjunto de objetos que se relacionan entre s\u00ed por medio de los m\u00e9todos. A menudo se dice \u201cun paradigma de programaci\u00f3n\u201d. A menudo se dice que \u201clos objetos intercambian mensajes\u201d que no es otra cosa que decir que un objeto llama a los m\u00e9todos de otro objeto pas\u00e1ndole de datos como argumentos y recibiendo datos como resultados. La programaci\u00f3n orientada a objetos resulta mejor estructurada que la programaci\u00f3n cl\u00e1sica, disminuyendo el coste de desarrollo, mejorando la calidad de los programas y facilitando su mantenimiento posterior. Adem\u00e1s, los objetos que constituyen un programa se prestan a ser reutilizados en otros, dando pie a bibliotecas de componentes que aceleran nuevos desarrollos. A diferencia de la programaci\u00f3n orientada a objetos, la programaci\u00f3n cl\u00e1sica se dec\u00eda procedural por cuanto se centraba en controlar el flujo de instrucciones (o sentencias) que iba ejecutando el ordenador. Aunque m\u00e1s simple conceptualmente, este modelo sobrevive malamente a la complejidad que supone la inmensa cantidad de instrucciones que realizan los programas de cierta envergadura.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "OOP", 
        "id": "222"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/135.html": {
        "id": "135", 
        "definition": "S\u00ed; pero se considera una mala praxis", 
        "description": "S\u00ed; pero se considera una mala praxis. El efecto es que el m\u00e9todo en donde se encuentre termina inmediatamente. Tanto si hemos llegado al \"finally\" por un \"return\" o un \"throw\" dentro del \"try-catch\", el efecto es el mismo: el \"return\" del \"finally\" es el \u00fanico que tiene efecto. NO OBSTANTE, se suele considerar un error poner una sentencia RETURN dentro de un bloque finally, pues se perder\u00eda la raz\u00f3n original para salir de bloque try.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/133.html"
        ], 
        "title": "\u00bfPuede hacerse \"return\" desde dentro del finally?"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/31.html": {
        "definition": "Tipo de datos que ya viene definido en el lenguaje", 
        "concept": "palabra reservada", 
        "description": "Tipo de datos que ya viene definido en el lenguaje. Se dice que es un tipo primitivo . Valores : \u00b7 true \u00b7 false OJO: Siempre se escriben en min\u00fasculas. Operaciones : \u00b7 conjunci\u00f3n l\u00f3gica (es espa\u00f1ol, Y; en ingles, AND): el resultado es \"true\" si y s\u00f3lo si ambos operandos son \"true\" \u00b7 x & y siempre se eval\u00faan \"x\" e \"y\" \u00b7 x && y siempre se eval\u00faa \"x\" si \"x\" es \"true\", tambi\u00e9n se eval\u00faa \"y\" se denomina \"cortocircuito\" \u00b7 alternativa l\u00f3gica (en espa\u00f1ol, O; en ingl\u00e9s, OR): el resultado es \"true\" si alg\u00fan operando es \"true\" \u00b7 x | y siempre se eval\u00faan \"x\" e \"y\" \u00b7 x || y siempre se eval\u00faa \"x\", si \"x\" es \"false\", tambi\u00e9n se eval\u00faa \"y\" se denomina \"cortocircuito\" \u00b7 disyunci\u00f3n l\u00f3gica (en ingl\u00e9s, XOR): el resultado es \"true\" si los operandos son distintos \u00b7 x ^ y \u00b7 negaci\u00f3n l\u00f3gica (en ingl\u00e9s, NOT: el resultado es lo contrario del operando \u00b7 ! x Ejemplo. Un a\u00f1o es bisiesto si es m\u00faltiplo de 4, excepto si es m\u00faltiplo de 100. No obstante, lo m\u00faltiplos de 400 son tambi\u00e9n bisiestos.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/283.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "boolean", 
        "examples": [
            "boolean bisiesto(int a\u00f1o) {  \u00a0\u00a0\u00a0 boolean multiplo4 = a\u00f1o % 4 == 0;  \u00a0\u00a0\u00a0 boolean multiplo100 = a\u00f1o % 100 == 0;  \u00a0\u00a0\u00a0 boolean multiplo400 = a\u00f1o % 400 == 0;  \u00a0\u00a0\u00a0 return (multiplo4 && (!\r\n  multiplo100)) || multiplo400;  } "
        ], 
        "id": "31"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/83.html": {
        "definition": "Bucles que se ejecutan una o m\u00e1s veces", 
        "concept": "palabra reservada", 
        "description": "Bucles que se ejecutan una o m\u00e1s veces. La condici\u00f3n de terminaci\u00f3n se chequea al final. Ver \"Bucles\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/34.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "do ... while", 
        "examples": [
            "do { \u00a0\u00a0\u00a0 sentencia; } while (condici\u00f3n); \u00a0 do { \u00a0\u00a0\u00a0 sentencia 1; \u00a0\u00a0\u00a0 sentencia 2; \u00a0\u00a0\u00a0 ... \u00a0\u00a0\u00a0 sentencia ...; } while (condici\u00f3n);", 
            "double nota; do {  \u00a0\u00a0\u00a0 nota =\r\n  examen();  } while (nota < 5.0); "
        ], 
        "id": "83"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/291.html": {
        "id": "291", 
        "definition": "Las variables se pueden utilizar dentro de un cierto \u00e1mbito", 
        "description": "Las variables se pueden utilizar dentro de un cierto \u00e1mbito. El \u00e1mbito de accesibilidad depende del tipo de variable. variables de clase (static) y de objeto Siempre se pueden utilizar dentro del \u00e1mbito definido por las llaves { ... } que delimitan el cuerpo de la clase. Este \u00e1mbito puede verse ampliado por los calificativos public (se pueden usar desde cualquier sitio), \u201cde paquete\u201d (se pueden usar dentro del mismo paquete) y protected (se pueden usar en el mismo paquete y en subclases). Un detalle: las variables de objeto no pueden usarse en m\u00e9todos de clase (static). argumentos formales (de los m\u00e9todos) Se pueden utilizar dentro del cuerpo del m\u00e9todo. variables locales (en un bloque) Se pueden utilizar dentro del bloque, entre el punto en el que se definen y la llave final que termina el bloque.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/289.html"
        ], 
        "title": "\u00e1mbito: accesibilidad"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/239.html": {
        "definition": "Ver \u201cOOP\u201d", 
        "concept": "concepto", 
        "description": "Ver \u201cOOP\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/222.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Programaci\u00f3n orientada a objetos", 
        "id": "239"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/221.html": {
        "definition": "Object Oriented", 
        "concept": "acr\u00f3nimo", 
        "description": "Object Oriented. Orientado a Objetos. Ver \u201cOOP\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/222.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "OO", 
        "id": "221"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/67.html": {
        "definition": "Se dice de los campos que se declaran \u201cstatic final\u201d", 
        "concept": "concepto", 
        "description": "Se dice de los campos que se declaran \u201cstatic final\u201d. Por convenio, se suelen escribir usando solamente letras may\u00fasculas y d\u00edgitos. Si constan de varias palabras, se separan con caracteres '_'. Ejemplos: Ver \" Variables / invariantes \". Ver \"Identificadores\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/294.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/160.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Constantes", 
        "alternative": "constant", 
        "id": "67"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/234.html": {
        "definition": "Es la posibilidad de que una variable se refiera a objetos de diferentes clases", 
        "concept": "concepto", 
        "description": "Es la posibilidad de que una variable se refiera a objetos de diferentes clases. El comportamiento exacto depende de la clase exacta del objeto referido. Tenemos polimorfismo cuando: \u00b7 diferentes clases implementan una misma interface \u00b7 unas clases son subclases de otras utiliza Cartesianas.getModulo() utiliza Polares.getModulo() Ver \" Elecci\u00f3n din\u00e1mica de m\u00e9todo \".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/94.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Polimorfismo", 
        "examples": [
            "public\r\n  interface Punto { \u00a0\u00a0\u00a0 double getX(); \u00a0\u00a0\u00a0 double getY(); \u00a0\u00a0\u00a0 double getModulo(); \u00a0\u00a0\u00a0 double getAngulo(); }\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "public\r\n  class Cartesianas \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 implements Punto { \u00a0\u00a0\u00a0 private double x; \u00a0\u00a0\u00a0 private double y; \u00a0 \u00a0\u00a0\u00a0 public Cartesianas(double x,  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double y) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.x = x; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.y = y; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double getX() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return x; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double getY() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return y; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double getModulo() { \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0return  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Math.sqrt(x*x + y*y); \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double getAngulo() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return Math.atan2(y, x); \u00a0\u00a0\u00a0 } }", 
            "public\r\n  class Polares \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 implements Punto { \u00a0\u00a0\u00a0 private double modulo; \u00a0\u00a0\u00a0 private double angulo; \u00a0 \u00a0\u00a0\u00a0 public Polares(double modulo, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double angulo) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.modulo = modulo; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.angulo\r\n  = angulo; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double getX() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return modulo * \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Math.cos(angulo); \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double getY() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  return modulo * \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Math.sin(angulo); \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double getModulo() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return modulo; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double getAngulo() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return angulo; \u00a0\u00a0\u00a0 } }"
        ], 
        "alternative": "polimorphism", 
        "id": "234"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/249.html": {
        "definition": "Consiste en sustituir campos p\u00fablicos por campos privados con m\u00e9todos de acceso", 
        "description": "Consiste en sustituir campos p\u00fablicos por campos privados con m\u00e9todos de acceso.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/248.html"
        ], 
        "title": "encapsulaci\u00f3n", 
        "examples": [
            "\u00a0\u00a0\u00a0 public String nombre;", 
            "\u00a0\u00a0\u00a0 private String nombre; \u00a0 \u00a0\u00a0\u00a0 public String getNombre() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return nombre; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public void setNombre(String nombre) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.nombre\r\n  = nombre; \u00a0\u00a0\u00a0 }"
        ], 
        "id": "249"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/32.html": {
        "definition": "Ver \"boolean\"", 
        "concept": "concepto", 
        "description": "Ver \"boolean\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/31.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Booleanos", 
        "id": "32"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/106.html": {
        "definition": "Son los errores que detecta el compilador ( javac )", 
        "concept": "compile time", 
        "description": "Son los errores que detecta el compilador ( javac ). Suelen ser los errores m\u00e1s f\u00e1ciles de comprender y reparar. Por ello todos los lenguajes de programaci\u00f3n intentan que el compilador detecte cuantos m\u00e1s errores sea posible antes de intentar ejecutar un programa defectuoso. Pero no todo es detectable en compilaci\u00f3n. Un programa con errores de compilaci\u00f3n no puede ejecutarse. De hecho, el compilador se niega a generar c\u00f3digo interpretable. Errores t\u00edpicos de compilaci\u00f3n \u00b7 errores en la escritura de las palabras reservadas \u00b7 errores en la sintaxis \u00b7 referencias a variables que no se han declarado previamente \u00b7 referencias a m\u00e9todos que no se han declarado \u00b7 asignaci\u00f3n a una variable de un valor para el que no est\u00e1 declarada \u00b7 etc.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/182.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/105.html"
        ], 
        "title": "de compilaci\u00f3n", 
        "id": "106"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/109.html": {
        "id": "109", 
        "definition": "Son aquellos que no respetan la sintaxis del lenguaje", 
        "description": "Son aquellos que no respetan la sintaxis del lenguaje. Errores t\u00edpicos: \u00b7 no casar par\u00e9ntesis de apertura y cierre \u00b7 no casar llaves de apertura y cierre \u00b7 olvidar ';' de fin de sentencia", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/105.html"
        ], 
        "title": "sint\u00e1cticos"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/270.html": {
        "definition": "Cuando una clase B extiende a otra A los miembros (valores y m\u00e9todos) no privados de la clase A son accesibles en B usando el prefijo \u201csuper", 
        "concept": "palabra reservada", 
        "description": "Cuando una clase B extiende a otra A los miembros (valores y m\u00e9todos) no privados de la clase A son accesibles en B usando el prefijo \u201csuper.\u201d, incluso si el m\u00e9todo ha sido redefinido en B. Una clase s\u00f3lo puede referirse a su madre inmediata, no se pueden dar 2 saltos \"hasta la abuela\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/127.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/271.html"
        ], 
        "title": "super", 
        "examples": [
            "class Punto2D", 
            "public\r\n  class Punto2D { \u00a0\u00a0 private double x, y; \u00a0 \u00a0\u00a0 public void set(double[] coordenadas)\r\n  { \u00a0\u00a0\u00a0\u00a0\u00a0 this.x =\r\n  coordenadas[0]; \u00a0\u00a0\u00a0\u00a0\u00a0 this.y = coordenadas[1]; \u00a0\u00a0 } }", 
            "class Punto3D extends Punto2D", 
            "public\r\n  class Punto3D extends Punto2D { \u00a0\u00a0 private double z; \u00a0 \u00a0\u00a0 public void set(double[] coordenadas)\r\n  { \u00a0\u00a0\u00a0\u00a0\u00a0 super.set(coordenadas); \u00a0\u00a0\u00a0\u00a0\u00a0 this.z = coordenadas[2]; \u00a0\u00a0 } }"
        ], 
        "id": "270"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/125.html": {
        "definition": "Forma compacta de decidir entre dos valores si es cierta la condici\u00f3n se toma el prime valor; si no el segundo", 
        "description": "Forma compacta de decidir entre dos valores si es cierta la condici\u00f3n se toma el prime valor; si no el segundo. Ambos valores deben ser del mismo tipo o tipos compatibles (v\u00eda casting).", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/122.html"
        ], 
        "title": "expresiones condicionales", 
        "examples": [
            "Tipo variable =  \u00a0\u00a0\u00a0 condicion ? v1 : v2;", 
            "Tipo variable; if (condicion) \u00a0 variable = v1; else \u00a0 variable = v2;", 
            "return\r\n  condicion ? v1 : v2;", 
            "if\r\n  (condicion) \u00a0 return v1; return\r\n  v2;"
        ], 
        "id": "125"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/76.html": {
        "id": "76", 
        "definition": "Son variables declaradas dentro del cuerpo de un m\u00e9todo", 
        "description": "Son variables declaradas dentro del cuerpo de un m\u00e9todo. A veces de llaman \"variables autom\u00e1ticas\". Responden al esquema: [ final ] <tipo> identificador [ = <valor_inicial> ] ; Su \u00e1mbito de uso abarca desde que se declaran hasta que se cierra el m\u00e9todo. La variable de crea cuando la ejecuci\u00f3n pasa por su declaraci\u00f3n. La variable se destruye cuando el m\u00e9todo termina.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/73.html"
        ], 
        "title": "Declaraci\u00f3n de variables locales dentro de un m\u00e9todo"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/281.html": {
        "definition": "Abstract Data Types (ADT)", 
        "concept": "concepto", 
        "description": "Abstract Data Types (ADT). Ver \u201c Encapsulaci\u00f3n \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/96.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Tipos abstractos de datos (TAD)", 
        "id": "281"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/159.html": {
        "id": "159", 
        "definition": "Si el c\u00f3digo y la interfaz de una clase nos gustan podemos aprovecharlo (herencia) en otra clase \u00b7 a\u00f1adiendo m\u00e1s cosas \u00b7 ocultando variables (a base de definir otra que tape a la primera) \u00b7 redefiniendo m\u00e9todos (polimorfismo) El gran inconveniente de la herencia es que no se pueden eliminar m\u00e9todos de la superclase", 
        "description": "Si el c\u00f3digo y la interfaz de una clase nos gustan podemos aprovecharlo (herencia) en otra clase \u00b7 a\u00f1adiendo m\u00e1s cosas \u00b7 ocultando variables (a base de definir otra que tape a la primera) \u00b7 redefiniendo m\u00e9todos (polimorfismo) El gran inconveniente de la herencia es que no se pueden eliminar m\u00e9todos de la superclase. Es imposible que el compilador no vea todo lo que hace p\u00fablico la superclase. Si necesita que desaparezca algo, tiene que usar composici\u00f3n + delegaci\u00f3n (o sea, meter dentro de la nueva clase B una referencia a la primera clase A, y poner m\u00e9todos en B para acceder a lo que se necesite de A por delegaci\u00f3n). La composici\u00f3n + delegaci\u00f3n es extremadamente flexible, siendo su \u00fanica limitaci\u00f3n que no podemos hacer upcasting y, por tanto, no podemos disfrutar de las ventajas del polimorfismo. La gran ventaja de la herencia es que la nueva clase es como la anterior pero ampliada y mejorada.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/155.html"
        ], 
        "title": "\u00bfcu\u00e1ndo usar herencia?"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/194.html": {
        "definition": "Es habitual recorrer las listas en orden", 
        "description": "Es habitual recorrer las listas en orden", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/192.html"
        ], 
        "title": "algoritmos sobre listas", 
        "examples": [
            "Nodo nodo = cabecera;  while\r\n  (nodo != null) {  \u00a0\u00a0\u00a0 haz\r\n  algo con nodo \u00a0\u00a0\u00a0 nodo = nodo.getSiguiente();  }", 
            "haz(cabecera);  \u00a0 \u00a0 ... haz(Nodo nodo) {  \u00a0\u00a0\u00a0 if (nodo != null) {  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 haz\r\n  algo con nodo \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 haz(nodo.getSiguiente());  \u00a0\u00a0 }  }", 
            "for (Nodo nodo =\r\n  cabecera; \u00a0\u00a0\u00a0\u00a0 nodo != null; \u00a0\u00a0\u00a0\u00a0 nodo = nodo.getSiguiente()) {  \u00a0\u00a0\u00a0 haz\r\n  algo con nodo }", 
            "Nodo anterior = null;  Nodo nodo = cabecera;  while\r\n  (nodo != null) {  \u00a0\u00a0\u00a0 haz algo con anterior y nodo \u00a0\u00a0\u00a0 anterior = nodo;  \u00a0\u00a0\u00a0 nodo = nodo.getSiguiente();  }", 
            "haz(null, cabecera); \u00a0 \u00a0 ... haz(Nodo anterior,\r\n  Nodo nodo) {  \u00a0\u00a0\u00a0 if (nodo != null) {  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 haz\r\n  algo con anterior y nodo \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 haz(nodo, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 nodo.getSiguiente());  \u00a0\u00a0\u00a0 }  }", 
            "Nodo anterior= null;  for (Nodo nodo=\r\n  cabecera; \u00a0\u00a0\u00a0\u00a0 nodo != null; \u00a0\u00a0\u00a0\u00a0 nodo = nodo.getSiguiente()) {  \u00a0\u00a0\u00a0 haz algo con anterior y nodo \u00a0\u00a0\u00a0 anterior = nodo;  }"
        ], 
        "id": "194"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/68.html": {
        "definition": "Son m\u00e9todos de una clase que sirven para crear objetos", 
        "concept": "concepto", 
        "description": "Son m\u00e9todos de una clase que sirven para crear objetos. Tiene una notaci\u00f3n especial para diferenciarlos de los m\u00e9todos normales: Si no se escribe ning\u00fan constructor, java se inventa uno que no tiene ning\u00fan argumento e inicializa todos los campos a \"cero\". Java s\u00f3lo inventa constructores si el programador no escribe ninguno. En cuanto se escribe uno, java se limita a lo escrito. Ejemplo: class Punto { private double x, y; double getX() { return x; } double getY() { return y; } // creamos un objeto usando el constructor por defecto Punto p= new Punto(); // vemos sus campos: p.getX() // devuelve 0.0 p.getY() // devuelve 0.0 Se recomienda que todos los constructores inicialicen todos los campos del objeto. Ver \" M\u00e9todo / constructores \". Ver \u201c F\u00e1bricas \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Constructores", 
        "alternative": "constructors", 
        "id": "68"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/34.html": {
        "definition": "Fragmentos de c\u00f3digo que se ejecutan repetidamente", 
        "concept": "concepto", 
        "description": "Fragmentos de c\u00f3digo que se ejecutan repetidamente. Java proporciona diferentes tipos de bucles: \u00b7 \" while \", que se ejecutan cero o m\u00e1s veces; la condici\u00f3n de terminaci\u00f3n se chequea al principio \u00b7 \" do-while \", que se ejecutan una o m\u00e1s veces; la condici\u00f3n de terminaci\u00f3n se chequea al final \u00b7 \" for \", que se ejecutan N veces \u00b7 \u201c for each \u201d, o iteradores, que se ejecutan sobre todos y cada uno de los t\u00e9rminos de un array o colecci\u00f3n de datos: listas, conjuntos, \u2026 Cuando un bucle est\u00e1 lanzado, java proporciona dos formas de forzarlo desde dentro: \u00b7 \" break \": provoca la terminaci\u00f3n del bucle: lo aborta \u00b7 \" continue : provoca el comienzo de una nueva repetici\u00f3n: aborta esta pasada", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/302.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/83.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/138.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/138.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/33.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/69.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/35.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/36.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/37.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/38.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/39.html"
        ], 
        "title": "Bucles", 
        "alternative": "loops", 
        "id": "34"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/197.html": {
        "definition": "Ver \"N\u00fameros\"", 
        "concept": "palabra reservada", 
        "description": "Ver \"N\u00fameros\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/215.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "long", 
        "id": "197"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/240.html": {
        "definition": "Una forma de estructurar los programas para que no sean un laberinto, sino algo f\u00e1cil de entender por uno mismo y por los dem\u00e1s", 
        "concept": "concepto", 
        "description": "Una forma de estructurar los programas para que no sean un laberinto, sino algo f\u00e1cil de entender por uno mismo y por los dem\u00e1s. La idea fundamental es que los programas son un conjunto de bloques que encajan entre s\u00ed sobre la premisa de que cada bloque tiene un s\u00f3lo punto de entrada y un s\u00f3lo punto de salida, y la salida de uno se enchufa a la entrada del siguiente. O sea, un lego. En java todas las estructuras sint\u00e1cticas tienen un punto de entrada y un punto de salida.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Programaci\u00f3n estructurada", 
        "id": "240"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/227.html": {
        "definition": "Son una serie de palabras que forman parte del l\u00e9xico de java y que no se pueden utilizar como identificadores de elementos del usuario:", 
        "description": "Son una serie de palabras que forman parte del l\u00e9xico de java y que no se pueden utilizar como identificadores de elementos del usuario:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "129", 
        "examples": [
            "abstract assert boolean break byte case catch char class", 
            "const continue default do double else enum extends false", 
            "final finally float for goto if implements import instanceof", 
            "int interface long native new null package private protected", 
            "public return short static strictfp super switch synchronized this", 
            "throw throws transient true try void volatile while"
        ], 
        "alternative": "Palabras reservadas ", 
        "id": "227"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/266.html": {
        "definition": "Son m\u00e9todos de clase: \u00b7 se pueden utilizar sin declarar objetos: basta referirse a la clase \u00b7 s\u00f3lo pueden acceder a variables de clase No pueden acceder a los campos de los objetos porque no hay objetos (todav\u00eda)", 
        "description": "Son m\u00e9todos de clase: \u00b7 se pueden utilizar sin declarar objetos: basta referirse a la clase \u00b7 s\u00f3lo pueden acceder a variables de clase No pueden acceder a los campos de los objetos porque no hay objetos (todav\u00eda). \u00b7 ver \u201c F\u00e1bricas \u201d", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/129.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/264.html"
        ], 
        "title": "m\u00e9todos static", 
        "examples": [
            "public\r\n  class Math {\n\u00a0 public static double max(double a, double b) {\n\u00a0\u00a0\u00a0 if (a < b)  \u00a0\u00a0\u00a0\u00a0\u00a0 return a;\n\u00a0\u00a0\u00a0 return b;\n\u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "int maximo = Math.max(x, y);"
        ], 
        "id": "266"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/306.html": {
        "definition": "Clase que sirve para tratar los boolean como objetos, adem\u00e1s de proporcionar una serie de m\u00e9todos \u00fatilies: Constructor", 
        "concept": "clase", 
        "description": "Clase que sirve para tratar los boolean como objetos, adem\u00e1s de proporcionar una serie de m\u00e9todos \u00fatilies: Constructor. Pasa de tipo primitivo a objeto. usa como boolean el resultado de: s.equalsIgnoreCase(\"true\")", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "Boolean", 
        "id": "306"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/105.html": {
        "definition": "Son defectos en un programa que impiden alcanzar un resultado correcto", 
        "concept": "concepto", 
        "description": "Son defectos en un programa que impiden alcanzar un resultado correcto. Los errores pueden detectarse bien cuando intentamos compilar, bien durante la ejecuci\u00f3n, bien al intentar verificar si el resultado es correcto.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/106.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/107.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/108.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/109.html"
        ], 
        "title": "Errores", 
        "id": "105"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/207.html": {
        "definition": "D\u00edcese cuando al m\u00e9todo se le pasa una COPIA del valor del dato", 
        "concept": "paso del valor", 
        "description": "D\u00edcese cuando al m\u00e9todo se le pasa una COPIA del valor del dato. Al ser una copia, el dato original no se ve alterado si por alguna raz\u00f3n el m\u00e9todo alterara su copia. En java los tipos primitivos se pasan siempre por valor.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html"
        ], 
        "title": "paso de argumentos por valor", 
        "examples": [
            "void a(int n) {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // a recibe un valor en el\r\n  argumento formal n \u00a0\u00a0\u00a0 n = n+1;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // a modifica su copia } \u00a0 void b() { \u00a0\u00a0\u00a0 int n = 0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // n vale 0 \u00a0\u00a0\u00a0 a(n);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // pasamos en valor 0\r\n  como argumento real \u00a0\u00a0\u00a0 System.out.println(n);\u00a0\u00a0 // n sigue valiendo 0 }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "207"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/384.html": {
        "definition": "Clase derivada de Writer, para escribir caracteres en un fichero, proporcionando una serie de m\u00e9todos que facilitan tareas habituales: java", 
        "concept": "clase", 
        "description": "Clase derivada de Writer, para escribir caracteres en un fichero, proporcionando una serie de m\u00e9todos que facilitan tareas habituales: java.io.PrintWriter PrintWriter(File file) constructor PrintWriter(String fichero) constructor PrintWriter(Writer writer) constructor PrintWriter(File file, String encoding) constructor PrintWriter(String fichero, String encoding) constructor PrintWriter format(String format, Object ... args) imprime los objetos en el fichero ver \u201c Formatter PrintWriter printf(String format, Object ... args) imprime los objetos en el fichero ver \u201c Formatter void print(boolean b) void print(char c) void print(char[] s) void print(double d) void print(float f) void print(int i) void print(long l) void print(Object object) void print(String s) imprime el argumento void println() imprime un cambio de l\u00ednea void println(boolean b) void println(char c) void println(char[] s) void println(double d) void println(float f) void println(int i) void println(long l) void println(Object object) void println(String s) imprime el argumento, seguido de un cambio de l\u00ednea", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/383.html"
        ], 
        "title": "PrintWriter", 
        "id": "384"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/256.html": {
        "definition": "Sirve para terminar un m\u00e9todo, devolviendo el resultado, si el m\u00e9todo lo requiere", 
        "concept": "palabra reservada", 
        "description": "Sirve para terminar un m\u00e9todo, devolviendo el resultado, si el m\u00e9todo lo requiere. Las sentencias return provocan la terminaci\u00f3n del m\u00e9todo en el que aparecen, incluso si estamos dentro de alg\u00fan bucle.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "return", 
        "examples": [
            "public\r\n  int buscaPunto(String s) {  \u00a0\u00a0\u00a0 for (int p = 0; p < s.length(); p++) {\r\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 char c = s.charAt(p);  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (c == \u2018.\u2019)  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return p;  \u00a0\u00a0\u00a0 }  \u00a0\u00a0\u00a0 return \u20131;  }"
        ], 
        "id": "256"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/353.html": {
        "definition": "Java proporciona en la clase Math un amplio surtido de funciones matem\u00e1ticas", 
        "concept": "clase", 
        "description": "Java proporciona en la clase Math un amplio surtido de funciones matem\u00e1ticas. A continuaci\u00f3n de citan algunas de uso corriente, sin \u00e1nimo de ser exhaustivos:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "Math", 
        "examples": [
            "T abs(T x)", 
            "T max(T x, T y)", 
            "T min(T x, T y)", 
            "double sqrt(double x)", 
            "double exp(double x)", 
            "double log(double x)", 
            "double log10(double x)", 
            "double pow(double a, double b)", 
            "long round(double x) int round(float x) double rint(double x)", 
            "double sin(double angulo) double cos(double angulo) double tan(double angulo) double asin(double seno) double acos(double coseno) double atan(double tangente) double atan2(double dy,  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double dx)", 
            "double toDegrees(double rads) double toRadians(double grados)"
        ], 
        "id": "353"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/110.html": {
        "definition": "Es costumbre muy extendida establecer unas normas de estilo para escribir programas", 
        "description": "Es costumbre muy extendida establecer unas normas de estilo para escribir programas. Las normas de estilo son arbitrarias, pero permiten leer (y entender) los programas con facilidad. Los siguientes p\u00e1rrafos presentan algunas reglas que son ampliamente utilizadas en java.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/111.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/112.html"
        ], 
        "title": "66", 
        "alternative": "Estilo de codificaci\u00f3n ", 
        "id": "110"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/355.html": {
        "definition": "Madre de un conjunto de clases para escribir ficheros byte a byte", 
        "concept": "clase abstracta", 
        "description": "Madre de un conjunto de clases para escribir ficheros byte a byte. La clase derivada m\u00e1s habitual es java.io.FileOutputStream FileOutputStream(File file) constructor FileOutputStream(File file, boolean append) constructor: a\u00f1ade al final FileOutputStream(String nombre) constructor FileOutputStream(String nombre, boolean append) constructor: a\u00f1ade al final Todas las clases derivadas de OutputStream proporcionan estos m\u00e9todos: java.io.OutputStream void close() cierra el fichero, asegurando que todo queda bien escrito en el fichero en disco void write(byte[] b) escribe en el fichero el array de bytes void write(byte[] b, int start, int n) escribe 'n' bytes en el fichero, concretamente, los del array 'b', empezando en la posici\u00f3n 'start'. Ejemplo de uso: OutputStream escribe bytes (8 bits). Si necesita escribir caracteres (16 bits), debe utilizar la clase Writer . Ver \u201c File \u201d, \u201c Writer \u201d, \u201c InputStream .", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/356.html"
        ], 
        "title": "OutputStream", 
        "examples": [
            "\u00a0\u00a0\u00a0 /** \u00a0\u00a0\u00a0\u00a0 * Escritura de bytes\r\n  en ficheros. \u00a0\u00a0\u00a0\u00a0 * \u00a0\u00a0\u00a0\u00a0 * @param fichero\r\n  nombre del fichero al que queremos escribir. \u00a0\u00a0\u00a0\u00a0 * @param bytes\u00a0\u00a0 bytes que queremos mandar al fichero. \u00a0\u00a0\u00a0\u00a0 * @throws IOException\r\n  si hay problemas al abrir o al escribir. \u00a0\u00a0\u00a0\u00a0 */ \u00a0\u00a0\u00a0\r\n  public void escribeBytes(String fichero, byte[] bytes) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throws IOException { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 OutputStream os = new FileOutputStream(fichero); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 os.write(bytes); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 os.close(); \u00a0\u00a0\u00a0\r\n  }\u00a0\u00a0\u00a0 "
        ], 
        "id": "355"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/244.html": {
        "definition": "Ver \u201c Visibilidad \u201d: \u00e1mbito de c\u00f3digo en el que un elemento de Java puede referenciarse por su nombre", 
        "concept": "palabra reservada", 
        "description": "Ver \u201c Visibilidad \u201d: \u00e1mbito de c\u00f3digo en el que un elemento de Java puede referenciarse por su nombre. Los elementos \u201cpublic\u201d pueden referenciarse desde cualquier punto del c\u00f3digo, incluyendo desde otros paquetes. public class X La clase X puede referenciarse desde cualquier punto del c\u00f3digo, incluyendo desde otros paquetes. Se pueden definir cero o una clase \u201cpublic\u201d en cada fichero del proyecto, siendo el nombre del fichero igual al de la clase (m\u00e1s la extensi\u00f3n \u201c.java\u201d). public resultado m\u00e9todo (argumentos) El m\u00e9todo puede referenciarse (ejecutarse) desde cualquier punto del c\u00f3digo, incluyendo desde otros paquetes. Se pueden definir m\u00e9todos \u201cprivate\u201d dentro de cualquier clase. public variable La variable puede referenciarse (leer o escribir) desde cualquier punto del c\u00f3digo, incluyendo desde otros paquetes. Se pueden definir variables \u201cpublic\u201d como campos de cualquier clase. Pero no se recomienda; es preferible definir las variables como \u201cprivate\u201d y estableces m\u00e9todos de acceso para lectura (getX() o isX()) y escritura (setX()).", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/300.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "public", 
        "id": "244"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/88.html": {
        "definition": "La actividad en la que se ejecutan las instrucciones del programa", 
        "concept": "concepto", 
        "description": "La actividad en la que se ejecutan las instrucciones del programa. En el caso de java, se suele emplear un int\u00e9rprete que trabaja sobre el c\u00f3digo interpretable.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/89.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/90.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/91.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/92.html"
        ], 
        "title": "Ejecuci\u00f3n", 
        "alternative": "execution", 
        "id": "88"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/163.html": {
        "id": "163", 
        "definition": "A veces no es evidente con qu\u00e9 \u201cif\u201d casa un \u201celse\u201d: java lo interpreta como", 
        "description": "A veces no es evidente con qu\u00e9 \u201cif\u201d casa un \u201celse\u201d: java lo interpreta como", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/161.html"
        ], 
        "title": "situaciones ambiguas"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/243.html": {
        "definition": "Ver \u201c Visibilidad \u201d: \u00e1mbito de c\u00f3digo en el que un elemento de Java puede referenciarse por su nombre", 
        "concept": "palabra reservada", 
        "description": "Ver \u201c Visibilidad \u201d: \u00e1mbito de c\u00f3digo en el que un elemento de Java puede referenciarse por su nombre. Los elementos \u201cprotected\u201d pueden referenciarse desde cualquier punto del c\u00f3digo dentro del mismo paquete en el que se define o en subclases (\u201cextend\u201d) de aquella en que se definen. protected class X La clase X puede referenciarse desde cualquier punto del c\u00f3digo dentro del mismo paquete en el que se define y, adem\u00e1s, en cualquier subclase de aquella en la que se define. Se pueden definir clases \u201cprotected\u201d dentro de otras clases o junto con otra clase en el mismo fichero. protected resultado m\u00e9todo (argumentos) El m\u00e9todo puede referenciarse (ejecutarse) desde cualquier punto del c\u00f3digo dentro del mismo paquete en el que se define y, adem\u00e1s, en cualquier subclase de aquella en la que se define siempre y cuando el objeto sea de la subclase. Se pueden definir m\u00e9todos \u201cprotected\u201d dentro de cualquier clase. protected variable La variable puede referenciarse (leer o escribir) desde cualquier punto del c\u00f3digo dentro del mismo paquete en el que se define y, adem\u00e1s, en cualquier subclase de aquella en la que se define siempre y cuando el objeto sea de la subclase. Se pueden definir variables \u201cprotected\u201d como campos de cualquier clase. Pero no se recomienda; es preferible definir las variables como \u201cprivate\u201d y estableces m\u00e9todos de acceso para lectura (getX() o isX()) y escritura (setX()).", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/300.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "protected", 
        "id": "243"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/78.html": {
        "id": "78", 
        "definition": "Son variables declaradas en la cabecera de un m\u00e9todo, entre par\u00e9ntesis", 
        "description": "Son variables declaradas en la cabecera de un m\u00e9todo, entre par\u00e9ntesis. Responden al esquema: [ final ] <tipo> identificador ; Su \u00e1mbito de uso abarca todo el m\u00e9todo.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/73.html"
        ], 
        "title": "Declaraci\u00f3n de argumentos de un m\u00e9todo"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/390.html": {
        "definition": "M\u00e9todo que deben definir los objetos que implemental la interface Comparable<T>", 
        "concept": "m\u00e9todo", 
        "description": "M\u00e9todo que deben definir los objetos que implemental la interface Comparable<T>. Esta interface define clases que disfrutan de una relaci\u00f3n de orden total, lo que se traduce en que las clases que implementen esta interface deben proporcionar un m\u00e9todo int compareTo(T x) que compara THIS con x, devolviendo Por medio de compareTo() establecemos una relaci\u00f3n de orden total en los objetos de una clase. Recuerde que las relaciones de orden total, <=, tienen las siguientes propiedades: (x <= x) (x <= y) and (y <= x) => x = y (x <= y) and (y <= z) => (x <= z) para todo x, y: (x <= y) or (y <= x) Ver \u201c Comparable \u201d. Ver \u201c equals() \u201d y \u201c compareTo() \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "compareTo", 
        "id": "390"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/63.html": {
        "definition": "Se dice que se usa el principio de composici\u00f3n cuando para construir una nueva clase empleamos otras clases ya definidas", 
        "concept": "concepto", 
        "description": "Se dice que se usa el principio de composici\u00f3n cuando para construir una nueva clase empleamos otras clases ya definidas. se dice que B usa la clase A. Ver \u201cDelegaci\u00f3n\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/81.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/64.html"
        ], 
        "title": "Composici\u00f3n", 
        "alternative": "composition", 
        "id": "63"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/113.html": {
        "definition": "En Java s\u00f3lo se usan para identificar bucles y forzar sentencias \u201cbreak\u201d y \u201ccontinue\u201d", 
        "concept": "concepto", 
        "description": "En Java s\u00f3lo se usan para identificar bucles y forzar sentencias \u201cbreak\u201d y \u201ccontinue\u201d. En general, dan pie a c\u00f3digo dif\u00edcilmente inteligible, por lo que no se recomienda su uso salvo en ocasiones muy justificadas. Lo normal es que una sentencia \u201cbreak fuerce la salida del bucle m\u00e1s interno en ejecucion. Si queremos salir de otro bucle m\u00e1s externo, lo marcaremos con una etiqueta X: y saldremos de \u00e9l escribiendo Sirva el siguiente m\u00e9todo de ejemplo, aunque parece evidente que se podr\u00eda programar con ayuda de alg\u00fan m\u00e9todo auxiliar y, probablemente, quedar\u00eda m\u00e1s claro: Lo normal es que una sentencia \u201ccontinue\u201d fuerce el salto a la siguiente vuelta del bucle m\u00e1s interno en ejecucion. Si queremos retomar otro bucle m\u00e1s externo, lo marcaremos con una etiqueta X: y regresaremos a \u00e9l escribiendo Sirva el siguiente m\u00e9todo de ejemplo, aunque parece evidente que se podr\u00eda programar con ayuda de alg\u00fan m\u00e9todo auxiliar y, probablemente, quedar\u00eda m\u00e1s claro:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/33.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Etiquetas", 
        "examples": [
            "public\r\n  class TrianguloPitagorico { \u00a0\u00a0\u00a0 public static void main(String[]\r\n  argumentos) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int a = -1, b = -1, c = -1; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 busqueda: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int ijk = 1; ijk < 100;\r\n  ijk++) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int i = 1; i < ijk; i++) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int j = 1; i + j <\r\n  ijk; j++) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int k = 1; i + j + k\r\n  < ijk; k++) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (i * i + j * j ==\r\n  k * k) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 a = i; b = j; c =\r\n  k; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break busqueda; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\"a= \" +\r\n  a + \"; b= \" + b + \"; c= \" + c + \";\"); \u00a0\u00a0\u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "\u00a0\u00a0\u00a0 /** \u00a0\u00a0\u00a0\u00a0 * Enuentra la primera l\u00ednea tal que los\r\n  datos de las columnas \u00a0\u00a0\u00a0\u00a0 * est\u00e1n ordenados (valores estrictamente\r\n  crecientes). \u00a0\u00a0\u00a0\u00a0 * \u00a0\u00a0\u00a0\u00a0 * @param matriz no ncesariamente\r\n  rectangular. \u00a0\u00a0\u00a0\u00a0 * @return fila con datos ordenados, o -1\r\n  si no hay ninguna. \u00a0\u00a0\u00a0\u00a0 */ \u00a0\u00a0\u00a0 static int fileOrdenada(int[][] matriz) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 filas: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int fila = 0; fila <\r\n  matriz.length; fila++) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int columna = 1;  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 columna < matriz[fila].length;  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 columna++) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int v1 = matriz[fila][columna\r\n  - 1]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int v2 =\r\n  matriz[fila][columna]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (v1 >= v2) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 continue filas; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0return fila; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return -1; \u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "alternative": "labels", 
        "id": "113"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/55.html": {
        "definition": "Se usa para definir Clases ", 
        "concept": "palabra reservada", 
        "description": "Se usa para definir Clases .", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/52.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "class", 
        "id": "55"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/277.html": {
        "definition": "Es frecuente utilizar \u201cthis\u201d cuando hay ambig\u00fcedad entre los campos del objeto y otras variables de \u00e1mbito m\u00e1s cercano", 
        "description": "Es frecuente utilizar \u201cthis\u201d cuando hay ambig\u00fcedad entre los campos del objeto y otras variables de \u00e1mbito m\u00e1s cercano.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/276.html"
        ], 
        "title": "Uso de this para acceder a campos del objeto", 
        "examples": [
            "public\r\n  class Punto {  \u00a0\u00a0\u00a0 private double x;  \u00a0\u00a0\u00a0 private double y;  \u00a0 \u00a0\u00a0\u00a0 public Punto(double x, double y) {  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.x = x;  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.y = y;  \u00a0\u00a0\u00a0 }  }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "277"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/283.html": {
        "definition": "Se dice de los siguientes \u00b7 enteros: int, byte, short y long \u00b7 reales: double y float \u00b7 caracteres: char \u00b7 valores l\u00f3gicos: boolean", 
        "description": "Se dice de los siguientes \u00b7 enteros: int, byte, short y long \u00b7 reales: double y float \u00b7 caracteres: char \u00b7 valores l\u00f3gicos: boolean", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/174.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/41.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/260.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/197.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/85.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/137.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/51.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/31.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "169", 
        "alternative": "Tipos primitivos ", 
        "id": "283"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/366.html": {
        "definition": "Dentro de las colecciones de datos que java proporciona en su biblioteca b\u00e1sica, esta interfaz recoge los conjuntos de datos que se caracterizan porque: \u00b7 no se respeta el orden en el que se insertan elementos \u00b7 no pueden haber elementos duplicados \u00b7 el tama\u00f1o del conjunto se adapta din\u00e1micamente a lo que haga falta", 
        "concept": "interface", 
        "description": "Dentro de las colecciones de datos que java proporciona en su biblioteca b\u00e1sica, esta interfaz recoge los conjuntos de datos que se caracterizan porque: \u00b7 no se respeta el orden en el que se insertan elementos \u00b7 no pueden haber elementos duplicados \u00b7 el tama\u00f1o del conjunto se adapta din\u00e1micamente a lo que haga falta", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/367.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/368.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/369.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/370.html"
        ], 
        "title": "Set<E>", 
        "id": "366"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/382.html": {
        "definition": "Listas \u201cnormales\u201d", 
        "concept": "clase", 
        "description": "Listas \u201cnormales\u201d. Es una variante que se puede considerar obsoleta. Ver \u201c ArrayList \u201d. Ver \u201c List \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "Vector<E>", 
        "id": "382"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/369.html": {
        "definition": "", 
        "description": "", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/366.html"
        ], 
        "title": "ejemplo de uso", 
        "examples": [
            "\u00a0\u00a0\u00a0\r\n  Set<Integer> conjunto = new HashSet<Integer>(); \u00a0 \u00a0\u00a0\u00a0\r\n  conjunto.add(1); \u00a0\u00a0\u00a0 conjunto.add(9); \u00a0\u00a0\u00a0 conjunto.add(5); \u00a0\u00a0\u00a0 conjunto.add(9); \u00a0\u00a0\u00a0 System.out.println(conjunto.size()); \u00a0\u00a0\u00a0 for (int n: conjunto) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.print(n + \" \"); \u00a0\u00a0\u00a0\r\n  } \u00a0\u00a0\u00a0\r\n  System.out.println();"
        ], 
        "id": "369"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/146.html": {
        "definition": "Bajo la expresi\u00f3n \u201csoporte de gen\u00e9ricos\u201d java proporciona dos facilidades de programaci\u00f3n bastante diferentes: \u00b7 tipos gen\u00e9ricos; que son clases parametrizadas por uno o m\u00e1s tipos que deben ser facilitados por el programador cuando quiera usar la clase creando objetos \u00b7 m\u00e9todos gen\u00e9ricos, que son m\u00e9todos en los que los argumentos y/o el resultado incluyen referencias a tipos que no se conocer\u00e1n hasta que vayamos a usar el m\u00e9todo Probablemente el principal motivo para el uso de gen\u00e9ricos en java sea la necesidad de disponer de colecciones homog\u00e9neas de objetos (listas, conjuntos, etc", 
        "concept": "concepto", 
        "description": "Bajo la expresi\u00f3n \u201csoporte de gen\u00e9ricos\u201d java proporciona dos facilidades de programaci\u00f3n bastante diferentes: \u00b7 tipos gen\u00e9ricos; que son clases parametrizadas por uno o m\u00e1s tipos que deben ser facilitados por el programador cuando quiera usar la clase creando objetos \u00b7 m\u00e9todos gen\u00e9ricos, que son m\u00e9todos en los que los argumentos y/o el resultado incluyen referencias a tipos que no se conocer\u00e1n hasta que vayamos a usar el m\u00e9todo Probablemente el principal motivo para el uso de gen\u00e9ricos en java sea la necesidad de disponer de colecciones homog\u00e9neas de objetos (listas, conjuntos, etc. facilitados en el paquete java.util). As\u00ed el ejemplo m\u00e1s habitual del uso de gen\u00e9ricos es la clase lista gen\u00e9rica, definida como donde E queda a definir. Se dice que E es un tipo formal. En ingl\u00e9s se suele emplear la expresi\u00f3n \u201ctype parameter\u201d para referirse a esos par\u00e1metros formales que no se refieren a valores, sino a tipos de valores. En la traducci\u00f3n al espa\u00f1ol, \u201cpar\u00e1metros de tipo\u201d suena muy extra\u00f1o, por lo que emplearemos la forma m\u00e1s t\u00e9cnica \u201ctipo formal\u201d indicando que cuando se vaya a utilizar la clase hay que proporcionar un \u201ctipo real\u201d. Con esta clase gen\u00e9rica podemos crear objetos de diferentes tipos \u00b7 new ArrayList<String> es una lista de String \u00b7 new ArrayList<Integer> es una lista de Integer \u00b7 new ArrayList<Punto> es una lista de objetos de clase Punto donde todos ellos se caracterizan por crear listas homog\u00e9neas (todos los elementos son del mismo tipo), resultando programas limpios y, probablemente, con menos errores. El objetivo de los gen\u00e9ricos con java es \u00b7 desplazar a tiempo de compilaci\u00f3n los tradicionales errores de ejecuci\u00f3n que ocurr\u00edan en programas con fuerte uso de downcasting \u00b7 si el compilador no se queja, se puede asegurar que no habr\u00e1 errores de tipo de datos (casting) en ejecuci\u00f3n \u201cQuejarse\u201d quiere decir que el compilador protesta como se puede ver en el siguiente ejemplo, al compilar la clase Queue_Array que se usa un poco m\u00e1s adelante:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/147.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/148.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/149.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/150.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/151.html"
        ], 
        "title": "Gen\u00e9ricos", 
        "examples": [
            "$\r\n  javac Queue_Array.java Note:\r\n  Queue_Array.java uses unchecked or unsafe operations. Note:\r\n  Recompile with -Xlint:unchecked for details. \u00a0 jam@toshiba-a10\r\n  /c/home/doc/PET/exs/genericos $\r\n  javac -Xlint:unchecked Queue_Array.java Queue_Array.java:23:\r\n  warning: [unchecked] unchecked cast found\u00a0\u00a0 : java.lang.Object required:\r\n  T \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 T x = (T) data[0]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ^ 1 warning\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "alternative": "generics", 
        "id": "146"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/345.html": {
        "definition": "List y arrays son intercambiables, con la principal diferencia de que en un array hay que indicar el tama\u00f1o al construirlo, mientras que las List se adaptan autom\u00e1ticamente al n\u00famero de datos que contienen", 
        "description": "List y arrays son intercambiables, con la principal diferencia de que en un array hay que indicar el tama\u00f1o al construirlo, mientras que las List se adaptan autom\u00e1ticamente al n\u00famero de datos que contienen. Si necesita un array y tiene una lista: java.util.List list = Arrays.asList(array); Trabaja sobre Object: public static List asList(Object[] a) Si tiene una lista y necesita un array: Object array[] = list.toArray(); Trabaja sobre Object: public Object[] toArray() Si ya tiene el array creado y desea llenarlo con los elementos de la lista: public Object[] toArray(Object[] a) Una ventaja de este \u00faltimo m\u00e9todo es que respeta el tipo de los elementos, lo que combinado con el hecho de que crea el array si no existe o si no tiene espacio para todos los elementos de la lista, permite escribir cosas de este tipo: String[] x = (String[]) v.toArray(new String[0]); Ver \u201c \u00bfarrays o listas?", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/341.html"
        ], 
        "title": "list frente a arrays", 
        "examples": [
            "String[] x;", 
            "List<String> x;", 
            "x = new String[1000];", 
            "x = new ArrayList<String>();", 
            "... = x[20];", 
            "... = x.get(20);", 
            "x[20] = \"1492\";", 
            "x.set(20, \"1492\");", 
            "\u00a0", 
            "x.add(\"2001\");"
        ], 
        "id": "345"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/33.html": {
        "definition": "Se emplea para forzar la terminaci\u00f3n de un bucle ", 
        "concept": "palabra reservada", 
        "description": "Se emplea para forzar la terminaci\u00f3n de un bucle . Es \u00fatil en bucles cuya condici\u00f3n de terminaci\u00f3n no se puede chequear c\u00f3modamente ni al principio (bucles \" while \") ni al final (bucles \" do-while \"). Aunque es muy pr\u00e1ctico, puede dar lugar a programas de dif\u00edcil lectura. Se recomienda NO usar sentencias \"break\" salvo que sea evidente su necesidad. Las sentencias \u201cbreak\u201d tambi\u00e9n se emplean en construcciones \u201c switch \u201d. Ver \"continue\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/34.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/302.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/83.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/275.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/69.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "break", 
        "examples": [
            "for\r\n  ( ; ; ) { \u00a0\u00a0\u00a0 String linea = entrada.readLine();\n\u00a0\u00a0\u00a0 if (linea == null) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break; \u00a0\u00a0\u00a0 // se hace algo con la l\u00ednea le\u00edda }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "String\r\n  linea = \u00a0\u00a0\u00a0 teclado.readLine(); while\r\n  (linea != null) { \u00a0\u00a0\u00a0 procesa(linea);  \u00a0\u00a0\u00a0 linea = teclado.readLine(); }", 
            "for\r\n  ( ; ; ) {  \u00a0\u00a0\u00a0 String linea = \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 teclado.readLine();  \u00a0\u00a0\u00a0 if (linea == null)  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break;  \u00a0\u00a0\u00a0 procesa(linea);  }"
        ], 
        "id": "33"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/177.html": {
        "id": "177", 
        "definition": "Cuando sabemos qu\u00e9 queremos; pero \u00b7 no sabemos (a\u00fan) c\u00f3mo hacerlo \u00b7 lo har\u00e1 otro \u00b7 lo haremos de varias maneras Las interfaces son muy \u00fatiles para hacer upcasting (decir que una variable es de la clase interface y asignarle referencias a valores de clases que la implementan)", 
        "description": "Cuando sabemos qu\u00e9 queremos; pero \u00b7 no sabemos (a\u00fan) c\u00f3mo hacerlo \u00b7 lo har\u00e1 otro \u00b7 lo haremos de varias maneras Las interfaces son muy \u00fatiles para hacer upcasting (decir que una variable es de la clase interface y asignarle referencias a valores de clases que la implementan).", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/176.html"
        ], 
        "title": "\u00bfcu\u00e1ndo usar interfaces?"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/339.html": {
        "definition": "El siguiente ejemplo es una clase que trabaja sobre una serie de n\u00fameros, dejando pasar s\u00f3lo aquellos que son m\u00faltiplos de N", 
        "description": "El siguiente ejemplo es una clase que trabaja sobre una serie de n\u00fameros, dejando pasar s\u00f3lo aquellos que son m\u00faltiplos de N. Para ello necesita consumir varios datos de entrada en cada paso, hasta que encuentra un n\u00famero que valga o se acabe la lista de entrada.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/334.html"
        ], 
        "title": "ejemplo: iterador sobre otro iterador", 
        "examples": [
            "public class FiltraMultiplos \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 implements Iterator<Integer> { \u00a0\u00a0\u00a0\r\n  private final Iterator<Integer> entrada; \u00a0\u00a0\u00a0 private final int n; \u00a0\u00a0\u00a0\r\n  private boolean hayMas; \u00a0\u00a0\u00a0\r\n  private Integer siguiente; \u00a0 \u00a0\u00a0\u00a0 public\r\n  FiltraMultiplos(Iterator<Integer> entrada, int n) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  this.entrada = entrada; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  this.n = n; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  calculaSiguientePaso(); \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0\r\n  private void calculaSiguientePaso() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  while (true) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  hayMas = entrada.hasNext(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (!hayMas) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  siguiente = entrada.next(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  if (siguiente % n == 0) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  break; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\r\n  } \u00a0 \u00a0\u00a0\u00a0\r\n  public boolean hasNext() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return hayMas; \u00a0\u00a0\u00a0\r\n  } \u00a0 \u00a0\u00a0\u00a0\r\n  public Integer next() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (!hayMas) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throw\r\n  new NoSuchElementException(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  Integer devolver = siguiente; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  calculaSiguientePaso(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return devolver; \u00a0\u00a0\u00a0\r\n  } \u00a0 \u00a0\u00a0\u00a0\r\n  public void remove() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throw new\r\n  UnsupportedOperationException(); \u00a0\u00a0\u00a0 } }"
        ], 
        "id": "339"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/131.html": {
        "definition": "Las clases e interfaces se editan en ficheros que se caracterizan por tener la extensi\u00f3n ", 
        "description": "Las clases e interfaces se editan en ficheros que se caracterizan por tener la extensi\u00f3n .java. Un fichero .java \u00b7 puede contener una o m\u00e1s clases o interfaces \u00b7 s\u00f3lo puede contener una clase o interface calificada como public \u00b7 si hay una clase o interface public, el nombre del fichero coincidir\u00e1 con el de dicha clase Si la clase o interface pertenece a un paquete, debe estar en una estructura de directorios que refleje la estructura de paquetes. Esta regla NO es obligatoria; pero si se la salta probablemente se encuentre en confusas situaciones para localizar las clases deseadas. Para compilar un fichero, use la herramienta \u201cjavac\u201d. El resultado es un fichero .class que tambi\u00e9n se atendr\u00e1 a la regla que relaciona directorios con paquetes (pero, en este caso, se encarga la propia herramienta \u201cjava\u201d). Tambi\u00e9n puede usar cualquiera de los entornos de desarrollo disponibles.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Ficheros", 
        "examples": [
            "package a;", 
            ".../a", 
            "package a.b;", 
            ".../a/b"
        ], 
        "id": "131"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/280.html": {
        "definition": "Para indicar que un m\u00e9todo puede lanzar una excepci\u00f3n, renunciando a capturarla internamente", 
        "concept": "palabra reservada", 
        "description": "Para indicar que un m\u00e9todo puede lanzar una excepci\u00f3n, renunciando a capturarla internamente. Ver \u201cExcepciones\u201d. Es necesario indicar expl\u00edcitamente cualquier excepci\u00f3n que pueda ser lanzada, excepto aquellas que sean subclases ( extends ) de \u00b7 java.lang.Error \u00b7 java.lang.RuntimeException", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/114.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/127.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "throws", 
        "id": "280"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/104.html": {
        "definition": "Es un tipo de excepciones que recoge situaciones francamente anormales tales como defectos en el propio sistema de ejecuci\u00f3n de programas java", 
        "concept": "clase", 
        "description": "Es un tipo de excepciones que recoge situaciones francamente anormales tales como defectos en el propio sistema de ejecuci\u00f3n de programas java. Son situaciones excepcionales que superan al programador y que por tanto, no se espera que este intente capturarlas, sino m\u00e1s bien ponerse en contacto con el fabricante para la reparaci\u00f3n del producto. Ver \u201cException\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/117.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Error", 
        "id": "104"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/74.html": {
        "id": "74", 
        "definition": "Las variables tienen un nombre que debe ser \u00fanico en \u00c1mbito en que se declaran y se usan", 
        "description": "Las variables tienen un nombre que debe ser \u00fanico en \u00c1mbito en que se declaran y se usan. La declaraci\u00f3n debe indicar el tipo de valores que puede contener, bien un tipo primitivo, bien alg\u00fan tipo o clase del programa. <\u00e1mbito> [ static ] [ final ] <tipo> identificador [ = <valor_inicial> ] ;", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/73.html"
        ], 
        "title": "Declaraci\u00f3n de variables"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/154.html": {
        "definition": "M\u00e9todo est\u00e1ndar disponible en todos los objetos", 
        "concept": "m\u00e9todo", 
        "description": "M\u00e9todo est\u00e1ndar disponible en todos los objetos. Devuelve un n\u00famero entero propio que caracteriza el objeto. El m\u00e9todo base proporcionado en java.lang.Object es heredado por todos los objetos, devolviendo un valor \u00fanico, exclusivo e inmutable para cada objeto creado. Las clases creadas por el programador pueden devolver otro valor con la \u00fanica condici\u00f3n de que \u00b7 si dos objetos A y B son iguales seg\u00fan el m\u00e9todo \u201cequals()\u201d, entonces ambos deben devolver el mismo hashCode es decir, que el valor \u201chash\u201d de un objeto no tiene porque ser ni \u00fanico, ni exclusivo, ni inmutable. El valor \u201chash\u201d sirve para discriminar r\u00e1pidamente si dos objetos son diferentes antes de llamar a equals(): Regla: si redefine equals(), debe redefinir hashCode(). Ver \"equals()\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/103.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/397.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/407.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/399.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/403.html"
        ], 
        "title": "hashCode", 
        "id": "154"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/365.html": {
        "definition": "", 
        "description": "", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/363.html"
        ], 
        "title": "Ejemplo: entrada de datos por consola", 
        "examples": [
            "\u00a0\u00a0\u00a0\u00a0\u00a0 Scanner scanner = new Scanner(System.in); \u00a0\u00a0\u00a0\u00a0\u00a0 System.out.print(\"Escriba\r\n  dos n\u00fameros: \"); \u00a0\u00a0\u00a0\u00a0\u00a0 double x = scanner.nextDouble(); \u00a0\u00a0\u00a0\u00a0\u00a0 double y = scanner.nextDouble(); \u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\"producto:\r\n  \" + (x + y));", 
            "Escriba dos\r\n  n\u00fameros: 3,1416 2 producto:\r\n  5.1416"
        ], 
        "id": "365"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/136.html": {
        "id": "136", 
        "definition": "S\u00ed; pero se considera una mala praxis", 
        "description": "S\u00ed; pero se considera una mala praxis. El efecto es que la ejecuci\u00f3n lineal termina inmediatamente y sale volando la excepci\u00f3n a la b\u00fasqueda de un \"catch\" que la atrape.. Tanto si hemos llegado al \"finally\" por un \"return\" o un \"throw\" dentro del \"try-catch\", el efecto es el mismo: la excepci\u00f3n lanzada por el \"finally\" sale volando y java se olvida de lo dem\u00e1s. NO OBSTANTE, se suele considerar un error poner una sentencia THROW dentro de un bloque finally, pues se perder\u00eda la raz\u00f3n original para salir de bloque try.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/133.html"
        ], 
        "title": "\u00bfPuede lanzarse una excepci\u00f3n desde dentro del finally?"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/158.html": {
        "id": "158", 
        "definition": "Una clase final no se puede extender", 
        "description": "Una clase final no se puede extender. Un m\u00e9todo final no se puede redefinir. En una clase final, todos los m\u00e9todos son final.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/155.html"
        ], 
        "title": "final"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/124.html": {
        "definition": "", 
        "description": "", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/122.html"
        ], 
        "title": "l\u00f3gicas", 
        "examples": [
            "a < b", 
            "a <= b", 
            "a == b", 
            "a > b", 
            "a >= b", 
            "boolean bisiesto(int a\u00f1o) {  \u00a0\u00a0\u00a0 boolean multiplo4 = a\u00f1o % 4 == 0;  \u00a0\u00a0\u00a0 boolean multiplo100 = a\u00f1o % 100 == 0;  \u00a0\u00a0\u00a0 boolean multiplo400 = a\u00f1o % 400 == 0;  \u00a0\u00a0\u00a0 return (multiplo4 && (!\r\n  multiplo100)) || multiplo400;  }"
        ], 
        "id": "124"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/96.html": {
        "definition": "Criterio de dise\u00f1o de clases que recomienda juntar en una misma clase las variables y los m\u00e9todos que las gestionan", 
        "concept": "concepto", 
        "description": "Criterio de dise\u00f1o de clases que recomienda juntar en una misma clase las variables y los m\u00e9todos que las gestionan. Una buena encapsulaci\u00f3n debe llevar a que todos los campos de los objetos sean private y s\u00f3lo se puedan acceder o alterar a trav\u00e9s de los m\u00e9todos de la clase. La ventaja que se obtiene es un absoluto control sobre el acceso a dichos campos. Un caso extremo de encapsulaci\u00f3n es el denominado \u201cTipo Abstracto de Datos\u201d (TAD). Se dice que una clase es un TAD cuando se puede cambiar completamente la representaci\u00f3n interna del estado del objeto sin que otras clases que la usan lo perciban; es decir, cuando los m\u00e9todos ocultan completamente la representaci\u00f3n interna. La ventaja que se obtiene es la posibilidad de cambiar el c\u00f3digo de la clase sin tocar otras clases del programa; por ejemplo, para optimizar el tiempo de ejecuci\u00f3n. En ingles se dice \"ADT \u2013 Abstract Data Types\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Encapsulaci\u00f3n", 
        "alternative": "encapsulation", 
        "id": "96"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/370.html": {
        "definition": "Normalmente los conjuntos se utilizan indicando el tipo de objetos que pueden contener", 
        "description": "Normalmente los conjuntos se utilizan indicando el tipo de objetos que pueden contener. Pero tambi\u00e9n se pueden utilizar conjuntos sobre Objetos en general, lo que permite conjuntos heterog\u00e9neos a cambio de ser (t\u00edpicamente) necesario el uso de downcasting en la recuperaci\u00f3n de los elementos. El mismo ejemplo anterior quedar\u00eda as\u00ed:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/366.html"
        ], 
        "title": "conjuntos de Object", 
        "examples": [
            "\u00a0\u00a0\u00a0 Set conjunto = new HashSet(); \u00a0 \u00a0\u00a0\u00a0\r\n  conjunto.add(1); \u00a0\u00a0\u00a0\r\n  conjunto.add(9); \u00a0\u00a0\u00a0 conjunto.add(5); \u00a0\u00a0\u00a0 conjunto.add(9); \u00a0\u00a0\u00a0 System.out.println(conjunto.size()); \u00a0\u00a0\u00a0\r\n  for\r\n  (Iterator it = conjunto.iterator(); it.hasNext();) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int n = (Integer) it.next(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.print(n + \" \"); \u00a0\u00a0\u00a0\r\n  } \u00a0\u00a0\u00a0\r\n  System.out.println();"
        ], 
        "id": "370"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/264.html": {
        "definition": "Se utiliza para referirse a los miembros de una clase", 
        "concept": "palabra reservada", 
        "description": "Se utiliza para referirse a los miembros de una clase.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/265.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/266.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/267.html"
        ], 
        "title": "static", 
        "id": "264"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html": {
        "id": "303", 
        "definition": "Java proporciona un amplio conjunto de clases para agilizar tareas comunes", 
        "description": "Java proporciona un amplio conjunto de clases para agilizar tareas comunes. Ver [http://java.sun.com/javase/6/docs/api/index.html] En esta secci\u00f3n se recogen de forma no exhaustiva algunas de las clases de uso m\u00e1s frecuente.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/304.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/305.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/306.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/307.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/311.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/312.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/313.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/314.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/316.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/318.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/319.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/320.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/321.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/322.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/323.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/329.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/330.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/331.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/332.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/333.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/334.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/340.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/341.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/347.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/353.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/354.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/355.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/357.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/360.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/361.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/363.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/366.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/371.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/416.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/372.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/373.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/375.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/376.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/377.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/378.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/379.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/380.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/381.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/382.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/383.html"
        ], 
        "title": "Las Bibliotecas de Java"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/367.html": {
        "definition": "En lo que sigue, un elemento \u201cx\u201d es \u201cequals\u201d a otro elemento \u201cy\u201d s\u00ed y s\u00f3lo si \u201cx", 
        "description": "En lo que sigue, un elemento \u201cx\u201d es \u201cequals\u201d a otro elemento \u201cy\u201d s\u00ed y s\u00f3lo si \u201cx.equals(y) == true\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/366.html"
        ], 
        "title": "m\u00e9todos de la interface", 
        "examples": [
            "boolean add(E elemento)  void clear()  boolean contains(E elemento)  boolean equals(Object x)  boolean isEmpty()  Iterator<E> iterator()  boolean remove(E elemento)  int size() "
        ], 
        "id": "367"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/373.html": {
        "definition": "Los \u201cString\u201d son objetos de java con una sintaxis especialmente c\u00f3moda para representar cadenas de caracteres", 
        "concept": "clase", 
        "description": "Los \u201cString\u201d son objetos de java con una sintaxis especialmente c\u00f3moda para representar cadenas de caracteres. Los caracteres se codifican usando Unicode. Java permite escribir directamente cadenas entre comillas. Para incluir el car\u00e1cter comillas dobles en una cadena, escriba \"\"\" . Sobre cadenas se define la operaci\u00f3n de concatenar: La clase String define muchos m\u00e9todos interesantes para hacer programas: Los objetos String son inmutables. No hay forma de modificarlos una vez construidos. Por ello algunas operaciones sobre Strings son en extremo ineficientes debido a la creaci\u00f3n de objetos que se van a destruir a continuaci\u00f3n. Por ello es \u00fatil la clase StringBuilder que permite disponer de un solo objeto que se puede modificar. Las comparaciones entre String se limitan a usar el orden num\u00e9rico de los c\u00f3digos Unicode, lo que a veces choca con el orden al que estamos acostumbrados en los diccionarios, el orden lexicogr\u00e1fico, que depende de cada idioma. Para realizar comparaciones usando el orden lexicogr\u00e1fico propio de cada idioma, v\u00e9ase \u201cCollator\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/374.html"
        ], 
        "title": "String", 
        "examples": [
            "\u201cMiguel\u201d.length()", 
            "\u201cMiguel\u201d.equals(\u201cMiguel\u201d)", 
            "\u201cMiguel\u201d.equals(\u201cmiguel\u201d)", 
            "\u201cMiguel\u201d.equalsIgnoreCase(\u201cmiguel\u201d)", 
            "\u201cMiguel\u201d.compareTo(\u201cSaturnino\u201d)", 
            "\u201cMiguel\u201d.compareTo(\u201cMiguel\u201d)", 
            "\u201cMiguel\u201d.compareTo(\u201cMichelin\u201d)", 
            "\u201cMiguel\u201d.charAt(1)", 
            "\u201cMiguel\u201d.charAt(4)", 
            "\u201cMiguel\u201d.toCharArray()", 
            "\u201cMiguel\u201d.substring(1, 4)", 
            "\u201cMiguel.substring(1)", 
            "\u201ctragaldabas\u201d.indexOf('a')", 
            "\u201ctragaldabas\u201d.lasIndexOf('a')", 
            "\u201ctragaldabas\u201d.startsWith(\u201ctrag\u00f3n\u201d)", 
            "\u201ctragaldabas\u201d.endsWith(\u201cdabas\u201d)", 
            "\u201ctragaldabas\u201d.split(\u201ca\u201d)"
        ], 
        "id": "373"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/181.html": {
        "definition": "Int\u00e9rprete de c\u00f3digo interpretable ( Bytecode en ficheros ", 
        "concept": "herramienta est\u00e1ndar", 
        "description": "Int\u00e9rprete de c\u00f3digo interpretable ( Bytecode en ficheros .class). Se usa en consolas. Ver \u201c[Ejecuci\u00f3n]]\u201d. Ver \"jar\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/42.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/180.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "java", 
        "id": "181"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/141.html": {
        "definition": "Los arrays pueden recorrerse indistintamente con un contado o barriendo con un iterador", 
        "description": "Los arrays pueden recorrerse indistintamente con un contado o barriendo con un iterador. La segunda forma (derecha) es m\u00e1s compacta y deber\u00eda preferirse a la primera (izquierda) salvo cuando el contador \u201ci\u201d sea necesario para algo m\u00e1s.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/138.html"
        ], 
        "title": "recorrido de arrays", 
        "examples": [
            "for\r\n  (int i = 0;  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 i < datos.length;  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 i++) { \u00a0 System.out.print(datos[i] + \" \"); }", 
            "for\r\n  (int dato: datos) { \u00a0 System.out.print(dato + \" \"); }"
        ], 
        "id": "141"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/175.html": {
        "definition": "Relaci\u00f3n de clases, variables y m\u00e9todos proporcionados por el suministrador del sistema de programaci\u00f3n y que pueden ser empleados directamente por los programadores", 
        "concept": "concepto", 
        "description": "Relaci\u00f3n de clases, variables y m\u00e9todos proporcionados por el suministrador del sistema de programaci\u00f3n y que pueden ser empleados directamente por los programadores. Por ejemplo, el paquete Math proporciona m\u00e9todos para c\u00e1lculos trigonom\u00e9tricos. Ver [ http://java.sun.com/j2se/1.5.0/docs/api/]-", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Interfaz de programaci\u00f3n", 
        "id": "175"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/245.html": {
        "definition": "Ver \u201cM\u00e9todo / recursivos\u201d", 
        "concept": "concepto", 
        "description": "Ver \u201cM\u00e9todo / recursivos\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/211.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Recursi\u00f3n", 
        "id": "245"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/326.html": {
        "definition": "Ejemplos de uso habitual con String:", 
        "description": "Ejemplos de uso habitual con String:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/323.html"
        ], 
        "title": "Strings", 
        "examples": [
            "\u00a0 \"[%s]\", \"cadena normal\"", 
            "[cadena normal]", 
            "\u00a0 \"[%10s]\", \"cadena\r\n  normal\"", 
            "[cadena normal]", 
            "\u00a0 \"[%.10s]\", \"cadena\r\n  normal\"", 
            "[cadena nor]", 
            "\u00a0 \"[%10s]\", \"corta\"", 
            "[\u00a0\u00a0\u00a0\u00a0 corta]", 
            "\u00a0 \"[%-10s]\", \"corta\"", 
            "[corta\u00a0\u00a0\u00a0\u00a0 ]", 
            "\u00a0 \"[%10.3s]\", \"corta\"", 
            "[\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 cor]", 
            "\u00a0 \"[%-10.3s]\", \"corta\"", 
            "[cor\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ]", 
            "String format =  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  String.format(\"[%%%ds]%%n\", 10); format(format, \"corta\");", 
            "\u00a0 \u00a0 [\u00a0\u00a0\u00a0\u00a0 corta]"
        ], 
        "id": "326"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/255.html": {
        "definition": "Cuando el programador crea un objeto, java lo identifica por su referencia", 
        "concept": "concepto", 
        "description": "Cuando el programador crea un objeto, java lo identifica por su referencia. Gr\u00e1ficamente, puede concebirse una referencia como un puntero al objeto. Cuando a una variable se le asigna un objeto, exactamente se carga en la variable una copia del valor de dicho puntero. Cuando el valor de una variable se asigna a otra se carga en x otra copia del puntero almacenado en y. Se dice que ambas variables se refieren al mismo objeto o, en otras palabras, que el objeto es compartido por ambas variables. Al ser un objeto compartido, lo que se cambie a trav\u00e9s de una de las variables que lo referencian se ve cambiado para la otra. V\u00e9ase \u201cpaso de argumentos por referencia\u201d. Cuando una variable no apunta a ning\u00fan objeto, se dice que contiene la referencia \u201cnull\u201d que es la referencia que no apunta a nada.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Referencias", 
        "examples": [
            "Punto c, d; c =\r\n  new Punto(0, 0); d = c; c.x = 1; d.y = 2;"
        ], 
        "alternative": "references", 
        "id": "255"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/317.html": {
        "definition": "Esta clase compara String teniendo en cuenta, \u00fanicamente, su longitud:", 
        "description": "Esta clase compara String teniendo en cuenta, \u00fanicamente, su longitud:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/316.html"
        ], 
        "title": "Ejemplo", 
        "examples": [
            "public class Ejemplo \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 implements\r\n  Comparator<String> { \u00a0 \u00a0\u00a0\u00a0 public int compare(String\r\n  s1, String s2) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int n1= s1.length(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int n2= s2.length(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return n1 - n2; \u00a0\u00a0\u00a0 } }"
        ], 
        "id": "317"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/42.html": {
        "id": "42", 
        "definition": "Se dice del c\u00f3digo interpretable, que es ", 
        "description": "Se dice del c\u00f3digo interpretable, que es ... \u00b7 lo que hay en los ficheros .class \u00b7 lo que genera el compilador (javac) \u00b7 lo que pasamos al int\u00e9rprete (java) \u00b7 lo que ejecuta la m\u00e1quina virtual (JVM) Ver \"C\u00f3digo\". Ver \"Ejecuci\u00f3n\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/56.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/88.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Bytecode"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/273.html": {
        "definition": "En java, es sin\u00f3nimo de \u201csuperclase\u201d", 
        "concept": "concepto", 
        "description": "En java, es sin\u00f3nimo de \u201csuperclase\u201d. Ver \u201c extensi\u00f3n \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "superipo", 
        "id": "273"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/176.html": {
        "definition": "Es un elemento java que dice lo que se ofrece; pero no dice c\u00f3mo se hace", 
        "concept": "palabra reservada", 
        "description": "Es un elemento java que dice lo que se ofrece; pero no dice c\u00f3mo se hace. Una interface proporciona: \u00b7 valores constantes, que son variables \u201cpublic static final\u201d (no hace falta escribir estos modificadores: se sobreentienden) \u00b7 m\u00e9todos, que son \u201cpublic\u201d (no hace falta escribir el modificador: se sobreentiende) \u00b7 NO incluye constructores Las interfaces \u00b7 pueden extenderse con nuevas constantes y/o m\u00e9todos \u00b7 pueden implementarse totalmente dando lugar a una clase que debe proporcionar c\u00f3digo para todos y cada uno de los m\u00e9todos definidos \u00b7 pueden implementarse parcialmente dando lugar a una clase abstracta", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/177.html"
        ], 
        "title": "interface", 
        "examples": [
            "interface\r\n  A { \u00a0 /* public static final */ int CONSTANTE =\r\n  99; \u00a0 /* public */ void metodoA(); }", 
            "interface\r\n  B extends A { \u00a0 /* public */ void metodoB(); }", 
            "class\r\n  M implements A { \u00a0 public void metodoA() { c\u00f3digo } }", 
            "abstract\r\n  class N implements B { \u00a0 public void\r\n  metodoA() { c\u00f3digo } }"
        ], 
        "id": "176"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/364.html": {
        "definition": "", 
        "description": "", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/363.html"
        ], 
        "title": "Ejemplo: interacci\u00f3n con consola", 
        "examples": [
            "\u00a0\u00a0\u00a0\r\n  public static void main(String[] args) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Scanner scanner = new Scanner(System.in); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 while (true) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.print(\"\u00bfSigo?\r\n  [si/no] \"); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 String respuesta =\r\n  scanner.nextLine(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if\r\n  (respuesta.equalsIgnoreCase(\"si\")) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 continue; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (respuesta.equalsIgnoreCase(\"no\")) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(\"no entiendo esa respuesa: \" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  + respuesta); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(\"Adios.\"); \u00a0\u00a0\u00a0 }"
        ], 
        "id": "364"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/62.html": {
        "definition": "Ver \u201c Consola \u201d", 
        "concept": "CLI", 
        "description": "Ver \u201c Consola \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Command Line Interface", 
        "id": "62"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/217.html": {
        "definition": "Java maneja diferentes rangos de valores: float, y double", 
        "description": "Java maneja diferentes rangos de valores: float, y double. Lo normal, mientras no se indique lo contrario, es trabajar con reales double. Los n\u00fameros reales se caracterizan por \u00b7 un valor m\u00e1ximo, que es el m\u00e1ximo valor absoluto que se puede representar \u00b7 un valor m\u00ednimo, que es la m\u00ednima diferencia entre dos n\u00fameros reales (precisi\u00f3n) Notaci\u00f3n Un valor real se indica por medio de \u00b7 un signo; si no se indica, se presume que el valor es positivo \u00b7 una mantisa; que es una serie de d\u00edgitos decimales, posiblemente con un punto para indicar la posici\u00f3n de la coma decimal \u00b7 un exponente, que es opcional (si no se indica se presume que el exponente es 1); si aparece viene precedido de la letra 'E' y ser\u00e1 un valor entero en notaci\u00f3n decimal Ejemplos: \u00b7 3.1416, pi \u00b7 2.5E3, dos mil quinientos \u00b7 -1E-12, una millon\u00e9sima Si no se dice nada, el valor se interpreta con formato \u201cdouble\u201d. Si se quiere forzar la representaci\u00f3n: \u00b7 para que el valor sea \u201cfloat\u201d, debe terminarse con la letra \u201cf\u201d o \u201cF\u201d: \u00b7 1f, que es la unidad en representaci\u00f3n \u201cfloat\u201d \u00b7 para que el valor sea \u201cdouble\u201d, debe terminarse con la letra \u201cd\u201d o \u201cD\u201d: \u00b7 1d, que es la unidad en representaci\u00f3n \u201cdouble\u201d Valores fuera de rango \u00bfQu\u00e9 pasa si nos salimos de rango? Ver \"Desbordamiento\" y \"Underflow\". \u00bfQu\u00e9 tipo de reales debo usar? Java tiene un especial cari\u00f1o por los \"double\". Todos los n\u00fameros con cifras decimales los interpreta como \"double\", salvo que se le indique lo contrario. Lo m\u00e1s normal es que todos los reales sean de tipo \"double\", salvo que haya una necesidad evidente de recurrir a otro tipo:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/82.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/286.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/215.html"
        ], 
        "title": "reales", 
        "examples": [
            "public\r\n  class Reales { \u00a0 \u00a0 public static void main(String[] args) { \u00a0\u00a0\u00a0 double n = Double.MAX_VALUE; \u00a0\u00a0\u00a0 System.out.println(\"n=\u00a0\u00a0 \" + n); \u00a0\u00a0\u00a0 System.out.println(\"2n=\u00a0 \" + 2*n);\u00a0\u00a0\u00a0 // overflow \u00a0\u00a0\u00a0 System.out.println(); \u00a0 \u00a0\u00a0\u00a0 n = Double.MIN_VALUE; \u00a0\u00a0\u00a0 System.out.println(\"n=\u00a0\u00a0 \" + n); \u00a0\u00a0\u00a0 System.out.println(\"n/2= \" +\r\n  n/2);\u00a0\u00a0\u00a0 // underflow \u00a0 } }", 
            "n=\u00a0\u00a0 1.7976931348623157E308 2n=\u00a0 Infinity \u00a0 n=\u00a0\u00a0 4.9E-324 n/2= 0.0"
        ], 
        "id": "217"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/334.html": {
        "definition": "Interfaz normalizada para recorrer ordenadamente los elementos de una colecci\u00f3n", 
        "concept": "interface", 
        "description": "Interfaz normalizada para recorrer ordenadamente los elementos de una colecci\u00f3n. Define 3 m\u00e9todos a implementar: Con los iteradores se suelen construir los siguientes tipos de bucles Ver tambi\u00e9n \u201c Enumeration \u201d que era la interface que se usaba antes de existir \u201c Iterator \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/335.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/336.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/337.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/338.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/339.html"
        ], 
        "title": "Iterator<E>", 
        "examples": [
            "public interface Iterator<E> { \u00a0\u00a0\u00a0 /** \u00a0\u00a0\u00a0\u00a0 * @return TRUE si la\r\n  siguiente llamada a next()  \u00a0\u00a0\u00a0\u00a0 *\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 devolver\u00e1 un elemento \u00a0\u00a0\u00a0\u00a0 */ \u00a0\u00a0\u00a0 public\r\n  boolean hasNext(); \u00a0 \u00a0\u00a0\u00a0 /** \u00a0\u00a0\u00a0\u00a0 * @return el\r\n  siguiente elemento de la colecci\u00f3n \u00a0\u00a0\u00a0\u00a0 * @throws NoSuchElementException\n \u00a0\u00a0\u00a0\u00a0 *\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 si no hay ning\u00fan elemento que\r\n  devolver \u00a0\u00a0\u00a0\u00a0 */ \u00a0\u00a0\u00a0 public\r\n  E next(); \u00a0 \u00a0\u00a0\u00a0 /** \u00a0\u00a0\u00a0\u00a0 * Elimina de la\r\n  colecci\u00f3n el \u00faltimo elemento develto por next() \u00a0\u00a0\u00a0\u00a0 * @throws UnsupportedOperationException \u00a0\u00a0\u00a0\u00a0 *\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 si la operaci\u00f3n no es posible \u00a0\u00a0\u00a0\u00a0 * @throws IllegalStateException \u00a0\u00a0\u00a0\u00a0 *\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 si no se acaba de llamar a next()  \u00a0\u00a0\u00a0\u00a0 */ \u00a0\u00a0\u00a0\r\n  public void remove();\u00a0\u00a0 ", 
            "\u00a0\u00a0\u00a0\r\n  for (Iterator<E> ite = ...; ite.hasNext(); ) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 E elemento\r\n  = ite.next(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ... \u00a0\u00a0\u00a0 }", 
            "\u00a0\u00a0\u00a0\r\n  Iterator<E> ite = ...; \u00a0\u00a0\u00a0\r\n  while (ite.hasNext()) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 E elemento\r\n  = ite.next(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ... \u00a0\u00a0\u00a0 }"
        ], 
        "id": "334"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/356.html": {
        "definition": "Clase derivada de OutputStream, para escribir bytes en un fichero, proporcionando una serie de m\u00e9todos que facilitan tareas habituales: java", 
        "concept": "clase", 
        "description": "Clase derivada de OutputStream, para escribir bytes en un fichero, proporcionando una serie de m\u00e9todos que facilitan tareas habituales: java.io.PrintStream PrintStream(File file) constructor PrintStream(String fichero) constructor PrintStream(OutputStream out) constructor PrintStream(File file, String encoding) constructor PrintStream(String fichero, String encoding) constructor PrintStream format(String format, Object ... args) imprime los objetos en el fichero ver \u201c Formatter PrintStream printf(String format, Object ... args) imprime los objetos en el fichero ver \u201c Formatter void print(boolean b) void print(char c) void print(char[] s) void print(double d) void print(float f) void print(int i) void print(long l) void print(Object object) void print(String s) imprime el argumento void println() imprime un cambio de l\u00ednea void println(boolean b) void println(char c) void println(char[] s) void println(double d) void println(float f) void println(int i) void println(long l) void println(Object object) void println(String s) imprime el argumento, seguido de un cambio de l\u00ednea", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/355.html"
        ], 
        "title": "PrintStream", 
        "id": "356"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/391.html": {
        "id": "391", 
        "definition": "Los tipos primitivos carecen de m\u00e9todo equals()", 
        "description": "Los tipos primitivos carecen de m\u00e9todo equals(). Esto ocurre con enteros, reales, booleans y caracteres que simplemente o son iguales (==) o no lo son.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/103.html"
        ], 
        "title": "Tipos primitivos"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/134.html": {
        "id": "134", 
        "definition": "No hace nada: la excepci\u00f3n sale fuera del bloque try, despu\u00e9s de ejecutar el c\u00f3digo dentro del finally", 
        "description": "No hace nada: la excepci\u00f3n sale fuera del bloque try, despu\u00e9s de ejecutar el c\u00f3digo dentro del finally.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/133.html"
        ], 
        "title": "\u00bfQu\u00e9 hace finally con una excepci\u00f3n lanzada y no capturada dentro del try?"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/338.html": {
        "definition": "El siguiente ejemplo envuelve la generaci\u00f3n de n\u00fameros aleatorios en un iterador que devuelve una serie interminable de n\u00fameros aleatorios", 
        "description": "El siguiente ejemplo envuelve la generaci\u00f3n de n\u00fameros aleatorios en un iterador que devuelve una serie interminable de n\u00fameros aleatorios.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/334.html"
        ], 
        "title": "ejemplo: iterador que genera una serie aleatoria", 
        "examples": [
            "public class SerieAleatoria \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 implements Iterator<Integer> { \u00a0\u00a0\u00a0\r\n  private Random random; \u00a0 \u00a0\u00a0\u00a0\r\n  public SerieAleatoria() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 random = new Random(); \u00a0\u00a0\u00a0\r\n  } \u00a0 \u00a0\u00a0\u00a0\r\n  public boolean hasNext() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return true; \u00a0\u00a0\u00a0\r\n  } \u00a0 \u00a0\u00a0\u00a0\r\n  public Integer next() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return random.nextInt(); \u00a0\u00a0\u00a0\r\n  } \u00a0 \u00a0\u00a0\u00a0\r\n  public void remove() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throw new\r\n  UnsupportedOperationException(); \u00a0\u00a0\u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "338"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/7.html": {
        "id": "7", 
        "definition": "Cuando una clase abstracta se extiende, pero no se proporciona el cuerpo de alg\u00fan metodo, heredado o propio", 
        "description": "Cuando una clase abstracta se extiende, pero no se proporciona el cuerpo de alg\u00fan metodo, heredado o propio.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/4.html"
        ], 
        "title": "Subclases abstractas"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/344.html": {
        "definition": "", 
        "description": "", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/341.html"
        ], 
        "title": "ejemplo de uso", 
        "examples": [
            "\u00a0\u00a0\u00a0\r\n  List<Integer> lista = new ArrayList<Integer>(); \u00a0 \u00a0\u00a0\u00a0\r\n  lista.add(1); \u00a0\u00a0\u00a0\r\n  lista.add(9); \u00a0\u00a0\u00a0\r\n  lista.add(1, 5); \u00a0\u00a0\u00a0\r\n  System.out.println(lista.size()); \u00a0\u00a0\u00a0\r\n  System.out.println(lista.get(0)); \u00a0\u00a0\u00a0\r\n  System.out.println(lista.get(1)); \u00a0\u00a0\u00a0\r\n  System.out.println(lista.get(2)); \u00a0\u00a0\u00a0\r\n  for (int n: lista) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.print(n + \" \"); \u00a0\u00a0\u00a0\r\n  } \u00a0\u00a0\u00a0\r\n  System.out.println();"
        ], 
        "id": "344"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/269.html": {
        "definition": "En java, es sin\u00f3nimo de \" subclase \"", 
        "concept": "concepto", 
        "description": "En java, es sin\u00f3nimo de \" subclase \". Ver \u201c Extensi\u00f3n \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Subtipo", 
        "id": "269"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/203.html": {
        "id": "203", 
        "definition": "Los m\u00e9todos pueden declarar en la cabecera las excepciones que pueden lanzarse durante su ejecuci\u00f3n, bien porque las lanza el propio m\u00e9todo, bien porque las lanza alg\u00fan otro m\u00e9todo llamado desde este", 
        "description": "Los m\u00e9todos pueden declarar en la cabecera las excepciones que pueden lanzarse durante su ejecuci\u00f3n, bien porque las lanza el propio m\u00e9todo, bien porque las lanza alg\u00fan otro m\u00e9todo llamado desde este. El que un m\u00e9todo pueda lanzar una cierta excepci\u00f3n, no implica que la lance siempre; simplemente puede lanzarse o no. La cabecera puede declarar las excepciones. Hay varios casos a considerar: excepciones no chequeadas excepciones chequeadas Ver \u201c Exception y \"Excepciones y m\u00e9todos\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html"
        ], 
        "title": "excepciones"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/298.html": {
        "definition": "Cuando el bloque es el cuerpo de un m\u00e9todo, tambi\u00e9n se denominan \u201cvariables de m\u00e9todo\u201d o \u201cvariables autom\u00e1ticas\u201d", 
        "concept": "en un bloque", 
        "description": "Cuando el bloque es el cuerpo de un m\u00e9todo, tambi\u00e9n se denominan \u201cvariables de m\u00e9todo\u201d o \u201cvariables autom\u00e1ticas\u201d. Son aquellas que se se declaran en un bloque. Se crean cuando se declaran y se destruyen cuando el bloque termina. Cada vez que se ejecuta el bloque se crea una nueva variable. Si existen simult\u00e1neamente varias llamadas al bloque, existir\u00e1n simult\u00e1neamente varias variables, todas diferentes entre s\u00ed. Esto ocurre en m\u00e9todos recursivos. EJEMPLO B\u00fasqueda binaria (de diccionario). Dado un array ordenado de enteros, encontrar en qu\u00e9 posici\u00f3n se encuentra en n\u00famero N. Devuelve la posici\u00f3n de N en el array. Devuelve -1 si N no est\u00e1 en el array.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/289.html"
        ], 
        "title": "locales", 
        "examples": [
            "public\r\n  int busca (int n, int[] datos) { \u00a0 return\r\n  busquedaBinaria(n, datos, 0, datos.length); } \u00a0 // busca en el rango a..z private\r\n  int busquedaBinaria(int n, int[] datos, int a, int z) { \u00a0 if (a > z) \u00a0\u00a0\u00a0 return -1; \u00a0 int medio = (a + z) / 2; \u00a0 int valor = datos[medio]; \u00a0 if\r\n  (valor == n) \u00a0\u00a0\u00a0 return\r\n  medio;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  // encontrado \u00a0 if (valor < n) \u00a0\u00a0\u00a0 return busquedaBinaria(n, datos, a,\r\n  medio-1);\u00a0\u00a0 // a la izquierda \u00a0 else \u00a0\u00a0\u00a0 return busquedaBinaria(n, datos, medio+1,\r\n  z);\u00a0\u00a0 // a la derecha }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "298"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/156.html": {
        "definition": "No es lo mismo ocultar que redefinir", 
        "description": "No es lo mismo ocultar que redefinir. Ocultaci\u00f3n La subclase puede ocultar \u00b7 variables (de clase y de objeto) \u00b7 m\u00e9todos est\u00e1ticos a base de definir \u00b7 variables con el mismo nombre \u00b7 m\u00e9todos con la misma signatura Se puede acceder a los elementos de la superclase v\u00eda upcasting, creando una variable de la clase que necesitamos Redefinici\u00f3n (ver Polimorfismo ) La subclase puede redefinir \u00b7 m\u00e9todos de objetos a base de definir m\u00e9todos con la misma signatura \u00b7 mismo nombre \u00b7 mismo n\u00famero y tipo de argumentos \u00b7 igual o menos excepciones \u00b7 igual o m\u00e1s visible \u201cde paquete\u201d < protected < public \u00b7 igual resultado S\u00f3lo hay una forma de acceder al m\u00e9todo de la superclase: super .metodo(argumentos) y s\u00f3lo puede accederse a los m\u00e9todos de la superclase inmediatamente superior a donde nos encontramos. Intentaremos mostrar mediante un ejemplo la sutil diferencia entre ocultar y redefinir. N\u00f3tese que java usa una variable, confusa, definida como Madre, pero referenciando un objeto de clase Hija. El upcasting resuelve diferentemente el caso de los m\u00e9todos ocultos y el de los redefinidos.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/220.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/246.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/234.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/155.html"
        ], 
        "title": "ocultaci\u00f3n versus redefinici\u00f3n", 
        "examples": [
            "public\r\n  class Madre { \u00a0 \u00a0 public static String getClase() {\r\n  return \"clase Madre\"; } \u00a0 \u00a0 public String getObjeto() { return\r\n  \"objeto de clase Madre\"; } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "public\r\n  class Hija extends Madre { \u00a0 \u00a0 // oculta \u00a0 public static String getClase() {\r\n  return \"clase Hija\"; } \u00a0 \u00a0 @Override \u00a0 public String getObjeto() { return\r\n  \"objeto de clase Hija\"; } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "public\r\n  class Madres_Hijas { \u00a0 public static void main(String[]\r\n  argumentos) { \u00a0\u00a0\u00a0 Madre madre =\r\n  new Madre(); \u00a0\u00a0\u00a0\r\n  System.out.println(\"madre.getClase()\u00a0\u00a0\u00a0 -> \" + madre.getClase()); \u00a0\u00a0\u00a0\r\n  System.out.println(\"madre.getObjeto()\u00a0\u00a0 -> \" + madre.getObjeto()); \u00a0 \u00a0\u00a0\u00a0 Hija hija = new Hija(); \u00a0\u00a0\u00a0\r\n  System.out.println(\"hija.getClase()\u00a0\u00a0\u00a0\u00a0 -> \" + hija.getClase()); \u00a0\u00a0\u00a0\r\n  System.out.println(\"hija.getObjeto()\u00a0\u00a0\u00a0 -> \" + hija.getObjeto()); \u00a0 \u00a0\u00a0\u00a0 Madre confusa = new Hija();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // upcasting \u00a0\u00a0\u00a0\r\n  System.out.println(\"confusa.getClase()\u00a0 -> \" + confusa.getClase()); \u00a0\u00a0\u00a0\r\n  System.out.println(\"confusa.getObjeto() -> \" + confusa.getObjeto()); \u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "$ java Madres_Hijas madre.getClase()\u00a0\u00a0\u00a0 -> clase Madre madre.getObjeto()\u00a0\u00a0 -> objeto de clase Madre \u00a0 hija.getClase()\u00a0\u00a0\u00a0\u00a0 -> clase Hija hija.getObjeto()\u00a0\u00a0\u00a0 -> objeto de clase Hija \u00a0 confusa.getClase()\u00a0 -> clase Madre confusa.getObjeto() -> objeto de clase Hija"
        ], 
        "id": "156"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/16.html": {
        "id": "16", 
        "definition": "En la declaraci\u00f3n se identifica el nombre, el n\u00famero de dimensiones y el tipo de datos", 
        "description": "En la declaraci\u00f3n se identifica el nombre, el n\u00famero de dimensiones y el tipo de datos. Sintaxis alternativa (para programadores de C) Un array declarado vale NULL hasta que se cree .", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/15.html"
        ], 
        "title": "declaraci\u00f3n"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/169.html": {
        "definition": "Sirve para indicar que una clase implementa una (o m\u00e1s) interfaces", 
        "concept": "palabra reservada", 
        "description": "Sirve para indicar que una clase implementa una (o m\u00e1s) interfaces. En Java se pueden implementar varias interfaces simult\u00e1neamente: Tambi\u00e9n se puede extender una clase (y s\u00f3lo una) al tiempo que se implementan varias interfaces:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "implements", 
        "id": "169"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/61.html": {
        "definition": "Paso de c\u00f3digo fuente a c\u00f3digo interpretable", 
        "concept": "concepto", 
        "description": "Paso de c\u00f3digo fuente a c\u00f3digo interpretable. El compilador de java produce c\u00f3digo interpretable. En otros lenguajes, el compilador genera directamente c\u00f3digo ejecutable. En el caso de java, se pasa de un fichero .JAVA a un fichero .CLASS Ver \" C\u00f3digo \". Ver herramienta \u201c javac \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/56.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/182.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Compilaci\u00f3n", 
        "alternative": "compilation", 
        "id": "61"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/193.html": {
        "definition": "Los elementos de una lista suelen nodos con este aspecto", 
        "description": "Los elementos de una lista suelen nodos con este aspecto", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/192.html"
        ], 
        "title": "nodos", 
        "examples": [
            "public\r\n  class Nodo {  \u00a0\u00a0\u00a0 private Object valor;  \u00a0\u00a0\u00a0 private Nodo\r\n  siguiente;  \u00a0 \u00a0\u00a0\u00a0 public Nodo(Object valor, Nodo siguiente)\r\n  {  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.valor = valor;  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.siguiente = siguiente;  \u00a0\u00a0\u00a0 }  \u00a0 \u00a0\u00a0\u00a0 public Object getValor() { return valor;\r\n  }  \u00a0 \u00a0\u00a0\u00a0 public void\r\n  setValor(Object valor) { this.valor = valor; }  \u00a0 \u00a0\u00a0\u00a0 public Nodo getSiguiente() { return\r\n  siguiente; }  \u00a0 \u00a0\u00a0\u00a0 public void setSiguiente(Nodo siguiente)\r\n  {  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.siguiente = siguiente; \u00a0\u00a0\u00a0 }  }\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "193"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/258.html": {
        "definition": "Software Development Kit", 
        "concept": "acr\u00f3nimo", 
        "description": "Software Development Kit. Entorno de desarrollo. Ver \u201c JDK \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/186.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "SDK", 
        "id": "258"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/321.html": {
        "definition": "Es un refinamiento de \u201c Set \u201d especializado en trabajar con tipos enumerados", 
        "concept": "clase", 
        "description": "Es un refinamiento de \u201c Set \u201d especializado en trabajar con tipos enumerados. Dado un tipo enumerado podemos ... Es f\u00e1cil iterar sobre los elementos de un EnumSet", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "EnumSet", 
        "id": "321"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/315.html": {
        "definition": "Ordena primero por nombre, desou\u00e9s por tel\u00e9fono (si el nombre es el mismo) y por \u00faltimo por direcci\u00f3n (si nombre y tel\u00e9fono son iguales)", 
        "description": "Ordena primero por nombre, desou\u00e9s por tel\u00e9fono (si el nombre es el mismo) y por \u00faltimo por direcci\u00f3n (si nombre y tel\u00e9fono son iguales).", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/314.html"
        ], 
        "title": "Ejemplo", 
        "examples": [
            "public class Contacto \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  implements Comparable<Contacto> { \u00a0\u00a0\u00a0 private\r\n  String nombre; \u00a0\u00a0\u00a0 private\r\n  String telefono; \u00a0\u00a0\u00a0 private\r\n  String direccion; \u00a0 \u00a0\u00a0\u00a0 public int\r\n  compareTo(Contacto contacto) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int\r\n  comparison = nombre.compareTo(contacto.getNombre()); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if\r\n  (comparison != 0) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  return comparison; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 comparison =\r\n  telefono.compareTo(contacto.getTelefono()); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (comparison !=\r\n  0) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  return comparison; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return\r\n  direccion.compareTo(contacto.getDireccion()); \u00a0\u00a0\u00a0 } }"
        ], 
        "id": "315"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/98.html": {
        "definition": "Son clases con un conjunto expl\u00edcito, finito y fijo de constantes", 
        "concept": "concepto", 
        "description": "Son clases con un conjunto expl\u00edcito, finito y fijo de constantes. Ver \u201c enum \u201d. Se pueden emplear variables de los tipos enumerados definidos", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/97.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/99.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/100.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/101.html"
        ], 
        "title": "Enumerados", 
        "id": "98"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/127.html": {
        "definition": "Permite crear clases que son extensi\u00f3n de otras (subclases)", 
        "concept": "palabra reservada", 
        "description": "Permite crear clases que son extensi\u00f3n de otras (subclases). Una interfaz de puede extender a\u00f1adiendo nuevas constantes y/o m\u00e9todos cuyo cuerpo no se explicita. Una clase (normal o abstracta) se puede extender a\u00f1adiendo nuevos m\u00e9todos concretos o abstractos. Si como resultado de la extensi\u00f3n no queda ning\u00fan m\u00e9todo abstracto, el resultado ser\u00e1 una clase normal. Si como resultado de la extensi\u00f3n quedan m\u00e9todos abstractos, la clase ser\u00e1 abstracta.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "extends", 
        "id": "127"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/145.html": {
        "id": "145", 
        "definition": "Ver \u201c Visibilidad \u201d: \u00e1mbito de c\u00f3digo en el que un elemento de Java puede referenciarse por su nombre", 
        "description": "Ver \u201c Visibilidad \u201d: \u00e1mbito de c\u00f3digo en el que un elemento de Java puede referenciarse por su nombre. Se dice que un elemento es \u201cfriendly\u201d cuando no es ni \u201cpublic\u201d, ni \u201cprotected\u201d, ni \u201cprivate\u201d. En este vademecum lo denominaremos \u201cde paquete\u201d. Los elementos \u201cde paquete\u201d pueden referenciarse desde cualquier punto del c\u00f3digo dentro del mismo paquete en el que se define. class X La clase X puede referenciarse desde cualquier punto del c\u00f3digo dentro del mismo paquete en el que se define . Se pueden definir clases \u201cde paquete\u201d dentro de otras clases o en ficheros que contienen alguna otra clase \u201cp\u00fablica\u201d. resultado m\u00e9todo (argumentos) El m\u00e9todo puede referenciarse (ejecutarse) desde cualquier punto del c\u00f3digo dentro del mismo paquete en el que se define . Se pueden definir m\u00e9todos \u201cde paquete\u201d dentro de cualquier clase. variable La variable puede referenciarse (leer o escribir) desde cualquier punto del c\u00f3digo dentro del mismo paquete en el que se define . Se pueden definir variables \u201cde paquete\u201d como campos de cualquier clase. Pero no se recomienda; es preferible definir las variables como \u201cprivate\u201d y estableces m\u00e9todos de acceso para lectura (getX() o isX()) y escritura (setX()).", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/300.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Friendly"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/316.html": {
        "definition": "Interfaz que sirve para marcar clases que disfrutan de una relaci\u00f3n de orden total, lo que se traduce en que las clases que implementen esta interfaz deben proporcionar un m\u00e9todo que compara x1 con x2, devolviendo Los objetos que implementan esta interface se pueden usar en conjuntos ordenados y mapas ordenados", 
        "concept": "interface", 
        "description": "Interfaz que sirve para marcar clases que disfrutan de una relaci\u00f3n de orden total, lo que se traduce en que las clases que implementen esta interfaz deben proporcionar un m\u00e9todo que compara x1 con x2, devolviendo Los objetos que implementan esta interface se pueden usar en conjuntos ordenados y mapas ordenados.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/317.html"
        ], 
        "title": "Comparator<T>", 
        "id": "316"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/196.html": {
        "id": "196", 
        "definition": "Son aquellas en las que el \u00faltimo nodo referencia de nuevo al primero de la lista", 
        "description": "Son aquellas en las que el \u00faltimo nodo referencia de nuevo al primero de la lista.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/192.html"
        ], 
        "title": "listas circulares"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/118.html": {
        "id": "118", 
        "definition": "Aunque frecuentemente se pueden usar las clases proporcionadas por el entorno java, las excepciones propias \u00b7 permiten documentar mejor el programa \u00b7 permiten discriminar por medio de varios bloques catch consecutivos \u00b7 permiten transportar datos adicionales desde donde se crean a donde se capturan", 
        "description": "Aunque frecuentemente se pueden usar las clases proporcionadas por el entorno java, las excepciones propias \u00b7 permiten documentar mejor el programa \u00b7 permiten discriminar por medio de varios bloques catch consecutivos \u00b7 permiten transportar datos adicionales desde donde se crean a donde se capturan", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/117.html"
        ], 
        "title": "\u00bfcu\u00e1ndo tener excepciones propias?"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/259.html": {
        "definition": "Ver \u201c M\u00e9todo / setters \u201d", 
        "concept": "concepto", 
        "description": "Ver \u201c M\u00e9todo / setters \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/206.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Setters", 
        "id": "259"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/354.html": {
        "definition": "Es una clase de java con la particularidad de ser la \u201cmadre de todas las clases\u201d", 
        "concept": "clase", 
        "description": "Es una clase de java con la particularidad de ser la \u201cmadre de todas las clases\u201d. Eso quiere decir que todos las clases que escriban los programadores heredan de Object, bien directamente (si no se dice nada) o indirectamente (si la clase extiende a otra). As\u00ed es a todos los efectos equivalente a: La clase Object define m\u00e9todos que, salvo reescritura en las subclases, son compartidos por absolutamente todos los objetos que se creen. Los m\u00e1s relevantes de estos m\u00e9todos son Los m\u00e9todos rese\u00f1ados no son los \u00fanicos; simplemente son los que el autor ha considerado m\u00e1s relevantes el prop\u00f3sito de este documento.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "Object", 
        "examples": [
            "package java.lang; \u00a0 public class Object { \u00a0 \u00a0\u00a0\u00a0\r\n  /** \u00a0\u00a0\u00a0\u00a0 *\r\n  @return la clase del objeto en ejecuci\u00f3n. \u00a0\u00a0\u00a0\u00a0 */ \u00a0\u00a0\u00a0\r\n  public final native Class getClass(); \u00a0 \u00a0\u00a0\u00a0\r\n  /** \u00a0\u00a0\u00a0\u00a0 *\r\n  @return un hashCode para el objeto en ejecuci\u00f3n. \u00a0\u00a0\u00a0\u00a0 */ \u00a0\u00a0\u00a0 public\r\n  native int hashCode(); \u00a0 \u00a0\u00a0\u00a0 /** \u00a0\u00a0\u00a0\u00a0 *\r\n  @return true si este objeto es igual al pasado como argumento. \u00a0\u00a0\u00a0\u00a0 */ \u00a0\u00a0\u00a0\r\n  public boolean equals(Object obj) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return this == obj; \u00a0\u00a0 \u00a0} \u00a0 \u00a0\u00a0\u00a0 /** \u00a0\u00a0\u00a0\u00a0 *\r\n  @return una representaci\u00f3n textual del objeto. \u00a0\u00a0\u00a0\u00a0 */ \u00a0\u00a0\u00a0\r\n  public String toString() { \u00a0\u00a0\u00a0\u00a0 return\r\n  getClass().getName() + \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"@\" +\r\n  Integer.toHexString(hashCode()); \u00a0\u00a0\u00a0\r\n  } }\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "354"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/286.html": {
        "definition": "En general, se dice de las situaciones en que se intentan sacar datos en un contenedor que no los tiene", 
        "concept": "concepto", 
        "description": "En general, se dice de las situaciones en que se intentan sacar datos en un contenedor que no los tiene. As\u00ed es muy frecuente oir hablar de \"buffer underflow\" para indicar que no hay tantos datos en un buffer. En aritm\u00e9tica se aplica cuando un valor no llega al m\u00ednimo previsto. En n\u00fameros en coma flotante el underflow se puede producir en el exponente cuando \u00e9ste es negativo. Java lo interpreta como valor despreciable, indistinguible de cero. Double. MIN_VALUE / 10 = 4.90000e-324 / 10 = 0.00000 Ver \" Desbordamiento \".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Underflow", 
        "id": "286"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/115.html": {
        "id": "115", 
        "definition": "No", 
        "description": "No. Cuando se lanza una excepci\u00f3n, esta va saltando hasta que la pilla el primer catch que encuentra, momento en que deja de volar. El catch que pilla una excepci\u00f3n puede hacer varias cosas:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/114.html"
        ], 
        "title": "\u00bfPueden haber 2 excepciones \"volando\" a la vez?"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/336.html": {
        "id": "336", 
        "definition": "", 
        "description": "", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/334.html"
        ], 
        "title": "\u00bfQu\u00e9 relaci\u00f3n hay entre Iterator<T> e Iterable<T>?"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/293.html": {
        "id": "293", 
        "definition": "Son las que se declaran static en el cuerpo de una clase", 
        "description": "Son las que se declaran static en el cuerpo de una clase. Ver \u201c campo de clase \u201d. Ver \u201c \u00c1mbito . Ver \u201c Variables / creaci\u00f3n y destrucci\u00f3n \u201d. Ver \u201c bloques static \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/44.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/12.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/292.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/267.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/289.html"
        ], 
        "title": "de clase"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/59.html": {
        "definition": "Son listas de objetos que se caracterizan porque los nuevos objetos se a\u00f1aden al final, mientras que van saliendo por el principio", 
        "concept": "estructura de datos", 
        "description": "Son listas de objetos que se caracterizan porque los nuevos objetos se a\u00f1aden al final, mientras que van saliendo por el principio. De esta forma, resulta que el primero que entra es el primero que sale (en Ingl\u00e9s, FIFO: First In, First Out). Es f\u00e1cil implementar las colas como listas:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Colas", 
        "examples": [
            "public interface Cola<T>\r\n  { \u00a0\u00a0\u00a0 // mete un objeto T al final de la cola \u00a0\u00a0\u00a0 void mete(T t) throws ExcepcionColaLlena; \u00a0 \u00a0\u00a0\u00a0 // retira el primer objeto de la cola \u00a0\u00a0\u00a0 T sacaPrimero() throws\r\n  ExcepcionColaVacia; \u00a0 \u00a0\u00a0\u00a0 // mira, sin retirar, el primer objeto \u00a0\u00a0\u00a0 T miraPrimero() throws\r\n  ExcepcionColaVacia; \u00a0 \u00a0\u00a0\u00a0 // objetos en la cola \u00a0\u00a0\u00a0 int longitud(); }\u00a0\u00a0\u00a0\u00a0 ", 
            "import\r\n  java.util.*; \u00a0 public\r\n  class ColaLista<T> implements Cola<T> { \u00a0 private List<T> lista = new\r\n  ArrayList<T>(); \u00a0 \u00a0 public void mete(T t) { \u00a0\u00a0\u00a0 lista.add(t); \u00a0 } \u00a0 \u00a0 public T miraPrimero() throws ExcepcionColaVacia\r\n  { \u00a0\u00a0\u00a0 if (lista.size() == 0) throw new ExcepcionColaVacia(); \u00a0\u00a0\u00a0 return lista.get(0); \u00a0 } \u00a0 \u00a0 public T sacaPrimero() throws\r\n  ExcepcionColaVacia { \u00a0\u00a0\u00a0 if (lista.size() == 0) throw new\r\n  ExcepcionColaVacia(); \u00a0\u00a0\u00a0 return lista.remove(0); \u00a0 } \u00a0 \u00a0 public int longitud() { \u00a0\u00a0\u00a0 return lista.size(); \u00a0 } }\u00a0\u00a0\u00a0 "
        ], 
        "alternative": "queues", 
        "id": "59"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/309.html": {
        "id": "309", 
        "definition": "Navidad de este a\u00f1o: Navidad del a\u00f1o 2000: Navidad del a\u00f1o que viene:", 
        "description": "Navidad de este a\u00f1o: Navidad del a\u00f1o 2000: Navidad del a\u00f1o que viene:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/307.html"
        ], 
        "title": "Ejemplo: c\u00f3digo para marcar una fecha"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/64.html": {
        "id": "64", 
        "definition": "\u00b7 Cuando se necesita la funcionalidad de otra clase dentro de esta; pero no su interfaz (por eso la otra clase aparece como private) \u00b7 Cuando hay m\u00e1s de 1 objeto que incorporar", 
        "description": "\u00b7 Cuando se necesita la funcionalidad de otra clase dentro de esta; pero no su interfaz (por eso la otra clase aparece como private) \u00b7 Cuando hay m\u00e1s de 1 objeto que incorporar", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/63.html"
        ], 
        "title": "\u00bfcu\u00e1ndo usar composici\u00f3n?"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/211.html": {
        "definition": "Se dice que un m\u00e9todo es recursivo cuando se llama a s\u00ed mismo Este tipo de programas funciona porque cada m\u00e9todo tiene sus propias variables locales (argumentos)", 
        "description": "Se dice que un m\u00e9todo es recursivo cuando se llama a s\u00ed mismo Este tipo de programas funciona porque cada m\u00e9todo tiene sus propias variables locales (argumentos). En cada llamada se crea una variable propia y diferente de otras. Los m\u00e9todos recursivos se prestan a errores de programaci\u00f3n si el creador no se asegura de que en ejecuci\u00f3n el n\u00famero de llamadas termina alguna vez. El c\u00f3digo anterior podr\u00eda estar mal en peque\u00f1os detalles que dar\u00edan lugar a una recursi\u00f3n sin fin: Si erramos en la condici\u00f3n de parada y el m\u00e9todo se llama recursivamente sin fin, agotaremos la memoria disponible para ejecuci\u00f3n y java lanzar\u00e1 una excepci\u00f3n StackOverflowError. Es pr\u00e1cticamente obligatorio que los m\u00e9todos recursivos incluyan c\u00f3digo condicional. De hecho, en su dise\u00f1o hay que tener en cuanta dos criterios: 1. en cada llamada recursiva debemos acercarnos a la soluci\u00f3n: convergencia 2. debe haber un caso \u201ccero\u201d: terminaci\u00f3n Los m\u00e9todos recursivos reflejan en programaci\u00f3n la t\u00e9cnica de demostraci\u00f3n por inducci\u00f3n de las matem\u00e1ticas. Los programas recursivos tienen cierta fama, no siempre merecida, de lentos. Aunque conviene medir tiempos antes de opinar, es cierto que en ocasiones la soluci\u00f3n recursiva es muy elegante pero discutiblemente eficiente. Existe una forma de plantear m\u00e9todos recursivos que frecuentemente ayuda a mejorar el tiempo de ejecuci\u00f3n. Se conoce como \u201ctail recursion\u201d y consiste en evitar que un m\u00e9todo tenga que hacer algo tras conocer el resultado de la llamada recursiva; es decir, que lo \u00faltimo que haga un m\u00e9todo sea llamarse recursivamente. El m\u00e9todo anterior usando esta t\u00e9cnica quedar\u00eda as\u00ed No obstante, si es necesario evitar la recursi\u00f3n, siempre puede pasarse a una estructura de bucles que refleje el mismo razonamiento recursivo:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html"
        ], 
        "title": "m\u00e9todos recursivos", 
        "examples": [
            "factorial( 5 ) = 5 *\r\n  factorial( 4 ) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 = 5 * ( 4 * factorial( 3 ) ) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 = 5 * ( 4 * (3 * factorial( 2\r\n  ) ) ) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 = 5 * ( 4 * (3 * (2 *\r\n  factorial( 1 ) ) ) )  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 = 5 * ( 4 * (3 * (2 * ( 1 *\r\n  factorial( 0 ) ) ) ) ) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 = 5 * ( 4 * (3 * (2 * ( 1 * 1\r\n  ) ) ) ) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 = 5 * 4 * 3 * 2 * 1 * 1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 = 120", 
            "public int factorial(int n) {\n\u00a0\u00a0\u00a0 if (n == 0)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // falla si llamamos\r\n  con n < 0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return 1; \n\u00a0\u00a0\u00a0 else \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return n * factorial(n-1);\u00a0\u00a0\u00a0 \r\n  } "
        ], 
        "id": "211"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/347.html": {
        "definition": "Dentro de las colecciones de datos que java proporciona en su biblioteca b\u00e1sica, esta interfaz recoge una estructura de datos que permite almacenar asociaciones { clave, valor } de forma que dada una clave podemos localizar inmediatamente el valor asociado", 
        "concept": "interface", 
        "description": "Dentro de las colecciones de datos que java proporciona en su biblioteca b\u00e1sica, esta interfaz recoge una estructura de datos que permite almacenar asociaciones { clave, valor } de forma que dada una clave podemos localizar inmediatamente el valor asociado. A veces se denominan diccionarios o incluso \u201carrays asociativos\u201d. Se satisfacen las siguientes propiedades \u00b7 las claves, de tipo K, no pueden estar duplicadas \u00b7 los valores, de tipo V, pueden ser cualesquiera \u00b7 el tama\u00f1o del mapa se adapta din\u00e1micamente a lo que haga falta El resultado es una especie de array de tama\u00f1o adaptable que, en vez de indexarse por posici\u00f3n, se indexa por medio de una clave.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/348.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/349.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/350.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/351.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/409.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/352.html"
        ], 
        "title": "Map<K, V>", 
        "id": "347"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/325.html": {
        "definition": "donde las partes entre corchetes son opcionales", 
        "description": "donde las partes entre corchetes son opcionales. argumento $ De entre los valores que vienen a continuaci\u00f3n, 1$ se refiere al primer argumento, 2$ al segundo y as\u00ed sucesivamente. < se refiere al anterior. Si no se especifica argumento, se van usando los valores presentes sucesivamente. marca Determina peque\u00f1as variantes sobre la cadena generada: ancho Indica la longitud m\u00ednima de la cadena generada. Si se necesita m\u00e1s espacio, la cadena ser\u00e1 m\u00e1s larga. Si no, se rellena con blancos a la izquierda (salvo si se indica la marca '-' en cuyo caso se rellena por la derecha; o si se indica la marca '0' en cuyo caso se rellena con ceros). precisi\u00f3n tipo Ver \" N\u00fameros / notaci\u00f3n local \".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/323.html"
        ], 
        "title": "especificaci\u00f3n de formato", 
        "examples": [
            "\u00a0", 
            "\u00a0", 
            "-", 
            "#", 
            "+", 
            "(", 
            "0", 
            ",", 
            "%n", 
            "\u00a0", 
            "%%", 
            "\u00a0", 
            "%s", 
            "%S", 
            "%d", 
            "\u00a0", 
            "%o", 
            "\u00a0", 
            "%x", 
            "%X", 
            "%c", 
            "%C", 
            "%f", 
            "\u00a0", 
            "%e", 
            "%E", 
            "%g", 
            "%G", 
            "%b", 
            "%B", 
            "%t", 
            "%T", 
            "%tA", 
            "%ta", 
            "%tB", 
            "%tb", 
            "%tC", 
            "%tc", 
            "\u201c%ta %tb %td %tT %tZ %tY\u201d", 
            "%tD", 
            "\u201c%tm/%td/%ty\u201d", 
            "%td", 
            "%tE", 
            "%te", 
            "%tF", 
            "\u201c%tY-%tm-%td\u201d", 
            "%tH", 
            "%th", 
            "\u201c%tb\u201d", 
            "%tI", 
            "%tj", 
            "%tk", 
            "%tL", 
            "%tl", 
            "%tM", 
            "%tm", 
            "%tN", 
            "%tp", 
            "%Tp", 
            "%tQ", 
            "%tR", 
            "\u201c%tH:%tM\u201d", 
            "%tr", 
            "\u201c%tI:%tM:%tS %Tp\u201d", 
            "%tS", 
            "%ts", 
            "%tT", 
            "\u201c%tH:%tM:%tS\u201d", 
            "%tY", 
            "%ty", 
            "%tZ", 
            "%tz"
        ], 
        "id": "325"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/26.html": {
        "definition": "Se llaman sentencias de asignaci\u00f3n a las que cargan un nuevo valor en una variable: El tipo de la variable debe ser \u00b7 igual al de la expresi\u00f3n \u00b7 en tipos primitivos: \u00b7 asignable por promoci\u00f3n (ver \u201c Promoci\u00f3n \u201d) \u00b7 asignable por reducci\u00f3n (ver \u201c Reducci\u00f3n \u201d) \u00b7 en objetos: \u00b7 asignable por Upcasting (ver \u201cCasting \u201d) \u00b7 asignable por Downcasting (ver \u201cCasting\u201d)", 
        "concept": "concepto", 
        "description": "Se llaman sentencias de asignaci\u00f3n a las que cargan un nuevo valor en una variable: El tipo de la variable debe ser \u00b7 igual al de la expresi\u00f3n \u00b7 en tipos primitivos: \u00b7 asignable por promoci\u00f3n (ver \u201c Promoci\u00f3n \u201d) \u00b7 asignable por reducci\u00f3n (ver \u201c Reducci\u00f3n \u201d) \u00b7 en objetos: \u00b7 asignable por Upcasting (ver \u201cCasting \u201d) \u00b7 asignable por Downcasting (ver \u201cCasting\u201d)", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/122.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/242.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/247.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/288.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/47.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/86.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/47.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/27.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/28.html"
        ], 
        "title": "Asignaci\u00f3n", 
        "alternative": "assignment", 
        "id": "26"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/378.html": {
        "definition": "Conecta con la entrada est\u00e1ndar de la aplicaci\u00f3n, permitiendo leer de ella", 
        "description": "Conecta con la entrada est\u00e1ndar de la aplicaci\u00f3n, permitiendo leer de ella. Lo m\u00e1s t\u00edpico es leer l\u00edneas para analizarlas Tambi\u00e9n se puede usar un analizador lexicogr\u00e1fico. Ver \u201c Scanner \u201d. Desde el sistema operativo, es f\u00e1cil para el usuario redirigir la entrada desde un fichero y tambi\u00e9n es posible cambiar la entrada desde dentro del programa La definici\u00f3n en la clase System es as\u00ed:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html"
        ], 
        "title": "System.in", 
        "examples": [
            "import java.io.*; \u00a0 public class SystemIn { \u00a0\r\n  public static void main(String[] argumentos) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throws Exception { \u00a0\u00a0\u00a0\r\n  BufferedReader reader = \u00a0\u00a0\u00a0\u00a0\u00a0 new BufferedReader( \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new InputStreamReader(System.in)); \u00a0\u00a0\u00a0\r\n  String linea = reader.readLine(); \u00a0\u00a0\u00a0\r\n  int nLineas = 1; \u00a0\u00a0\u00a0\r\n  while (linea != null) { \u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\"t\" +\r\n  nLineas + \": \" + linea); \u00a0\u00a0\u00a0\u00a0\u00a0 linea = reader.readLine(); \u00a0\u00a0\u00a0\u00a0\u00a0 nLineas++; \u00a0\u00a0\u00a0\r\n  } \u00a0\r\n  } }", 
            "$ java SystemIn una \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 1: una dos \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 2: dos y tres \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 3: y tres ^Z"
        ], 
        "id": "378"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/385.html": {
        "id": "385", 
        "definition": "", 
        "description": "", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/386.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/387.html"
        ], 
        "title": "Diccionario"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/25.html": {
        "definition": "Este m\u00e9todo sirve para copiar unos cuantos datos de un array en otro", 
        "concept": "m\u00e9todo", 
        "description": "Este m\u00e9todo sirve para copiar unos cuantos datos de un array en otro. copia \u201cn\u201d datos del array \u201corigen\u201d al array \u201cdestino\u201d. El primer dato que se copia del origen es el que est\u00e9 en la posici\u00f3n \u201cp1\u201d, que va a la posici\u00f3n \u201cp2\u201d del destino. Los arrays deben existir y disponer de suficientes datos en origen y espacio en destino para trasladar los n valores solicitados. Adem\u00e1s, los objetos en \u201corigen\u201d deben poder asignarse al array \u201cdestino\u201d (es decir, ser de tipos compatibles en asignaci\u00f3n. arraycopy es cuidadoso con los casos en que origen y destino sean el mismo array. Los siguientes fragmentos de c\u00f3digo son equivalentes en cuanto a su funci\u00f3n; pero \u201carraycopy\u201d es notablemente m\u00e1s r\u00e1pido: Ver \" arraycopy() \". Ver \"Arrays / copia\".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/15.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/25.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/22.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "arraycopy", 
        "examples": [
            "\u00a0\u00a0\u00a0 void arraycopy(Object origen, int p1, Object destino, int p2, int n)", 
            "\u00a0 public class A {} \u00a0 public class B extends A {} \u00a0\u00a0\u00a0  \u00a0 public void copiador(B[] origen, int p1, A[]\r\n  destino, int p2, int n) { \u00a0\u00a0\u00a0\u00a0\u00a0 A[] temporal = new A[n]; \u00a0\u00a0\u00a0\u00a0\u00a0 for (int k = 0; k < n; k++) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 temporal[k]\r\n  = origen[p1 + k];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \u00a0\u00a0\u00a0\u00a0\u00a0 for (int k = 0; k < n; k++) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 destino[p2\r\n  + k] = temporal[k];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \u00a0 }\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "25"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/148.html": {
        "definition": "El siguiente ejemplo muestra como crear un objeto que es una asociaci\u00f3n de dos datos de tipos formales S y T: Cuando se crean objetos de un tipo gen\u00e9rico, hay que proporcionar tipos concretos que determinen qu\u00e9 son realmente los tipos formales de la definici\u00f3n", 
        "description": "El siguiente ejemplo muestra como crear un objeto que es una asociaci\u00f3n de dos datos de tipos formales S y T: Cuando se crean objetos de un tipo gen\u00e9rico, hay que proporcionar tipos concretos que determinen qu\u00e9 son realmente los tipos formales de la definici\u00f3n.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/146.html"
        ], 
        "title": "creaci\u00f3n de clases gen\u00e9ricas", 
        "examples": [
            "public\r\n  class Pareja<S, T> { \u00a0\u00a0\u00a0 private S\r\n  primero; \u00a0\u00a0\u00a0 private T segundo; \u00a0 \u00a0\u00a0\u00a0 public Pareja(S primero, T segundo) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.primero = primero; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.segundo = segundo; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public S getPrimero() { return primero; } \u00a0 \u00a0\u00a0\u00a0 public T\r\n  getSegundo() { return segundo; } \u00a0 \u00a0\u00a0\u00a0 public void setPrimero(S primero) {\r\n  this.primero = primero; } \u00a0 \u00a0\u00a0\u00a0 public void setSegundo(T segundo) {\r\n  this.segundo = segundo; } \u00a0 }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Pareja<String, String> textos = \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new Pareja<String,\r\n  String>(\"hola\", \"adios\"); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(textos.getPrimero()); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(textos.getSegundo()); \u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Pareja<String, Number> tabla = \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new Pareja<String,\r\n  Number>(\"pi\", 3.1416); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(tabla.getPrimero()); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  System.out.println(tabla.getSegundo());"
        ], 
        "id": "148"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/189.html": {
        "definition": "Ver \u201cPalabras reservadas\u201d", 
        "concept": "palabras reservadas", 
        "description": "Ver \u201cPalabras reservadas\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/227.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Keywords", 
        "id": "189"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/170.html": {
        "definition": "Permite referirse a las clases de un paquete sin explicitar su nombre can\u00f3nico completo", 
        "concept": "palabra reservada", 
        "description": "Permite referirse a las clases de un paquete sin explicitar su nombre can\u00f3nico completo. A continuaci\u00f3n se muestra c\u00f3mo el uso de \"import\" puede hacer menos farragoso el c\u00f3digo de una clase: Tambi\u00e9n se pueden importar miembros est\u00e1ticos de una clase: Ver \u201cPaquete\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/228.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "import", 
        "examples": [
            "public\r\n  class Ejemplo { \u00a0\u00a0\u00a0 public static void main(String[] x) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 java.util.List<String> argumentos =  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new java.util.ArrayList<String>(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (String a : x) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 argumentos.add(a); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 java.util.Collections.reverse(argumentos); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (String a2 : argumentos) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.print(a2 + \",\r\n  \"); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(); \u00a0\u00a0\u00a0 } }\u00a0\u00a0\u00a0\u00a0 ", 
            "import java.util.ArrayList; import java.util.Collections; import java.util.List; \u00a0 public\r\n  class Ejemplo { \u00a0\u00a0\u00a0 public static void main(String[] x) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 List<String> argumentos = new ArrayList<String>(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (String a : x) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 argumentos.add(a); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Collections.reverse(argumentos); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (String a2 : argumentos) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.print(a2 + \",\r\n  \"); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(); \u00a0\u00a0\u00a0 } }", 
            "import java.util.*; \u00a0 public\r\n  class Ejemplo { \u00a0\u00a0\u00a0 public static void main(String[] x) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 List<String> argumentos = new ArrayList<String>(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (String a : x) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 argumentos.add(a); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Collections.reverse(argumentos); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (String a2 : argumentos) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.print(a2 + \",\r\n  \"); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(); \u00a0\u00a0\u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "public\r\n  class Punto { \u00a0\u00a0\u00a0 private double x; \u00a0\u00a0\u00a0 private double y; \u00a0 \u00a0\u00a0\u00a0 public Punto(double x, double y) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.x = x; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.y = y; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public static Punto polares(double\r\n  modulo, double phy) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double x = modulo * Math.cos(phy); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double y = modulo * Math.sin(phy); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return new Punto(x, y); \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double getModulo() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return Math.sqrt((x * x) + (y * y)); \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double getAngulo() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return Math.atan2(y, x); \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double getDistancia(Punto p) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double dx = p.x - this.x; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double dy = p.y - this.y; \u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return Math.sqrt((dx * dx) + (dy * dy)); \u00a0\u00a0\u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "import static java.lang.Math.*; \u00a0 public\r\n  class Punto { \u00a0\u00a0\u00a0 private double x; \u00a0\u00a0\u00a0 private double y; \u00a0 \u00a0\u00a0\u00a0 public Punto(double x, double y) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.x = x; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.y = y; \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public static Punto polares(double\r\n  modulo, double phy) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double x = modulo * cos(phy); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double y =\r\n  modulo * sin(phy); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return new Punto(x, y); \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double getModulo() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return sqrt((x * x) + (y * y)); \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double getAngulo() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return atan2(y, x); \u00a0\u00a0\u00a0 } \u00a0 \u00a0\u00a0\u00a0 public double getDistancia(Punto p) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double dx = p.x - this.x; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double dy = p.y - this.y; \u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return sqrt((dx * dx) + (dy * dy)); \u00a0\u00a0\u00a0 } }\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "170"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/37.html": {
        "id": "37", 
        "definition": "Los bucles \u201cfor\u201d se ejecutan un n\u00famero determinado de veces", 
        "description": "Los bucles \u201cfor\u201d se ejecutan un n\u00famero determinado de veces. Ver \u201c for \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/138.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/34.html"
        ], 
        "title": "bucles \"for\""
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/289.html": {
        "definition": "Son contenedores de valores, bien de tipos primitivos (n\u00fameros, caracteres o booleanos), bien objetos creados por el programador", 
        "concept": "concepto", 
        "description": "Son contenedores de valores, bien de tipos primitivos (n\u00fameros, caracteres o booleanos), bien objetos creados por el programador. Una variable tiene un nombre que es un identificador que permite dirigirse a ella sin ambig\u00fcedad. Si cada variable tiene un nombre exclusivo, no hay ambig\u00fcedad alguna. Pero si varias variables se denominan igual, hay que aclarar en cada momento a cual nos referimos. Ver \u201c \u00c1mbito \u201d. Java no permite variables hom\u00f3nimas en el mismo \u00e1mbito; pero si pueden existir en \u00e1mbitos diferentes. Lo primero que hay que hacer con una variables es declararla. En la declaraci\u00f3n se indica \u00b7 el tipo de valores que puede contener (siempre) \u00b7 el identificador que la denomina (siempre) \u00b7 el valor inicial que va a contener (opcional) (si no se indica un valor inicial, este depende de tipo de la variable) \u00b7 el tipo de visibilidad de que va a disfrutar: public, protected, private (opcional) (si no se indica el tipo de accesibilidad, se considera \u201caccesible en el paquete\u201d) \u00b7 si es modificable o no: final (opcional) (Una variable s\u00f3lo es final si se indica expl\u00edcitamente. Si no, ser\u00e1 modificable.)", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/12.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/290.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/291.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/292.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/293.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/294.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/295.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/296.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/297.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/298.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/299.html"
        ], 
        "title": "Variables", 
        "alternative": "variables", 
        "id": "289"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/208.html": {
        "definition": "D\u00edcese cuando al m\u00e9todo se le pasa una referencia al dato", 
        "concept": "paso de la referencia", 
        "description": "D\u00edcese cuando al m\u00e9todo se le pasa una referencia al dato. Aunque el m\u00e9todo no puede alterar la referencia propiamente dicha, s\u00ed puede alterar aquello a que se refiere la referencia. Se copia la referencia; pero se comparte el objeto. Java pasa por valor todo aquello que no sean tipos primitivos: arrays y objetos.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html"
        ], 
        "title": "paso de argumentos por referencia", 
        "examples": [
            "void a(int[] datos) {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // a recibe la referencia a un\r\n  array \u00a0\u00a0\u00a0 datos[0] = 1;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // a modifica el array\r\n  compartido } void\r\n  b() { \u00a0\u00a0\u00a0 int[] datos = new int[2]; \u00a0\u00a0\u00a0 datos[0] =\r\n  0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // la primera\r\n  posici\u00f3n contiene 0 \u00a0\u00a0\u00a0 a(datos);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // pasamos una\r\n  referencia al array \u00a0\u00a0\u00a0 System.out.println(datos[0]);\u00a0\u00a0\u00a0 // la primera posici\u00f3n contiene 1 }", 
            "void a(int[] datos) {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // a recibe la referencia a un\r\n  array \u00a0\u00a0\u00a0 datos = new int[2];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // a fabrica su propia copia \u00a0\u00a0\u00a0 datos[0] = 1;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // a modifica su array } \u00a0 void\r\n  b() { \u00a0\u00a0\u00a0 int[] datos = new int[2]; \u00a0\u00a0\u00a0 datos[0] =\r\n  0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // la primera\r\n  posici\u00f3n contiene 0 \u00a0\u00a0\u00a0 a(datos);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // pasamos a a una\r\n  referencia al array \u00a0\u00a0\u00a0 System.out.println(datos[0]); // la\r\n  primera posici\u00f3n contiene 0 }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "208"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/263.html": {
        "definition": "Dos m\u00e9todos pueden diferir en tipos de argumentos que, sin ser id\u00e9nticos, puedan admitir datos comunes, bien por promoci\u00f3n autom\u00e1tica (caso de tipos primitivos) bien por upcasting (caso de objetos)", 
        "description": "Dos m\u00e9todos pueden diferir en tipos de argumentos que, sin ser id\u00e9nticos, puedan admitir datos comunes, bien por promoci\u00f3n autom\u00e1tica (caso de tipos primitivos) bien por upcasting (caso de objetos). En tiempo de compilaci\u00f3n java opta por el m\u00e9todo que no requiera ni promoci\u00f3n ni upcasting. Esta decisi\u00f3n se realiza en tiempo de compilaci\u00f3n. Adem\u00e1s, en tiempo de ejecuci\u00f3n, puede entrar en juego la existencia de m\u00e9todos redefinidos, en cuyo caso se aplicar\u00eda polimorfismo sobre el m\u00e9todo seleccionado en tiempo de ejecuci\u00f3n.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/262.html"
        ], 
        "title": "sobrecarga, promoci\u00f3n y upcasting", 
        "examples": [
            "void metodo(int x) { ... } \u00a0 void metodo(long x) { ... }", 
            "class B extends A { ... } \u00a0 void metodo(A a) { ... } \u00a0 void metodo(B b) { ... }", 
            "int v = 5; metodo(v)", 
            "B b = new B(); metodo(b)"
        ], 
        "id": "263"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/79.html": {
        "id": "79", 
        "definition": "Los m\u00e9todos se declaran dentro de las clases", 
        "description": "Los m\u00e9todos se declaran dentro de las clases. Responden al esquema: <\u00e1mbito> [ static ] [ final ] <tipo> identificador ( [ <argumentos> ] ) Donde cada <argumento> responde al esquema de declaraci\u00f3n de un argumento formal. Su \u00e1mbito de uso es, al menos, toda la clase en la que se declaran. Los modificadores de visibilidad pueden hacerlos visibles fuera de la clase. Los m\u00e9todos final no pueden redefinirse. Los m\u00e9todos de clase, static, existen desde que arranca el programa hasta que termina. Los m\u00e9todos de objeto existen desde que se crea el objeto (con new), hasta que el objeto deja de usarse. Ver \" M\u00e9todo / signatura \". Ver \" M\u00e9todo \".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/73.html"
        ], 
        "title": "Declaraci\u00f3n de m\u00e9todos"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/17.html": {
        "definition": "Tras declarar un array hay que crearlo, lo que supone asignar memoria en todas y cada una de sus dimensiones: Se pueden crear arrays de tama\u00f1o 0", 
        "description": "Tras declarar un array hay que crearlo, lo que supone asignar memoria en todas y cada una de sus dimensiones: Se pueden crear arrays de tama\u00f1o 0. Declaraci\u00f3n y creaci\u00f3n pueden llevarse a cabo juntas: Una vez creados de un cierto tama\u00f1o, no se puede cambiar el tama\u00f1o. Al crear el array, sus elementos reciben un valor por defecto que depende de su tipo: \u00b7 enteros: valor 0 \u00b7 reales: valor 0.0 \u00b7 booleanos: valor false \u00b7 caracteres: valor (char)0 \u00b7 objetos: valor null En el siguiente ejemplo se crea una matriz con un n\u00famero aleatorio de filas y columnas: La dimensi\u00f3n de un array viene dada por el \u201ccampo\u201d length, que puede ser diferente en diferentes filas:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/16.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/73.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/15.html"
        ], 
        "title": "creaci\u00f3n", 
        "examples": [
            "\u00a0\u00a0\u00a0 /** \u00a0\u00a0\u00a0\u00a0 * Crea una matriz aleatroria. \u00a0\u00a0\u00a0\u00a0 * N\u00famero aleatorio de filas (1 .. 10). \u00a0\u00a0\u00a0\u00a0 * N\u00famero aleatorio de columnas en cada\r\n  fila (1 .. 10). \u00a0\u00a0\u00a0\u00a0 * Datos aleatorios en cada posici\u00f3n (-9\r\n  .. +99). \u00a0\u00a0\u00a0\u00a0 */ \u00a0\u00a0\u00a0 static int[][] crea() { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Random random = new Random(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int filas = 1 + random.nextInt(9); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int[][] resultado = new int[filas][]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int i = 0; i < filas; i++) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int columnas = 1 +\r\n  random.nextInt(9); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i] = new int[columnas]; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int j = 0; j < columnas;\r\n  j++) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultado[i][j]\r\n  = -9 + random.nextInt(109); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return resultado; \u00a0\u00a0\u00a0 }"
        ], 
        "id": "17"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/161.html": {
        "definition": "Ejecuci\u00f3n condicional: algunas sentencias se ejecutan o no dependiendo de una condici\u00f3n booleana:", 
        "concept": "palabra reservada", 
        "description": "Ejecuci\u00f3n condicional: algunas sentencias se ejecutan o no dependiendo de una condici\u00f3n booleana:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/162.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/163.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/164.html"
        ], 
        "title": "if", 
        "examples": [
            "if (condici\u00f3n) \u00a0\u00a0\u00a0 sentencia; \u00a0 if (condici\u00f3n) { \u00a0\u00a0\u00a0 sentencia 1; \u00a0\u00a0\u00a0 sentencia 2; \u00a0\u00a0\u00a0 ... \u00a0\u00a0\u00a0 sentencia ...; }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "if (condici\u00f3n) \u00a0\u00a0\u00a0 sentencia 1; else \u00a0\u00a0\u00a0 sentencia 2; \u00a0 if (condici\u00f3n) { \u00a0\u00a0\u00a0 sentencia 11; \u00a0\u00a0\u00a0 sentencia 12; \u00a0\u00a0\u00a0 ... \u00a0\u00a0\u00a0 setencia 1...; } else { \u00a0\u00a0\u00a0 sentencia 21; \u00a0\u00a0\u00a0 sentencia 22; \u00a0\u00a0\u00a0 ... \u00a0\u00a0\u00a0 sentencia 2...; }\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "161"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/65.html": {
        "definition": "Estructuras de datos donde no importa el orden, ni se admiten duplicados", 
        "concept": "estructuras de datos", 
        "description": "Estructuras de datos donde no importa el orden, ni se admiten duplicados. Ver \u201cSet\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/366.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Conjuntos", 
        "alternative": "set", 
        "id": "65"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/35.html": {
        "id": "35", 
        "definition": "Los bucles \u201cwhile\u201d se ejecutan cero o m\u00e1s veces", 
        "description": "Los bucles \u201cwhile\u201d se ejecutan cero o m\u00e1s veces. Ver \u201cwhile \u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/302.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/34.html"
        ], 
        "title": "bucles \"while\""
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/212.html": {
        "definition": "Una clase est\u00e1 formada por miembros: \u00b7 campos de clase (static): variables de la clase, compartidas por todos los objetos \u00b7 campos de objeto: variables de cada objeto \u00b7 m\u00e9todos: operaciones a realizar \u00b7 otras clases", 
        "concept": "concepto", 
        "description": "Una clase est\u00e1 formada por miembros: \u00b7 campos de clase (static): variables de la clase, compartidas por todos los objetos \u00b7 campos de objeto: variables de cada objeto \u00b7 m\u00e9todos: operaciones a realizar \u00b7 otras clases", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Miembro", 
        "alternative": "member", 
        "id": "212"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/14.html": {
        "definition": "Es la colecci\u00f3n de variables que se le pasan a un M\u00e9todo para que ejecute", 
        "concept": "concepto", 
        "description": "Es la colecci\u00f3n de variables que se le pasan a un M\u00e9todo para que ejecute. Permiten parametrizar su comportamiento adecuando la ejecuci\u00f3n a lo que interesa en cada momento. argumentos formales [formal arguments] Se denomina as\u00ed a las variables que aparecen en la cabecera del m\u00e9todo. En el ejemplo de arriba: a y b. argumentos reales [actual arguments] Se denomina as\u00ed a los valores concretos que se usan en la llamada al m\u00e9todo. En el ejemplo de arriba: 2 y 3.14. Ver \u201cM\u00e9todo\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Argumentos", 
        "examples": [
            "double\r\n  suma(int a, double b) { return a + b; }", 
            "double\r\n  c = suma(2, 3.14);"
        ], 
        "alternative": "arguments", 
        "id": "14"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/103.html": {
        "definition": "Es m\u00e9todo sirve para indicar si un objeto es igual a otro", 
        "concept": "m\u00e9todo", 
        "description": "Es m\u00e9todo sirve para indicar si un objeto es igual a otro. Ser\u00eda m\u00e1s propio decir \u201csi es equivalente a otro\u201d pues el programador puede definir la relaci\u00f3n de equivalencia que guste. Es un m\u00e9todo heredado de la clase madre \u201cjava.lang.Object\u201d y por tanto disponible en absolutamente todos los objetos que se creen; pero hay que tener en cuenta que el m\u00e9todo heredado se limita a decir que un objeto es igual a s\u00ed mismo y diferente de todos los dem\u00e1s: Como consecuencia, cuando un objeto no redefine equals(), es lo mismo igualdad que equivalencia Ver \u201chashCode()\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/154.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/391.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/392.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/393.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/394.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/406.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/396.html"
        ], 
        "title": "equals", 
        "examples": [
            "\u00a0\u00a0\u00a0 public boolean equals(Object obj) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return (this == obj); \u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "103"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/58.html": {
        "definition": "Java trabaja con caracteres usando 16 bits por car\u00e1cter, seg\u00fan la norma internacional Unicode ", 
        "description": "Java trabaja con caracteres usando 16 bits por car\u00e1cter, seg\u00fan la norma internacional Unicode . Hay varios convenios para utilizar bytes (8 bits) para representar caracteres (16 bits). Los m\u00e1s habituales son: iso-8859-1 S\u00f3lo sirve para caracteres que usan 8 bits (es decir, de los 16 bits del car\u00e1cter, los 8 primeros son ceros). Para transformar el car\u00e1cter en un byte, simplemente se ignoran los 8 primeros bits. Para transformar un byte en car\u00e1cter, se le a\u00f1aden 8 bits delante. Esta codificaci\u00f3n es suficiente para los lenguajes del suroeste de Europa (lenguas latinas). UTF-8 Sirva para codificar cualquier car\u00e1cter unicode. El convenio se especifica en la norma RFC2279. Puede ver una descripci\u00f3n en [http://es.wikipedia.org/wiki/UTF-8]. UTF-16BE UTF-16LE Estos formatos sirven para codificar cualquier car\u00e1cter unicode. Se limitan a partir los 16 bits del car\u00e1cter en 2 bytes de 8 bits cada uno. La diferencia entre los dos formatos es el orden en que se ponen los 2 bytes. El convenio se especifica en la norma RFC2781. Puede ver una descripci\u00f3n en la [http://en.wikipedia.org/wiki/UTF-16/UCS-2]. Si no se dice nada, se utiliza el valor por defecto, que puede conocerse por medio del m\u00e9todo: El conjunto de todas las codificaciones disponibles depende de cada plataforma. Para conocer los que tiene puede usar el m\u00e9todo", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/324.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/402.html"
        ], 
        "title": "32", 
        "alternative": "Codificaci\u00f3n de caracteres ", 
        "id": "58"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/188.html": {
        "definition": "Java Virtual Machine", 
        "concept": "acr\u00f3nimo", 
        "description": "Java Virtual Machine. M\u00e1quina virtual de java. Tambi\u00e9n llamada \u201cint\u00e9rprete de java\u201d. Ver \u201c java (herramienta est\u00e1ndar)\u201d. Lee c\u00f3digo interpretable (bytecode) y lo ejecuta.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/181.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "JVM", 
        "id": "188"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/12.html": {
        "definition": "Zona del texto de un programa donde un elemento es visible; es decir, donde se puede utilizar", 
        "description": "Zona del texto de un programa donde un elemento es visible; es decir, donde se puede utilizar. Se aplica a Variables, M\u00e9todos y Clases . Ver \" Visibilidad \". Ver \" Ocultaci\u00f3n \" (hom\u00f3nimos en \u00e1mbitos anidados). Ver \" Redefinici\u00f3n \" (mecanismo de herencia).", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "5", 
        "alternative": "\u00c1mbito ", 
        "id": "12"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/226.html": {
        "definition": "Ver \u201cPaquete\u201d", 
        "concept": "palabra reservada", 
        "description": "Ver \u201cPaquete\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/228.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "package", 
        "id": "226"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/254.html": {
        "definition": "Los programas ierativos suelen ser m\u00e1s r\u00e1pidos, mientras que los programas recursivos suelen ser m\u00e1s f\u00e1ciles de entender", 
        "concept": "o viceversa", 
        "description": "Los programas ierativos suelen ser m\u00e1s r\u00e1pidos, mientras que los programas recursivos suelen ser m\u00e1s f\u00e1ciles de entender. El programador puede elegir una u otra forma, seg\u00fan le convenga. Los siguientes m\u00e9todos calculan el m\u00e1ximo com\u00fan divisor de dos n\u00fameros enteros positivos.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/248.html"
        ], 
        "title": "sustituir iteraci\u00f3n por recursi\u00f3n", 
        "examples": [
            "\u00a0\u00a0\u00a0 int mcd(int a, int b) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 while (a != b) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (a > b) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 a -= b; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 else if (b > a) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 b -= a; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return a; \u00a0\u00a0\u00a0 }", 
            "\u00a0\u00a0\u00a0\u00a0 int mcd(int a, int b) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (a == b) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return a; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (a > b) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return mcd(a - b, b); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 else \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return mcd(a, b - a); \u00a0\u00a0\u00a0 }"
        ], 
        "id": "254"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/328.html": {
        "definition": "En general Date date= ", 
        "description": "En general Date date= ... String.format(..., date)", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/323.html"
        ], 
        "title": "Fecha y hora", 
        "examples": [
            "%tc %tZ %tz", 
            "mi\u00e9 oct 07 06:50:16 CEST 2009 CEST +0100", 
            "%tD %tF", 
            "10/07/09 2009-10-07", 
            "%tA %ta %td %te %tj", 
            "mi\u00e9rcoles mi\u00e9 01-31 1-31 001-366", 
            "%tB %tb %th %tm", 
            "octubre oct oct 01-12", 
            "%tC %tY %ty", 
            "20 (de 2009) 2009 09 (de 2009)", 
            "%tR %tr %tT", 
            "07:03 07:03:30 AM 07:03:30", 
            "%tH %tI %tk %tl %tp %Tp", 
            "00-23 01-12 0-23 1-12 \u201cam\u201d o \u201cpm\u201d \u201cAM\u201d o \u201cPM\u201d", 
            "%tM", 
            "00-59", 
            "%tS %ts", 
            "00-59 segundos desde el\r\n  1.1.1970", 
            "%tL %tQ", 
            "000-999 milisegundos desde el\r\n  1.1.1970", 
            "%tN", 
            "9 cifras"
        ], 
        "id": "328"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/6.html": {
        "id": "6", 
        "definition": "Se dice que una clase es \"abstract\" cuando alguno de sus m\u00e9todos es \"abstract\"", 
        "description": "Se dice que una clase es \"abstract\" cuando alguno de sus m\u00e9todos es \"abstract\". Las clases \"abstract\": \u00b7 no permiten generar objetos; es decir, no se puede hacer un \" new \" \u00b7 pueden tener m\u00e9todos \" abstract\" y m\u00e9todos normales \u00b7 pueden extenderse ; si la nueva clase proporciona el cuerpo de todos los m\u00e9todos, ser\u00e1 una clase normal, de lo contrario seguir\u00e1 siendo \"abstract\" Aunque conceptualmente sean cosas distintas, formal o sint\u00e1cticamente podemos decir que una \" interface \" es una clase \"abstract\" en la que: \u00b7 todos los m\u00e9todos son \"public abstract\"; de hecho no hay ni que decirlo \u00b7 todos los campos son \"public static final\"; de hecho no hay ni que decirlo", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/213.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/127.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/176.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/4.html"
        ], 
        "title": "Clases abstractas"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/128.html": {
        "definition": "Cuando se dice que A es superclase de B y que B es subclase de A", 
        "concept": "concepto", 
        "description": "Cuando se dice que A es superclase de B y que B es subclase de A. La nueva clase B dispone autom\u00e1ticamente de todos los miembros public, protected y \u201cde paquete\u201d de la clase A, miembros que puede usar o redefinir. Ver \u201c Herencia \u201d. En Java, una clase s\u00f3lo puede heredar de otra \u00fanica clase. No existe la posibilidad de herencia m\u00faltiple. Esto es incorrecto:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/155.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Extensi\u00f3n", 
        "id": "128"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/310.html": {
        "id": "310", 
        "definition": "Ferdie Adoboe (EEUU) corri\u00f3 los 100 metros hacia atr\u00e1s en 14 segundos en Amherst, el 28 de julio de 1983", 
        "description": "Ferdie Adoboe (EEUU) corri\u00f3 los 100 metros hacia atr\u00e1s en 14 segundos en Amherst, el 28 de julio de 1983. Eso fue hace \u2026 d\u00edas: Si mi amigo naci\u00f3 el 13 de octubre de 1990, hoy tiene \u2026 a\u00f1os:", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/307.html"
        ], 
        "title": "Ejemplo: c\u00f3digo para calcular la distancia entre dos fechas"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/179.html": {
        "definition": "Es lo que hace la m\u00e1quina virtual de java: lee c\u00f3digo interpretable y ordena qu\u00e9 debe hacer la m\u00e1quina real (por ejemplo, le indica al pentium qu\u00e9 debe ir haciendo para que ocurra lo que ha escrito el programador)", 
        "concept": "concepto", 
        "description": "Es lo que hace la m\u00e1quina virtual de java: lee c\u00f3digo interpretable y ordena qu\u00e9 debe hacer la m\u00e1quina real (por ejemplo, le indica al pentium qu\u00e9 debe ir haciendo para que ocurra lo que ha escrito el programador). Ver \u201cEjecuci\u00f3n\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/88.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Interpretaci\u00f3n", 
        "id": "179"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/151.html": {
        "id": "151", 
        "definition": "Existiendo tipos y m\u00e9todos gen\u00e9ricos, los m\u00e9todos pueden recibir o devolver objetos de dichos tipos", 
        "description": "Existiendo tipos y m\u00e9todos gen\u00e9ricos, los m\u00e9todos pueden recibir o devolver objetos de dichos tipos. donde el compilador puede chequear que llamamos al m\u00e9todo con una lista de String. Curiosamente, java no admite en estos casos las tradicionales relaciones de herencia, sino que es necesario ajustarse exactamente a lo dicho. En el ejemplo anterior, String significa \u00fanica y exclusivamente String, no siendo aceptable subtipos de dicha clase. NOTA: El uso tradicional de la herencia dice que donde se admite un tipo T es posible emplear cualquier subtipo de T. A fin de generalizar, java introduce una notaci\u00f3n espec\u00edfica para aliviar dicha rigidez: acepta el tipo T y nada m\u00e1s que el tipo T acepta el tipo T o cualquier subtipo de T. En particular, <?> acepta cualquier tipo. acepta el tipo T o cualquier supertipo de T. Esta flexibilidad se puede usar all\u00e1 donde hay tipos formales o argumentos formales: es un tipo gen\u00e9rico que s\u00f3lo puede instanciarse con subtipos de T. es un m\u00e9todo que s\u00f3lo puede llamarse con listas de objetos que son subtipos de T. es un m\u00e9todo que admite cualquier pareja de datos de cualquier tipo.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/146.html"
        ], 
        "title": "tipos formales acotados"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/246.html": {
        "definition": "Cuando un m\u00e9todo cambia su contenido sin cambiar su signatura", 
        "concept": "concepto", 
        "description": "Cuando un m\u00e9todo cambia su contenido sin cambiar su signatura. Ocurre cuando una clase B extiende a otra A y B tiene un m\u00e9todo con la misma signatura que un m\u00e9todo de A. class Operacion class Duplica extends Operacion class Suma extends Operacion La anotaci\u00f3n \u201c@Override\u201d le pide al compilador que verifique que eectivamente estamos redefiniendo un m\u00e9todo de la superclase. Si por error (por ejemplo, si nos equivocamos en los par\u00e1metros) el m\u00e9todo no redefine nada, el compilador lanza un error. Otro error frecuente es modificar la signatura de un m\u00e9todo de una superclase y olvidar que hay que adaptar los m\u00e9todos que lo redefinen. \u201c@Override\u201d detectar\u00eda el olvido. Cuando se van a utilizar las clases derivadas, se aplica polimorfismo: Ver \" Herencia \". En la subclase se pueden usar los m\u00e9todos de la subclase y los m\u00e9todos de la superclase, teniendo en cuenta que cuando un m\u00e9todo de la superclase ha sido redefinido, el acceso directo es a la redefinici\u00f3n en la subclase. No obstante, todos los m\u00e9todos de la superclase son accesibles por medio de \" super \".", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/412.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/413.html"
        ], 
        "title": "Redefinici\u00f3n de m\u00e9todos", 
        "examples": [
            "public class Operacion { \u00a0\u00a0\u00a0\r\n  public double aplica(double x) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return x; \u00a0\u00a0\u00a0\r\n  } }", 
            "public class Duplica \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 extends Operacion { \u00a0\u00a0\u00a0\r\n  @Override \u00a0\u00a0\u00a0 public double aplica(double x) {\u00a0\r\n  // redefine el m\u00e9todo \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return 2 * x; \u00a0\u00a0\u00a0\r\n  } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", 
            "public class Suma \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 extends Operacion { \u00a0\u00a0\u00a0\r\n  private double k; \u00a0 \u00a0\u00a0\u00a0\r\n  public Suma(double k) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.k = k; \u00a0\u00a0\u00a0\r\n  } \u00a0 \u00a0\u00a0\u00a0\r\n  @Override \u00a0\u00a0\u00a0\r\n  public double aplica(double x) {\u00a0\r\n  // redefine el m\u00e9todo \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return x + k; \u00a0\u00a0\u00a0\r\n  } }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "alternative": "method overriding", 
        "id": "246"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/89.html": {
        "definition": "Sea la clase Si el fichero \u201cHola", 
        "description": "Sea la clase Si el fichero \u201cHola.class\u201d est\u00e1 en el directorio X, nos situaremos en dicho directorio y llamaremos al int\u00e9rprete: Alternativamente, si estuvi\u00e9ramos en otro directorio, le indicar\u00edamos al int\u00e9rprete d\u00f3nde est\u00e1 nuestro c\u00f3digo interpretable (el directorio X):", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/88.html"
        ], 
        "title": "ficheros .class", 
        "examples": [
            "public\r\n  class Hola { \u00a0 public static void main(String[]\r\n  argumentos) { \u00a0\u00a0\u00a0 System.out.println(\"Hola.\"); \u00a0 } }"
        ], 
        "id": "89"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/301.html": {
        "definition": "Se usa como tipo del resultado de un m\u00e9todo para indicar que no devuelve nada", 
        "concept": "palabra reservada", 
        "description": "Se usa como tipo del resultado de un m\u00e9todo para indicar que no devuelve nada. Ver \u201cM\u00e9todo\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "void", 
        "id": "301"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/5.html": {
        "definition": "Se dice que un M\u00e9todo es \"abstract\" cuando se proporciona su Signatura, resultado y posibles excepciones; pero no su cuerpo", 
        "description": "Se dice que un M\u00e9todo es \"abstract\" cuando se proporciona su Signatura, resultado y posibles excepciones; pero no su cuerpo. Es decir, cuando se indica c\u00f3mo usarlo, pero no se proporciona el c\u00f3digo que lo materializa.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/200.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/261.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/4.html"
        ], 
        "title": "M\u00e9todos abstractos", 
        "examples": [
            "abstract String cifra(String\r\n  texto, Clave clave);"
        ], 
        "id": "5"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/225.html": {
        "id": "225", 
        "definition": "Ver \u201cSobrecarga\u201d", 
        "description": "Ver \u201cSobrecarga\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/262.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Overloading"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/50.html": {
        "definition": "Componente sint\u00e1ctico de sentencias \u201c try \u201d", 
        "concept": "palabra reservada", 
        "description": "Componente sint\u00e1ctico de sentencias \u201c try \u201d. B\u00e1sicamente permite capturar las excepciones lanzadas durante de la ejecuci\u00f3n del c\u00f3digo dentro del bloque try. De hecho, interrumpe la ejecuci\u00f3n secuencial del c\u00f3digo y pasa a ejecutarse el bloque catch. Se pueden acumular varios bloques catch asociados al mismo bloque try. Se prueban en el mismo orden que aparecen. La primera excepci\u00f3n que casa, es la que dispara el c\u00f3digo del bloque asociado. Casar significa que la excepci\u00f3n a capturar es igual a o subclase de la excepci\u00f3n reflejada en la cabecera del catch: Si ninguno de los catch presentes puede capturar la excepci\u00f3n, esta salta fuera del bloque try.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/285.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "catch", 
        "examples": [
            "class\r\n  A extends Exception { ... } class\r\n  B extends A { ... }", 
            "void\r\n  metodo() throws A, B { ... }", 
            "try\r\n  { \u00a0\u00a0\u00a0 metodo(); }\r\n  catch (B b) { \u00a0 ... captura\r\n  excepciones de clase B } catch (A a)\r\n  { \u00a0 ... captura\r\n  excepciones de clase A } catch\r\n  (Exception e) { \u00a0 ... captura otras\r\n  excepciones }", 
            "try\r\n  { \u00a0\u00a0\u00a0 metodo(); }\r\n  catch (A a) { \u00a0 ... captura\r\n  excepciones de clase A o B } catch (B b)\r\n  { \u00a0 ... no captura\r\n  nada }"
        ], 
        "id": "50"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/56.html": {
        "definition": "Se llama \"c\u00f3digo\" a las instrucciones que se le dan a un ordenador para funcionar", 
        "concept": "concepto", 
        "description": "Se llama \"c\u00f3digo\" a las instrucciones que se le dan a un ordenador para funcionar. El c\u00f3digo es la representaci\u00f3n del programa. \u00b7 C\u00f3digo fuente. Cuando el c\u00f3digo est\u00e1 escrito para que lo lean las personas. El c\u00f3digo fuente se puede editar para crearlo, ampliarlo o corregirlo. El c\u00f3digo fuente se le pasa al compilador, que genera c\u00f3digo interpretable. El compilador de java produce c\u00f3digo interpretable. En otros lenguajes, el compilador genera directamente c\u00f3digo ejecutable. \u00b7 C\u00f3digo interpretable. Cuando el c\u00f3digo est\u00e1 pensado para que lo lea el int\u00e9rprete de java. Este int\u00e9rprete, tambi\u00e9n llamado \"m\u00e1quina virtual de java\" es un ordenador programado. El c\u00f3digo interpretable se le pasa al int\u00e9rprete, que genera c\u00f3digo ejecutable. En la jerga de java, al c\u00f3digo interpretable se le denomina Bytecode . \u00b7 C\u00f3digo ejecutable. Cuando el c\u00f3digo est\u00e1 pensado para m\u00e1quinas. Por ejemplo, c\u00f3digo para ordenadores Pentium.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/42.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "C\u00f3digo", 
        "alternative": "code", 
        "id": "56"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/19.html": {
        "id": "19", 
        "definition": "Si un \"array\" unidimensional a tiene N miembros, al primero se accede escribiendo \"a[0]\", mientras que al \u00faltimo se accede escribiendo \"a[N-1]\"", 
        "description": "Si un \"array\" unidimensional a tiene N miembros, al primero se accede escribiendo \"a[0]\", mientras que al \u00faltimo se accede escribiendo \"a[N-1]\". El acceso puede ser \u00b7 para lectura (extraer el valor); por ejemplo \"System.out.println(a[3]);\" \u00b7 para escritura (cargar un valor); por ejemplo \"a[7] = 99;\" Cuando un \"array\" tiene varias dimensiones, hay que poner tantos \u00edndices entre corchetes como dimensiones tiene. \u00b7 en una matriz, el elemento de la primera fila y primera columna es en \"x[0][0]\"; es mero convenio decir que las filas son el primer \u00edndice o el segundo Si se intenta acceder a un elemento del array fuera de su rango (0 \u2013 array.length-1), se provoca una ArrayIndexOutOfBoundsException.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/15.html"
        ], 
        "title": "acceso"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/49.html": {
        "definition": "Se dice del caso en el que una variable de tipo B recibe el valor de una variable de tipo A", 
        "description": "Se dice del caso en el que una variable de tipo B recibe el valor de una variable de tipo A. Esta operaci\u00f3n s\u00f3lo se puede hacer, si el objeto referenciado por \u201ca\u201d es realmente de tipo B; es decir, s\u00f3lo es posible cuando el downcasting deshace un upcasting anterior. De lo contrario se provoca un error en tiempo de ejecuci\u00f3n, lanz\u00e1ndose una excepci\u00f3n de tipo ClassCastException.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/47.html"
        ], 
        "title": "downcasting", 
        "examples": [
            "A a = new B(); B b = (B)a;", 
            "A a = new A(); B b = (B)a;"
        ], 
        "id": "49"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/199.html": {
        "definition": "Ver \u201cJVM Java Virtual Machine\u201d", 
        "concept": "concepto", 
        "description": "Ver \u201cJVM Java Virtual Machine\u201d.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/188.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "M\u00e1quina virtual java", 
        "id": "199"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/287.html": {
        "definition": "Convenio internacional para representar caracteres de m\u00faltiples idiomas en 16 bits", 
        "concept": "concepto", 
        "description": "Convenio internacional para representar caracteres de m\u00faltiples idiomas en 16 bits. Es el convenio que usa java. Los detalles pueden verse en La siguiente tabla recoge los c\u00f3digos que nos afectan en el suroeste de Europa: No se \u201cve\u201d en la tabla; pero el c\u00f3digo 32 (20 en hexadecimal) corresponde al car\u00e1cter \u201cespacio en blanco\u201d. No se ve en la tabla; pero el c\u00f3digo hexadecimal 7F corresponde a la tecla DEL (\u201cborrado\u201d). Java permite expresar los caracteres usando el c\u00f3digo Unicode hexadecimal. Por ejemplo, el car\u00e1cter 'A' que tiene el c\u00f3digo hexadecimal 41 se puede escribir lo que es perfectamente absurdo para caracteres normales; pero puede ser \u00fatil para los caracteres que no suelen aparecer en nuestros teclados. Se pueden escribir cadenas de caracteres (String) con el mismo convenio. Vea \" codificaci\u00f3n de caracteres \" donde se explica c\u00f3mo se utilizan bytes (8 bits) para guardar caracteres (16 bits).", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/58.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "Unicode", 
        "examples": [
            "\u00a0 ! \" #\r\n  $ % ' ( ) * + , - . /", 
            "0 1 2 3 4 5 6 7 8 9 : ; < = > ?", 
            "@ A B C D E F G H I J K L M N O", 
            "P Q R S T U V W X Y Z [\u00a0 ] ^ _", 
            "` a b c d e f g h i j k l m n o", 
            "p q r s t u v w x y z { | } ~\u00a0 ", 
            "\u00a0 \u00a1 \u00a2 \u00a3 \u00a4 \u00a5 \u00a6\r\n  \u00a7 \u00a8 \u00a9 \u00aa \u00ab \u00ac \u00ad \u00ae \u00af", 
            "\u00b0 \u00b1 \u00b2 \u00b3 \u00b4 \u00b5 \u00b6 \u00b7 \u00b8 \u00b9 \u00ba \u00bb \u00bc \u00bd \u00be \u00bf", 
            "\u00c0 \u00c1 \u00c2 \u00c3 \u00c4 \u00c5 \u00c6 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00cc \u00cd \u00ce \u00cf", 
            "\u00d0 \u00d1 \u00d2 \u00d3 \u00d4 \u00d5 \u00d6 \u00d7 \u00d8 \u00d9 \u00da \u00db \u00dc \u00dd \u00de \u00df", 
            "\u00e0 \u00e1 \u00e2 \u00e3 \u00e4 \u00e5 \u00e6 \u00e7 \u00e8 \u00e9 \u00ea\r\n  \u00eb \u00ec \u00ed \u00ee \u00ef", 
            "\u00f0 \u00f1 \u00f2 \u00f3 \u00f4 \u00f5 \u00f6 \u00f7 \u00f8 \u00f9 \u00fa \u00fb \u00fc \u00fd \u00fe \u00ff"
        ], 
        "id": "287"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/275.html": {
        "definition": "Construcci\u00f3n sint\u00e1ctica muy compacta para representar la ejecuci\u00f3n de una entre varias sentencias dependiendo de un valor: \u00b7 S\u00f3lo funcionan sobre enteros, booleanos o caracteres \u00b7 Chequean que no hay duplicados \u00b7 las condiciones tienen que ser excluyentes \u00b7 Mejor legibilidad \u00b7 Sin \u201cbreak\u201d, el programa no saltar\u00eda al final \u00b7 El \u201cdefault\u201d es opcional; si no aparece, no se ejecuta nada Las sentencias \u201cbreak\u201d provocan la terminaci\u00f3n de la sentencia condicional", 
        "concept": "palabra reservada", 
        "description": "Construcci\u00f3n sint\u00e1ctica muy compacta para representar la ejecuci\u00f3n de una entre varias sentencias dependiendo de un valor: \u00b7 S\u00f3lo funcionan sobre enteros, booleanos o caracteres \u00b7 Chequean que no hay duplicados \u00b7 las condiciones tienen que ser excluyentes \u00b7 Mejor legibilidad \u00b7 Sin \u201cbreak\u201d, el programa no saltar\u00eda al final \u00b7 El \u201cdefault\u201d es opcional; si no aparece, no se ejecuta nada Las sentencias \u201cbreak\u201d provocan la terminaci\u00f3n de la sentencia condicional. Si no se aparece, el c\u00f3digo siguiente se sigue ejecutando.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html"
        ], 
        "title": "switch", 
        "examples": [
            "switch\r\n  (mes) {  case\r\n  1:  \u00a0\u00a0\u00a0 print(\u201cenero\u201d);  \u00a0\u00a0\u00a0 break;  case\r\n  2:  \u00a0\u00a0\u00a0 print(\u201cfebrero\u201d);  \u00a0\u00a0\u00a0 break;  ...\r\n   default:\r\n   \u00a0\u00a0\u00a0 print(\u201cno se\u201d); ", 
            "switch\r\n  (mes) {  case\r\n  1: case 3: case 5: case 7:  case\r\n  8: case 10: case 12:  \u00a0\u00a0\u00a0 dias = 31;  \u00a0\u00a0\u00a0 break;  case\r\n  4: case 6: case 9: case 11:  \u00a0\u00a0\u00a0 dias = 30;  \u00a0\u00a0\u00a0 break;  case\r\n  2:  \u00a0\u00a0\u00a0 if (bisiesto)  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 dias = 29;  \u00a0\u00a0\u00a0 else  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 dias = 28;  \u00a0\u00a0\u00a0 break;  default:\r\n   \u00a0\u00a0\u00a0 dias = 0;  }", 
            "public\r\n  class Switcher { \u00a0 public static void main(String[]\r\n  argumentos) { \u00a0\u00a0\u00a0 int m = Integer.parseInt(argumentos[0]); \u00a0\u00a0\u00a0 int n = 0; \u00a0\u00a0\u00a0 switch (m) { \u00a0\u00a0\u00a0\u00a0\u00a0 case 0: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 n++; \u00a0\u00a0\u00a0\u00a0\u00a0 case 1: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 n++; \u00a0\u00a0\u00a0\u00a0\u00a0 case 2: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 n++; \u00a0\u00a0\u00a0\u00a0\u00a0 default: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 n++; \u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 System.out.println(\"n = \" + n); \u00a0 } }", 
            "$\r\n  java Switcher 0 n\r\n  = 4 \u00a0 $\r\n  java Switcher 1 n\r\n  = 3 \u00a0 $\r\n  java Switcher 2 n\r\n  = 2 \u00a0 $\r\n  java Switcher 3 n\r\n  = 1 \u00a0 $\r\n  java Switcher 100 n\r\n  = 1"
        ], 
        "id": "275"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/295.html": {
        "id": "295", 
        "definition": "En la declaraci\u00f3n de una constante \u00b7 se indica su nombre (identificador) \u00b7 su tipo (primitivo o clase)", 
        "description": "En la declaraci\u00f3n de una constante \u00b7 se indica su nombre (identificador) \u00b7 su tipo (primitivo o clase). Este tipo no podr\u00e1 ser modificado en el futuro. No obstante, \u00b7 si el tipo es primitivo: v\u00e9ase promoci\u00f3n y reducci\u00f3n. \u00b7 si el tipo es un objeto: v\u00e9ase \u201ccasting\u201d. \u00b7 [opcionalmente] se carga un valor inicial \u00b7 se califica como public, \u201cde paquete\u201d, protected o private. Esta calificaci\u00f3n no podr\u00e1 modificarse en el futuro. \u00b7 [opcionalmente] se marca como final, indicando que su valor no podr\u00e1 ser modificado (tras su carga inicial).", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/289.html"
        ], 
        "title": "declaraci\u00f3n"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/383.html": {
        "definition": "Madre de un conjunto de clases para escribir ficheros car\u00e1cter a car\u00e1cter", 
        "concept": "clase abstracta", 
        "description": "Madre de un conjunto de clases para escribir ficheros car\u00e1cter a car\u00e1cter. Java convierte los caracteres unicode en bytes para guardar en el fichero. Vea \"codificaci\u00f3n de los caracteres\". La clase derivada m\u00e1s habitual es java.io.FileWriter FileWriter(File file) constructor FileWriter (File file, boolean append) constructor: a\u00f1ade al final FileWriter (String nombre) constructor FileWriter (String nombre, boolean append) constructor: a\u00f1ade al final Todas las clases derivadas de Writer proporcionan estos m\u00e9todos: java.io.Writer Writer append(char c) a\u00f1ade un car\u00e1cter al final del fichero void close() cierra el fichero, asegurando que todo queda bien escrito en el fichero en disco void flush() asegura que todos los caracteres quedan bien escritos en el disco, sin cerrar el fichero void write(char[] chars) escribe en el fichero el array de caracteres void write(char[] chars, int start, int n) escribe 'n' caracteres en el fichero, concretamente, los del array 'chars', empezando en la posici\u00f3n 'start'. void write(String s) escribe en el fichero la cadena 's' void write(String s, int start, int n) escribe 'n' caracteres en el fichero, concretamente, los de la cadena 's', empezando en la posici\u00f3n 'start'. Ejemplo de uso: OutputStream escribe caracteres (16 bits). Si necesita escribir bytes (8 bits), debe utilizar la clase OutputStream . Ver PrintWriter, File, OutputStream, Reader .", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/384.html"
        ], 
        "title": "Writer", 
        "examples": [
            "\u00a0\u00a0\u00a0 /** \u00a0\u00a0\u00a0\u00a0 * Escritura de\r\n  caracteres en ficheros. \u00a0\u00a0\u00a0\u00a0 * \u00a0\u00a0\u00a0\u00a0 * @param fichero\r\n  nombre del fichero al que queremos escribir. \u00a0\u00a0\u00a0\u00a0 * @param chars\u00a0\u00a0 caracteres que queremos mandar al fichero. \u00a0\u00a0\u00a0\u00a0 * @throws IOException\r\n  salta si hay problemas  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n  al abrir o al escribir. \u00a0\u00a0\u00a0\u00a0 */ \u00a0\u00a0\u00a0\r\n  public void escribeCaracteres(String fichero, char[] chars) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throws IOException { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Writer os = new FileWriter(fichero); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 os.write(chars); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 os.close(); \u00a0\u00a0\u00a0\r\n  }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 "
        ], 
        "id": "383"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/363.html": {
        "definition": "Analizador l\u00e9xico simple", 
        "concept": "clase", 
        "description": "Analizador l\u00e9xico simple. Se construye sobre alg\u00fan tipo de fuente de caracteres: Sobre la fuente de caracteres, va seleccionando lexemas (tokens) separados por espacio en blanco. Proporciona los resultados por medio de una interface Iterator: Se puede parametrizar Scanner para que utilice cualquier otro tipo de separador de tokens. Adem\u00e1s, ofrece una serie de m\u00e9todos que, habiendo le\u00eddo un token, lo intentan interpretar como alg\u00fan tipo primitivo de java: Para analizar valores num\u00e9ricos se emplean los convenios locales de puntuaci\u00f3n. Dichos m\u00e9todos intentan interpretar el token que toca leer, lanzando una excepci\u00f3n si no puede: \u00b7 InputMismatchException si el token no responde al tipo deseado \u00b7 NoSuchElementException si no quedan m\u00e1s tokens Por \u00faltimo cabe mencionar el m\u00e9todo que devuelve lo que queda por leer de la l\u00ednea actual; es decir, desde donde estemos hasta el primer fin de l\u00ednea. Llamadas consecutivas a nextLine() van proporcionando l\u00edneas sucesivas de texto.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/303.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/364.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/365.html"
        ], 
        "title": "Scanner", 
        "examples": [
            "String s =  \u00a0 \"Martes, 13 de\r\n  septiembre de 2005, actualizado a las 16:16 h.\"; \u00a0\u00a0\u00a0 Scanner scanner = new Scanner(s); \u00a0\u00a0\u00a0\r\n  for (Iterator it = scanner; it.hasNext(); ) { \u00a0\u00a0\u00a0\u00a0\u00a0 String token = (String) it.next(); \u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(token); \u00a0\u00a0\u00a0\r\n  }", 
            "Martes, 13 de septiembre de 2005, actualizado a las 16:16 h."
        ], 
        "id": "363"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/276.html": {
        "definition": "Todos los objetos disponen de un campo que se llama \u201cthis\u201d y contiene una referencia al propio objeto", 
        "concept": "palabra reservada", 
        "description": "Todos los objetos disponen de un campo que se llama \u201cthis\u201d y contiene una referencia al propio objeto.", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/277.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/278.html"
        ], 
        "title": "this", 
        "id": "276"
    }, 
    "http://www.dit.upm.es/~pepe/libros/vademecum/topics/15.html": {
        "definition": "Son colecciones de objetos numerados, todos del mismo tipo", 
        "concept": "concepto", 
        "description": "Son colecciones de objetos numerados, todos del mismo tipo. Pueden ser \u00b7 unidimensionales (en \u00e1lgebra se suelen llamar vectores), \u00b7 bidimensionales (en \u00e1lgebra se suelen llamar matrices), \u00b7 tridimensionales (a veces se les llaman tensores) \u00b7 de un n\u00famero superior de dimensiones Por ser m\u00e1s precisos, un \"array\" multidimensional se concibe como un \"vector de vectores\" lo que permite que cada vector sea de un tama\u00f1o diferente. As\u00ed, una matriz puede verse como una serie de filas, cada una con una serie de columnas. Como no todas las filas tienen que tener el mismo n\u00famero de columnas, la matriz no necesariamente tiene que ser rectangular. Para poder utilizar un array hay que seguir unos ciertos pasos: 1. declararlo: nombre del array, n\u00famero de dimensiones y tipo de datos que contiene 2. crearlo o ubicar memoria (memory allocation): n\u00famero de datos que contiene 3. se puede acceder al array: lectura y escritura", 
        "links": [
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/3.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/16.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/17.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/18.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/19.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/20.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/21.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/22.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/23.html", 
            "http://www.dit.upm.es/~pepe/libros/vademecum/topics/24.html"
        ], 
        "title": "Arrays", 
        "id": "15"
    }
}