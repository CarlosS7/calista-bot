outputmacro: testbot() 

^addtopic(~TESTTOPIC)
$control_pre = ~control
$control_main = ~control
$control_post = ~control
$userprompt = ^"$login: >"
$botprompt = ^"testbot: "

# this function is executed once for every new user chatting with duke
outputmacro: duke()  # you get duke by default
$token = #DO_INTERJECTION_SPLITTING  | #DO_NUMBER_MERGE   | #DO_PROPERNAME_MERGE | #DO_POSTAG  | #DO_PARSE
^addtopic(~introductions)
^import("FACTS/kb-java" @0 keep permanent)
^createfact (kb loaded FACTS/kb-java)
$control_pre = ~control
$control_main = ~control
$control_post = ~control
$userprompt = ^"$login: >"
$botprompt = ^"DUKE: "

# this function is executed once for every new user chatting with georgia
outputmacro: georgia()	# you can request georgia by giving  name:georgia   as your login
$token = #DO_INTERJECTION_SPLITTING | #DO_NUMBER_MERGE   | #DO_PROPERNAME_MERGE | #DO_POSTAG  | #DO_PARSE
^addtopic(~introductions)
$control_pre = ~control
$control_main = ~control
$control_post = ~control
$botprompt = ^"GEORGIA: "

table: defaultbot (^name)
^createfact(^name defaultbot defaultbot)
DATA:
duke

topic: ~control system ()
t: ($code=pre)  #nothing to do for preprocessing
	end(TOPIC)
	
t: ($code=post) # nothing to do for postprocessing
  	end(TOPIC)


### Out-of-band tags ###

#Import knowledge base from file
#! [import FACTS/kb-java iteracion]
u: ( \[ import _*1 _*1 \] ) ^noerase() ^repeat() ^import('_0 @0 keep permanent) ^createfact (kb loaded '_0) \[sendcs \( java question '_1 \) \]



#List the kbs loaded
#! [listkb]
u: ( \[ listkb \] ) ^noerase() ^repeat() ^query(direct_sv kb loaded ?) \[ kbs loaded: 	
    loop()
     {
     ^pick(@0object)
     }
	\]



#Look up concept in knowledge base, if result found
#! [java question iteracion]
u: ($bot=duke \[ Java question _* \] )
   ^noerase() ^repeat()
   ^query(direct_sv _0 topic ?)
   _0 es un @0object
   ^query(direct_sv _0 content ?)
   . @0object.
   ^query(direct_sv _0 links_to ?)
   . Puedes preguntarme tambien sobre     
   loop()
     {
     ^pick(@0object),
     }
    . _@fullresponse \[sendmaia assert explained(concept _0) \]
	

#Look up concept in knowledge base, if no result found
#! [java question iteracion]
u: ($bot=duke \[ Java question _* \] )
    ^noerase() ^repeat()
	\[sendmaia retrieve _0\]
   


	

	
#Offer to tell an example
#! [java offer example]
u: ($bot=duke \[ Java offer example \] )
   ^noerase() ^repeat()
   Si quieres un ejemplo, puedes pedirlo.
   
#Look up example for a concept in knowledge base, if result found
#! [java sample iteracion]
u: ($bot=duke \[ Java sample _* \] )
   ^noerase() ^repeat()
   ^query(direct_sv _0 example ?)
   @0object _@fullresponse

	
#Look up example for a concept in knowledge base, if no result found
#! [java sample iteracion]
u: ($bot=duke \[ Java sample _* \] )
    ^noerase() ^repeat()
	No tengo ejemplos para este concepto.
	
	
	
	
   
#Recommends to learn about a random concept
#! [java recommend random]
u: ($bot=duke \[ Java recommend random \] )
   ^noerase() ^repeat()
   ^query(direct_v ? content ?)
   Hoy te propongo repasar    
   ^pick(@0subject).    
   
#Recommends to learn about a specific concept
#! [java recommend iteracion]
u: ($bot=duke \[ Java recommend _* \] )
   ^noerase() ^repeat()
   Te recomiendo aprender antes _0 para entender mejor este concepto.

   
   
   
#Test a question
#! [java test iteracion]
u: ($bot=duke \[ Java test _* \] )
   ^noerase() ^repeat()
   ^query(direct_sv _0 example ?)
   Para repasar, seguro que puedes decirme el concepto al que se refiere este ejemplo: @0object

#Affirm an answer for a previous test question
#! [java affirm iteracion]
u: ($bot=duke \[ Java affirm _* \] )
   ^noerase() ^repeat()
   \[sendmaia assert affirm(concept _0)\]
   
#Congratulates for a correct answer
#! [java testok iteracion]
u: ($bot=duke \[ Java testok _* \] )
   ^noerase() ^repeat()
   Exacto. Se trata de _0.
   
#Incorrect answer
#! [java testfail iteracion]
u: ($bot=duke \[ Java testfail _* \] )
   ^noerase() ^repeat()
   Incorrecto. Se trata de _0.   
   
  
  


u: ( \[ echo _* \] )
    ^noerase() ^repeat()
    Echo _0 .


u: ($code=main %input<%userfirstline) gambit(~introductions)

u: ($code=main) # main per-sentence processing

	$currenttopic = %topic		# get the current topic at start of volley

	nofail(TOPIC ^rejoinder())	# try for rejoinders. might generate an answer directly from what we are looking for.

	if (%length == 0 AND %response == 0 )
	{
		nofail(TOPIC ^gambit($currenttopic))  # gambit current topic since no input (usually start of conversation)
	}

	if (%response == 0) { nofail(TOPIC ^respond($currenttopic)) } # current topic tries to respond to his input

	if (%response == 0) # see if some other topic has keywords matching his input (given we have no response yet)
	{
		@8 = ^keywordtopics()	# get topics referred in input
		loop()
		{
			$$topic = first(@8subject)
			nofail(TOPIC ^respond($$topic))
			if (%response != 0) # stop when we find something to say
			{
				^end(RULE)	# we are done, this terminates the loop (not the rule)
			}
		}
	}	

	if (%response == 0 AND ^hasKeyword($currenttopic)) { nofail(TOPIC ^gambit($currenttopic)) } # gambit current topic since keywords match current topic

	if (%response == 0) # gambit from ANY matching topic
	{
		@8 = ^keywordtopics()	# get topics referred in input
		loop()
		{
			$$topic = first(@8subject)
			nofail(TOPIC ^Gambit($$topic))	# gambit in best matching topic
			if (%response != 0) # stop when we find something
			{
				^end(RULE)
			}
		}
	}
	if (%response == 0){ nofail(TOPIC ^gambit($currenttopic)) } # gambit from current topic even though no keywords matched
	
	if (%response == 0) 
	{ 
		@8 = ^GambitTopics()		# all topics with gambits (excluding system topics)
		loop()
		{
			$$topic = pick(@8)
			nofail(TOPIC ^Gambit($$topic))	# try a topic at random
			if (%response != 0)
			{
				^end(RULE)
			}
		}
	}
	
	if (%response == 0) 
	{
		 ^repeat() 
		 No tengo respuesta para eso.
	}


# BELOW is logically equivalent to the above topic

topic: ~alternate_control system ()
t: ($code=pre)  #nothing to do for preprocessing
	end(TOPIC)
	
t: ($code=post) # nothing to do for postprocessing
	end(TOPIC)

u: () $currenttopic = %topic		# get the current topic at start of volley
u: () ^rejoinder()	# try for rejoinders. might generate an answer directly from what we are looking for.
u: ( %response=0 %length=0) ^gambit($currenttopic)  # gambit current topic since no input (usually start of conversation)
u: (%response=0) ^respond($currenttopic) # current topic tries to respond to his input
u: (%response=0) 
		@8 = ^keywordtopics()	# get topics referred in input
		loop()
		{
			$$topic = first(@8subject)
			nofail(TOPIC Respond($$topic))
			if (%response != 0) # stop when we find something to say
			{
				^end(TOPIC)	# we are done, this terminates the loop (not the rule)
			}
		}
u: (%response=0  ^hasKeyword($currenttopic))  ^gambit($currenttopic)  # gambit current topic since keywords match current topic
u: (%response=0 )
		@8 = ^keywordtopics()	# get topics referred in input
		loop()
		{
			$$topic = first(@8subject)
			nofail(TOPIC ^Gambit($$topic))	# gambit in best matching topic
			if (%response != 0) # stop when we find something
			{
				^end(TOPIC)
			}
		}
	}
u: (%response=0) ^gambit($currenttopic)  # gambit from current topic even though no keywords matched
u: (%response=0)	
		@8 = ^GambitTopics()		# all topics with gambits (excluding system topics)
		loop()
		{
			$$topic = pick(@8)
			NOFAIL(TOPIC ^Gambit($$topic))	# try a topic at random
			if (%response != 0)
			{
				^end(TOPIC)
			}
		}
u: (%response=0)		
	^repeat() 
	I don't know what to say. 
